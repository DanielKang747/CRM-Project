import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;

import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;

public class CustomerCare implements ActionListener
{	
	Connection connection;
	PreparedStatement preparedStatement;
	Statement statement;
	ResultSet resultSet;
	ResultSet resultAutomobileSet;

	public Dimension jFrameX;
	public int jFrameY;
	
	public final int SEARCH_ID = 0;
	public final int SEARCH_FIRST_NAME = 1;
	public final int SEARCH_LAST_NAME = 2;
	public final int SEARCH_CELL = 3;
	public final int SEARCH_ALL = 4;

	public final int NEW_MODE = 1;
	public final int EDIT_MODE = 2;
	
	JFrame jFrame = new JFrame("CRM");
	
	DefaultTableModel defaultTableModel_Personal_Info 
		= new DefaultTableModel(new String[] { "Customer ID", "Last Name", "First Name", "Cell Num", "Birth Date", "E-mail"}, 0)
	{
		@Override
		public boolean isCellEditable(int row, int column)
		{
			return false;
		}
	};
	
	DefaultTableModel defaultTableModel_Automobile_Info 
		= new DefaultTableModel(new String[] { "Customer ID", "Time Stamp", "TXN_Type", "Plate", "DOC_NO", "EXP_DATE", "NEW_EXP_DATE","Proc_Type", "PREMIUM", "TEXT_DATE_TIME", "CALL_DATE_TIME", "VISIT_DATE_TIME",  "COMPLETE_DATE", "COMPANY_NAME", "MEMO", "OWNERSHIP"}, 0)
	{
		@Override
		public boolean isCellEditable(int row, int column)
		{
			return false;
		}
	};

	DefaultTableModel defaultTableModel_House_Info 
		= new DefaultTableModel(new String[] { "Customer ID", "House", "First Name", "Cell Num", "Birth Date", "E-mail"}, 0)
	{
		@Override
		public boolean isCellEditable(int row, int column)
		{
			return false;
		}
	};

	DefaultTableModel defaultTableModel_Traveler_Info 
		= new DefaultTableModel(new String[] { "Customer ID", "TTT", "First Name", "Cell Num", "Birth Date", "E-mail"}, 0)
	{
		@Override
		public boolean isCellEditable(int row, int column)
		{
			return false;
		}
	};

	JTabbedPane tabbedPane = new JTabbedPane();
	JTabbedPane tabbedPaneForCustomerInfo = new JTabbedPane();
	ImageIcon icon = createImageIcon("middle.gif");
	
	JTable jTable_Personal_Info = new JTable(defaultTableModel_Personal_Info);
	JTable jTable_Automobile_Info = new JTable(defaultTableModel_Automobile_Info);
	JTable jTable_House_Info = new JTable(defaultTableModel_House_Info);
	JTable jTable_Traveler_Info = new JTable(defaultTableModel_Traveler_Info);

	JScrollPane jScrollPane_Personal_Info = new JScrollPane(jTable_Personal_Info);
	JScrollPane jScrollPane_Automobile_Info = new JScrollPane(jTable_Automobile_Info);
	JScrollPane jScrollPane_House_Info = new JScrollPane(jTable_House_Info);
	JScrollPane jScrollPane_Traveler_Info = new JScrollPane(jTable_Traveler_Info);

	JComponent panel_Personal_Info = jScrollPane_Personal_Info;
	JComponent panel_Automobile_Info = jScrollPane_Automobile_Info;
	JComponent panel_House_Info = jScrollPane_House_Info;
	JComponent panel_Traveler_Info = jScrollPane_Traveler_Info;
	
	JTextField jTextField = new JTextField(20);
	
	JButton jButton = new JButton("Search");
	
	JComboBox<String> jComboBox = new JComboBox<String>(new String[] {"ID", "First Name", "Last Name", "Cell #", "All"}); 
	
	JMenuBar menuBar = new JMenuBar();
	JMenu adminMenu = new JMenu("Admin");
	
	JPanel jPanel_Search_Result = new JPanel(new FlowLayout());
	JPanel jPanel_Search = new JPanel(new FlowLayout());
	JPanel jPanel_Customer_Search = new JPanel(new FlowLayout());

	public CustomerCare()
	{
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		
		adminMenu.add(new JMenuItem("New"));
		adminMenu.add(new JMenuItem("Update"));
		adminMenu.addSeparator();
		
		menuBar.add(adminMenu);

		jTable_Personal_Info.addFocusListener(new FocusAdapter() {
		    @Override
		    public void focusLost(FocusEvent e) {
		        TableCellEditor tce = jTable_Personal_Info.getCellEditor();
		        if (tce != null) {
		            tce.stopCellEditing();
		        }
		        else {
		        		System.out.println("tce = " + tce);
		        }
		    }
		});
		
		jFrame.setJMenuBar(menuBar);
		
		jTextField.addKeyListener(new KeyAdapter() {
			public void keyPressed(KeyEvent e) {
			    if (e.getKeyCode() == KeyEvent.VK_ENTER) {
					switch( jComboBox.getSelectedIndex() )
					{
						case SEARCH_ID:
							searchMember(SEARCH_ID, jTextField.getText().trim());
						break;

						case SEARCH_FIRST_NAME:
							searchMember(SEARCH_FIRST_NAME, jTextField.getText().trim());
						break;
						
						case SEARCH_LAST_NAME:
							searchMember(SEARCH_LAST_NAME, jTextField.getText().trim());
						break;
						
						case SEARCH_CELL:
							searchMember(SEARCH_CELL, jTextField.getText().trim());
						break;
						
						case SEARCH_ALL:
							searchMember(SEARCH_ALL, jTextField.getText().trim());
						break;
					}
			    }
			}
		});
		
		jTable_Personal_Info.getTableHeader().setReorderingAllowed(false);
		jTable_Automobile_Info.getTableHeader().setReorderingAllowed(false);
		jTable_House_Info.getTableHeader().setReorderingAllowed(false);
		jTable_Traveler_Info.getTableHeader().setReorderingAllowed(false);
		
        tabbedPaneForCustomerInfo.addTab("Customer", icon, panel_Personal_Info,
                "Personal Information");
        
        tabbedPane.addTab("Automobile", icon, panel_Automobile_Info,
                "Automobile Information");
        tabbedPane.setMnemonicAt(0, KeyEvent.VK_2);
        
        tabbedPane.addTab("House", icon, panel_House_Info,
                "House Information");
        tabbedPane.setMnemonicAt(1, KeyEvent.VK_3);

        tabbedPane.addTab("Traveller", icon, panel_Traveler_Info,
                "Traveler Information");
        tabbedPane.setMnemonicAt(2, KeyEvent.VK_4);

        Dimension nd = new Dimension(screenSize.width - 200, 350);
        Dimension ndForCustomerInfo = new Dimension(1200, 350);
        tabbedPaneForCustomerInfo.setPreferredSize(ndForCustomerInfo);
        tabbedPane.setPreferredSize(nd);
        
        //The following line enables to use scrolling tabs.
        tabbedPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);
        tabbedPaneForCustomerInfo.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);
        
        //Add the tabbed pane to this panel.
        jPanel_Search_Result.add(tabbedPane);
        jPanel_Customer_Search.add(tabbedPaneForCustomerInfo);
        
		jPanel_Search.add(jComboBox);
		jPanel_Search.add(jTextField);
		jPanel_Search.add(jButton);
		
		jFrame.add(jPanel_Search_Result, "South");
		jFrame.add(jPanel_Search, "North");
		jFrame.add(jPanel_Customer_Search);
		
		jFrame.setSize(screenSize.width/2, screenSize.height/2);
		jFrame.setResizable(true);
		jFrame.setVisible(true);
		jFrame.setLocationRelativeTo(null);
		
		jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		Connection connection = null;
	    PreparedStatement query = null;
		
		//New
		adminMenu.getItem(0).addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				MemberDialog memberDialog = new MemberDialog();
				memberDialog.jDialog.setModal(true);
				memberDialog.jDialog.setVisible(true);
			}			
		});
		
		//Update
		adminMenu.getItem(1).addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				switch( jTable_Personal_Info.getSelectedRowCount() )
				{
					case 0:
						
						JOptionPane.showMessageDialog(jFrame, "No data to be updated");
					break;
					
					case 1:
						
						String id = String.valueOf(defaultTableModel_Personal_Info.getValueAt(jTable_Personal_Info.getSelectedRow(), 0));
						String lastName = String.valueOf(defaultTableModel_Personal_Info.getValueAt(jTable_Personal_Info.getSelectedRow(), 1));
						String firstName = String.valueOf(defaultTableModel_Personal_Info.getValueAt(jTable_Personal_Info.getSelectedRow(), 2));
						String cellNum = String.valueOf(defaultTableModel_Personal_Info.getValueAt(jTable_Personal_Info.getSelectedRow(), 3));
						String birthDate = String.valueOf(defaultTableModel_Personal_Info.getValueAt(jTable_Personal_Info.getSelectedRow(), 4));
						String email = String.valueOf(defaultTableModel_Personal_Info.getValueAt(jTable_Personal_Info.getSelectedRow(), 5));
		
						MemberDialog memberDialog = new MemberDialog(id, lastName, firstName, cellNum, birthDate, email);
						memberDialog.jDialog.setModal(true);
						memberDialog.jDialog.setVisible(true);
					break;
					
					default:
						JOptionPane.showMessageDialog(jFrame, "Please select only one column.");
					break;
				}
			}			
		});
		
		jButton.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				if(jButton.getText().equals("Search"))
				{
				
					if( jTextField.getText().trim().length() > 0 )
					{
	
						switch( jComboBox.getSelectedIndex() )
						{
							case SEARCH_ID:
								searchMember(SEARCH_ID, jTextField.getText().trim());
							break;
	
							case SEARCH_FIRST_NAME:
								searchMember(SEARCH_FIRST_NAME, jTextField.getText().trim());
							break;
							
							case SEARCH_LAST_NAME:
								searchMember(SEARCH_LAST_NAME, jTextField.getText().trim());
							break;
							
							case SEARCH_CELL:
								searchMember(SEARCH_CELL, jTextField.getText().trim());
							break;
							
							case SEARCH_ALL:
								searchMember(SEARCH_ALL, jTextField.getText().trim());
							break;
						}
						
						jButton.setText("Search");
					}
					else
					{
						JOptionPane.showMessageDialog(jFrame, "Please enter search word!");
					}
				}
				else
				{
					System.out.println("SearchMember::addActionListener");
				}
			}			
		});
	}
	
    public void actionPerformed(ActionEvent e) {
        System.out.println("radio button clicked" + e.getActionCommand());
    }
 
    protected static ImageIcon createImageIcon(String path) 
    {
    	
        java.net.URL imgURL = CustomerCare.class.getResource(path);
        if (imgURL != null) 
        {
            return new ImageIcon(imgURL);
        } else 
        {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }
	
	public void closeDatabase()
	{
		try
		{
			if (connection != null)
			{
				connection.close();
			}
			 
			if (statement != null)
			{
				statement.close();
			}
			 
			if (resultSet != null)
			{
				resultSet.close();
			}
		}
		catch (SQLException e)
		{
			System.out.println("closeDatabase" +  e.getStackTrace());
		}
	}
	
	public String idCheck()
	{
		
		String result = null;
		
		try
		{
//			connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
// 
//			statement = connection.createStatement();
// 
//			resultSet = statement.executeQuery("SELECT * FROM cccustom WHERE CUST_ID='"+ id + "'");
//			
//			if(resultSet.next())
//			{
//				result = Integer.valueOf(resultSet.getString(1));
//			}
			
			//UPDATE CCCUSTID SET CUST_SEQ = ( SELECT IFNULL(MAX(CUST_ID),0)  +1 FROM cccustom) ; 
			
			connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);

			statement = connection.createStatement();
 
			resultSet = statement.executeQuery("SELECT IFNULL(MAX(CUST_ID),0)  +1 FROM cccustom;");
			
			if (resultSet.next())
			{
				result = resultSet.getString(1);
				System.out.println("result =" + result);
			}
		}
		catch (SQLException e)
		{
			System.out.println("IDCheck" +  e.getStackTrace());
		}
		
		finally
		{
			closeDatabase();
		}
		
		return result;
	}

	public void searchMember(int searchMode, String keyWord)
	{
//		if (case = SEARCH_ID)
//		String keyWord = String.format("%010d", Integer.parseInt(inputkeyWord));
		
		String customerID = null;
		
		try
		{
			connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
			
			statement = connection.createStatement();
 
			System.out.println("SearchMode = " + searchMode);
		
			switch (searchMode)
			{
				case SEARCH_ID:
					String keyID = String.format("%010d", Integer.parseInt(keyWord));
					resultSet = statement.executeQuery("SELECT * FROM cccustom where cccustom.CUST_ID=\"" + keyID + "\"");
//					resultAutomobileSet = statement.executeQuery("SELECT * FROM autxnprm where autxnprm.CUST_ID=\"" + keyWord + "\"");
				break;

				case SEARCH_FIRST_NAME:
					resultSet = statement.executeQuery("SELECT * FROM cccustom where cccustom.FIRST_NAME LIKE '%" + keyWord + "%'");
					
				break;
				
				case SEARCH_LAST_NAME:
					resultSet = statement.executeQuery("SELECT * FROM cccustom where cccustom.LAST_NAME LIKE '%" + keyWord + "%'");
				break;
				
				case SEARCH_CELL:
					resultSet = statement.executeQuery("SELECT * FROM cccustom where cccustom.CELL_NO LIKE '%" + keyWord + "%'");
				break;
//				
				case SEARCH_ALL:
					resultSet = statement.executeQuery("SELECT * FROM cccustom");
				break;
//				
////				case SEARCH_NONE:
////					resultSet = statement.executeQuery("SELECT * FROM MEMBER");
//					
//					jTextField.setText(null);
//					jButton.setText("∞Àªˆ");
//					jComboBox.setSelectedIndex(0);
//				break;	
			}
			
			//Customer Info
			ResultSetMetaData resultSetMetaData = resultSet.getMetaData();//Getting info from column

			Object [] tempObject = new Object[resultSetMetaData.getColumnCount()];//tempObject = data
			
			defaultTableModel_Personal_Info.setRowCount(0);
			
			while (resultSet.next())
			{
				for (int i=0; i < resultSetMetaData.getColumnCount(); i++)
				{
					tempObject[i] = resultSet.getString(i+1);
					if (i == 0) 
					{
						customerID = (String) tempObject[0];
						System.out.println(customerID);
					}
				}
				
				defaultTableModel_Personal_Info.addRow(tempObject);
			}
			
			if (defaultTableModel_Personal_Info.getRowCount() > 0)
			{
				jTable_Personal_Info.setRowSelectionInterval(0, 0);
			}
			//CustomerInfo end
			
		}
		catch (SQLException e)
		{
			System.out.println("SQLException3" +  e.getStackTrace());
		}
		
		finally
		{
			closeDatabase();
		}
		
		try
		{
			connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
			
			statement = connection.createStatement();
 
			
			System.out.println("SearchMode = " + searchMode);
		
			switch (searchMode)
			{
				case SEARCH_ID:
//					resultSet = statement.executeQuery("SELECT * FROM cccustom where cccustom.CUST_ID=\"" + keyWord + "\"");
					resultAutomobileSet = statement.executeQuery("SELECT * FROM autxnprm where autxnprm.CUST_ID = \"" + keyWord + "\"");
				break;
				
				case SEARCH_FIRST_NAME:
					resultAutomobileSet = statement.executeQuery("SELECT * From autxnprm where autxnprm.CUST_ID LIKE \"" + customerID + "\"");
				break;
				
				case SEARCH_LAST_NAME:
					resultAutomobileSet = statement.executeQuery("SELECT * FROM autxnprm where autxnprm.CUST_ID LIKE\"" + customerID + "\"");
				break;
				
				case SEARCH_CELL:
					resultAutomobileSet = statement.executeQuery("SELECT * FROM autxnprm where autxnprm.CUST_ID=\"" + customerID + "\"");
				break;
			
				case SEARCH_ALL:
					resultSet = statement.executeQuery("SELECT DISTINCT * FROM MEMBER WHERE ID LIKE '%" + keyWord + "%' OR NAME LIKE '%" + keyWord + "%' OR ADDR LIKE '%" + keyWord + "%'");
				break;
//				
//				case SEARCH_NONE:
//					resultSet = statement.executeQuery("SELECT * FROM MEMBER");
					
//					jTextField.setText(null);
//					jButton.setText("∞Àªˆ");
//					jComboBox.setSelectedIndex(0);
//				break;
				
			}

			//AutomobileInfo
			ResultSetMetaData resultAutomobileSetMetaData = resultAutomobileSet.getMetaData();

			Object [] tempAutomobileObject = new Object[resultAutomobileSetMetaData.getColumnCount()];
			
			defaultTableModel_Automobile_Info.setRowCount(0);
			
			while (resultAutomobileSet.next())
			{
				for (int i=0; i < resultAutomobileSetMetaData.getColumnCount(); i++)
				{
					tempAutomobileObject[i] = resultAutomobileSet.getString(i+1);
				}
				
				defaultTableModel_Automobile_Info.addRow(tempAutomobileObject);
			}
			
			if (defaultTableModel_Automobile_Info.getRowCount() > 0)
			{
				jTable_Automobile_Info.setRowSelectionInterval(0, 0);
			}
			//AutomobileInfo end
		}
		catch (SQLException e)
		{
			System.out.println("SQLException2" +  e.getStackTrace());
		}
		
		finally
		{
			closeDatabase();
		}
		
	}

	public boolean submitMember(int dialogMode, String tempID, String LastName, String FirstName, String cellNum, String birthDate, String email)
	{
		
		int result = 0;
		
		try
		{
			connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
 
			if (dialogMode == NEW_MODE)
			{
				System.out.println("submitMember new");

				System.out.println(tempID);
				String id = String.format("%010d", Integer.parseInt(tempID));
				System.out.println(id);
			    
				preparedStatement = connection.prepareStatement("INSERT INTO cccustom (CUST_ID, LAST_NAME, FIRST_NAME, CELL_NO, BIRTH_DATE, EMAIL)" + "VALUES ( ?, ?, ?, ?, ?, ? )");
			    
				preparedStatement.setString(1, id);
				preparedStatement.setString(2, LastName);
				preparedStatement.setString(3, FirstName);
				preparedStatement.setString(4, cellNum);
				preparedStatement.setString(5, birthDate);
				preparedStatement.setString(6, email);
//			       the mysql insert statement
				preparedStatement.execute();
			}
			else
			{
				System.out.println("submitMember new2");
				preparedStatement = connection.prepareStatement("UPDATE cccustom SET LAST_NAME=?, FIRST_NAME=?, CELL_NO=?, BIRTH_DATE=?, EMAIL=? WHERE CUST_ID=?");
				preparedStatement.setString(1, LastName);
				preparedStatement.setString(2, FirstName);
				preparedStatement.setString(3, cellNum);
				preparedStatement.setString(4, birthDate);
				preparedStatement.setString(5, email);
				preparedStatement.setString(6, tempID);

			}
				
			result = preparedStatement.executeUpdate();
		}
		catch (SQLException e)
		{
			System.out.println("submitMember" +  e.getStackTrace());
		}
		
		finally
		{
			closeDatabase();
		}
		
		System.out.println("SearchMember::submitMember");
		
		return (result > 0) ? true : false;
	}	
	
	public void searchMemberForAll()
	{
//		if (case = SEARCH_ID)
//		String keyWord = String.format("%010d", Integer.parseInt(inputkeyWord));
		
		String customerID = null;
		
		try
		{
			connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
			
			statement = connection.createStatement();
 
			System.out.println("SearchMode = " + searchMode);
		
			switch (searchMode)
			{
//				
				case SEARCH_ALL:
					resultSet = statement.executeQuery("SELECT * FROM cccustom");
				break;
//				
////				case SEARCH_NONE:
////					resultSet = statement.executeQuery("SELECT * FROM MEMBER");
//					
//					jTextField.setText(null);
//					jButton.setText("∞Àªˆ");
//					jComboBox.setSelectedIndex(0);
//				break;	
			}
			
			//Customer Info
			ResultSetMetaData resultSetMetaData = resultSet.getMetaData();//Getting info from column

			Object [] tempObject = new Object[resultSetMetaData.getColumnCount()];//tempObject = data
			
			defaultTableModel_Personal_Info.setRowCount(0);
			
			while (resultSet.next())
			{
				for (int i=0; i < resultSetMetaData.getColumnCount(); i++)
				{
					tempObject[i] = resultSet.getString(i+1);
					if (i == 0) 
					{
						customerID = (String) tempObject[0];
						System.out.println(customerID);
					}
				}
				
				defaultTableModel_Personal_Info.addRow(tempObject);
			}
			
			if (defaultTableModel_Personal_Info.getRowCount() > 0)
			{
				jTable_Personal_Info.setRowSelectionInterval(0, 0);
			}
			//CustomerInfo end
			
		}
		catch (SQLException e)
		{
			System.out.println("SQLException3" +  e.getStackTrace());
		}
		
		finally
		{
			closeDatabase();
		}
	}	
	
	public static void main(String[] args)
	{
		new CustomerCare();
	}

	class MemberDialog
	{		
		JDialog jDialog = new JDialog(jFrame, "Customer Info Input");
		JButton submitButton = new JButton("Register");
		JButton cancelButton = new JButton("Cancel");
		
		JPanel fieldNamePanel = new JPanel(new GridLayout(8,1));
		JPanel fieldValuePanel = new JPanel(new GridLayout(8,1));
		JPanel buttonPanel = new JPanel(new FlowLayout());
		JPanel idPanel = new JPanel(new BorderLayout());
		
		JLabel idLabel = new JLabel("ID");
		JLabel lastNameLabel = new JLabel("Last Name");
		JLabel firstNameLabel = new JLabel("First Name");
		JLabel cellLabel= new JLabel("Phone #");
		JLabel birthDateLabel= new JLabel("Birth Date");
		JLabel emailLabel = new JLabel("Email");
		
		JTextField idField = new JTextField(20);
		JTextField lastNameField = new JTextField(20);
		JTextField firstNameField = new JTextField(20);
		JTextField cellField = new JTextField(20);
		JTextField birthDateField = new JTextField(20);
		JTextField emailField = new JTextField(20);

		int dialogMode = NEW_MODE;

		MemberDialog()
		{
			fieldNamePanel.add(idLabel);
			fieldNamePanel.add(lastNameLabel);
			fieldNamePanel.add(firstNameLabel);
			fieldNamePanel.add(cellLabel);
			fieldNamePanel.add(birthDateLabel);
			fieldNamePanel.add(emailLabel);

			idPanel.add(idField);
			
			fieldValuePanel.add(idPanel);
			fieldValuePanel.add(lastNameField);
			fieldValuePanel.add(firstNameField);
			fieldValuePanel.add(cellField);
			fieldValuePanel.add(birthDateField);
			fieldValuePanel.add(emailField);
			
			buttonPanel.add(submitButton);
			buttonPanel.add(cancelButton);
			
			jDialog.add(fieldNamePanel, "West");
			jDialog.add(fieldValuePanel, "Center");
			jDialog.add(buttonPanel, "South");

			jDialog.setSize(350, 250);
			jDialog.setLocationRelativeTo(jFrame);
			jDialog.setResizable(false);
			jDialog.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
			
			idField.setEnabled(false);//to disable further editing of ID when creating a new profile
			idField.setText(CustomerCare.this.idCheck());
			
			submitButton.addActionListener(new ActionListener()
			{
				@Override
				public void actionPerformed(ActionEvent e)
				{

//					if(idField.getText().trim().length() == 0)
//					{
//						JOptionPane.showMessageDialog(jDialog, "Please input ID!");
//						idField.requestFocus();
//					}
//					else if(idField.getText().trim().length() > 30)
//					{
//						JOptionPane.showMessageDialog(jDialog, "ID has to be within 10 digits!");
//						idField.requestFocus();
//					}
//					else if(dialogMode == NEW_MODE && CustomerCare.this.idCheck(idField.getText()))
//					{
//						JOptionPane.showMessageDialog(jDialog, "ID already exists!");
//						
//						idField.setText(null);
//						idField.requestFocus();
//					}
					if(lastNameField.getText().trim().length() == 0 )
					{
						JOptionPane.showMessageDialog(jDialog, "Please input last name!");
						lastNameField.requestFocus();
					}
					else if(firstNameField.getText().trim().length() > 20)
					{
						JOptionPane.showMessageDialog(jDialog, "Please input first name!");
						firstNameField.requestFocus();
					}

					//No error
					else
					{
//						String id = String.format("%010d", Integer.parseInt(inputkeyWord));
						
						System.out.println ("idField.getText().trim()::" + idField.getText().trim());
						if (CustomerCare.this.submitMember(dialogMode, idField.getText().trim(), lastNameField.getText().trim(), 
														  firstNameField.getText().trim(),cellField.getText().trim(), birthDateField.getText().trim(), 
														  emailField.getText().trim()))
						{
							if (dialogMode == NEW_MODE)
							{
								JOptionPane.showMessageDialog(jDialog, "Register Completed!");
							}
							else
							{
								JOptionPane.showMessageDialog(jDialog, "Succesfully Updated!");
							}
							
							jDialog.dispose();
						}
						else
						{
							JOptionPane.showMessageDialog(jDialog, "Error in input!");							
						}	
					}
				}			
			});

			cancelButton.addActionListener(new ActionListener()
			{
				@Override
				public void actionPerformed(ActionEvent e)
				{
					jDialog.dispose();
				}			
			});
			
		}

		MemberDialog(String id, String lastName, String firstName, String cellNum ,String birthDate, String email)
		{
			this();
			
			dialogMode = EDIT_MODE;
			
			idField.setText(id);
			lastNameField.setText(lastName);
			firstNameField.setText(firstName);
			cellField.setText(cellNum);
			birthDateField.setText(birthDate);
			emailField.setText(email);

			idField.setEnabled(false);
			
			submitButton.setText("Update");
		}

		public boolean isNumber(String s)
		{
			
			try
			{
				Integer.valueOf(s);
				return true;
			}
			catch(NumberFormatException e)
			{
				return false;
			}
		}
	}
}