import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;

import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenuBar;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

public class CustomerCare
{	
	Connection connection;
	PreparedStatement preparedStatement;
	Statement statement;
	ResultSet resultSet;
	ResultSet resultAutomobileSet;
	ResultSet resultTravelSet;
	ResultSet resultHomeSet;
	ResultSet resultDetailedInfoSet;

	public Dimension jFrameX;
	public int jFrameY;
	
	public final int SEARCH_ID = 0;
	public final int SEARCH_NAME = 1;
	public final int SEARCH_CELL = 2;
	public final int SEARCH_ALL = 3;

	public final int NEW_MODE = 1;
	public final int EDIT_MODE = 2;
	
	public final int CUSTOMER_MODE = 3;
	public final int AUTOMOBILE_MODE = 0;
	public final int HOME_MODE = 1;
	public final int TRAVEL_MODE = 2;
	
	public String customerID;
	public boolean customInfo;
	public boolean autoInfo;
		
	JFrame jFrame = new JFrame("CRM");
	
	DefaultTableModel defaultTableModel_Personal_Info 
		= new DefaultTableModel(new String[] { "Customer ID", "Last Name", "First Name", "Cell Num", "Birth Date"}, 0)
	{
		@Override
		public boolean isCellEditable(int row, int column)
		{
			return false;
		}
	};
	
	DefaultTableModel defaultTableModel_Automobile_Info 
		= new DefaultTableModel(new String[] { "Customer ID", "Time Stamp", "Txn Type", "Plate No", "Doc No", "Exp Date", 
											  "New Exp Date","Proc Type", "Premium", "Text Date Time", "Call Date Time", "Visit Date Time", 
											  "Complete Date", "Company Name", "Ownership", "Memo", "Postal CD", "Addr St Num", "Addr Pv Num"}, 0)
	{
		@Override
		public boolean isCellEditable(int row, int column)
		{
			return true;
		}
	};

	DefaultTableModel defaultTableModel_House_Info 
		= new DefaultTableModel(new String[] { "Customer ID", "Time Stamp", "Exp Date", "New Exp Date", "Txn Type", "Proc Type", 
											  "Sigxp No", "Premium", "Text Date Time", "Call Date Time", "Visit Date Time", "Complete Date",
											  "Company Name", "Ownership", "Memo", "Postal CD", "Addr St Num", "Addr Pv Num"}, 0)
	{
		@Override
		public boolean isCellEditable(int row, int column)
		{
			return true;
		}
	};

	DefaultTableModel defaultTableModel_Traveler_Info 
		= new DefaultTableModel(new String[] { "Customer ID", "Time Stamp", "Eff Date", "Exp Date", "Txn Type", "Proc Type", 
											  "Premium", "Text Date Time", "Call Date Time", "Mail Date Time", "Complete Date", "Company Name", "Onwership,", "Memo"}, 0)
	{
		@Override
		public boolean isCellEditable(int row, int column)
		{
			return true;
		}
	};
	
	JLabel AutomobileInfo = new JLabel("AutoMobile = "); 
	JLabel TravelInfo = new JLabel("Travel = "); 
	JLabel HouseInfo = new JLabel("House = "); 
	
	JTextField AutoTextField = new JTextField(5);
	JTextField TravelTextField = new JTextField(5);
	JTextField HouseTextField = new JTextField(5);

	JLabel idInfo = new JLabel("ID"); 
	JLabel firstNameInfo = new JLabel("First Name"); 
	JLabel lastNameInfo = new JLabel("Last Name"); 
	JLabel phoneNumInfo = new JLabel("Phone Num"); 
	JLabel birthDateInfo = new JLabel("Birth Date");
	JLabel emailInfo = new JLabel("Email"); 
	JLabel postalCdInfo = new JLabel("Postal Cd"); 
	JLabel priCustIDInfo = new JLabel("Primary ID"); 
	JLabel memoInfo = new JLabel("Memo"); 
	JLabel addrStrtLabel= new JLabel("Address Street"); 
	JLabel addrPvLabel = new JLabel("Address Pv"); 
	
	JTextField idTextField = new JTextField(5);
	JTextField firstNameTextField = new JTextField(10);
	JTextField LastNameTextField = new JTextField(10);
	JTextField phoneNumField = new JTextField(10);
	JTextField birthDateField = new JTextField(10);
	JTextField emailField = new JTextField(10);
	JTextField postalCDField = new JTextField(10);
	JTextField priCustIDField = new JTextField(10);
	JTextField memoField = new JTextField(10);
	JTextField addrStrtField = new JTextField(10);
	JTextField addrPvField = new JTextField(10);
	
	JTabbedPane tabbedPane = new JTabbedPane();
	JTabbedPane tabbedPaneForCustomerInfo = new JTabbedPane();
	
	JTable jTable_Personal_Info = new JTable(defaultTableModel_Personal_Info);
	JTable jTable_Automobile_Info = new JTable(defaultTableModel_Automobile_Info);
	JTable jTable_House_Info = new JTable(defaultTableModel_House_Info);
	JTable jTable_Traveler_Info = new JTable(defaultTableModel_Traveler_Info);

	JScrollPane jScrollPane_Personal_Info = new JScrollPane(jTable_Personal_Info);
	JScrollPane jScrollPane_Automobile_Info = new JScrollPane(jTable_Automobile_Info);
	JScrollPane jScrollPane_House_Info = new JScrollPane(jTable_House_Info);
	JScrollPane jScrollPane_Traveler_Info = new JScrollPane(jTable_Traveler_Info);

	JComponent panel_Personal_Info = jScrollPane_Personal_Info;
	JComponent panel_Automobile_Info = jScrollPane_Automobile_Info;
	JComponent panel_House_Info = jScrollPane_House_Info;
	JComponent panel_Traveler_Info = jScrollPane_Traveler_Info;
	
	JTextField jTextField = new JTextField(20);
	
	JButton jButton = new JButton("Search");
	JButton jButtonForNewCustomer = new JButton("New");
	JButton jButtonForNewOther = new JButton("New For Other");
	
	JButton jButtonUpdateForCustomer = new JButton("Update");
	JButton jButtonUpdateForOther = new JButton("Update For Other");
		
	JMenuBar menuBar = new JMenuBar();
	
	JPanel jPanel_Search_Result = new JPanel(new FlowLayout());
	JPanel jPanel_Detailed_Search = new JPanel();
	JPanel jPanel_Family_Search = new JPanel(new BorderLayout());
	JPanel jPanel_Search = new JPanel(new FlowLayout());
	JPanel jPanel_Customer_Search = new JPanel(new BorderLayout());
	JPanel jPanel_New_Info = new JPanel(new GridLayout(0,1));
	JPanel jPanel_Update = new JPanel(new GridLayout(0, 1));
	JPanel jPanel_Other_Info = new JPanel(new FlowLayout());
	JPanel jPanel_Top_Section = new JPanel();

    JRadioButton idButton = new JRadioButton("ID");
    JRadioButton nameButton = new JRadioButton("Name");
    JRadioButton phoneNumButton = new JRadioButton("Phone Num");
    JRadioButton allButton = new JRadioButton("All");
	
	public CustomerCare()
	{
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		
		jFrame.setJMenuBar(menuBar);
		
		jTextField.addKeyListener(new KeyAdapter() {
			public void keyPressed(KeyEvent e) {
			    if (e.getKeyCode() == KeyEvent.VK_ENTER) {
					if(jTextField.getText().trim().length() > 0)
					{
						if (idButton.isSelected()) {
							searchMember(SEARCH_ID, jTextField.getText().trim());
						}
						else if (nameButton.isSelected()) {
							searchMember(SEARCH_NAME, jTextField.getText().trim());
						}
						else if (phoneNumButton.isSelected()) {
								searchMember(SEARCH_CELL, jTextField.getText().trim());
						}
						else if (allButton.isSelected()) {
							searchMember(SEARCH_ALL, jTextField.getText().trim());
						}
						
						jButton.setText("Search");
					}
					else
					{
						JOptionPane.showMessageDialog(jFrame, "Please enter search word!");
					}
			    }
			}
		});
		
		jTable_Personal_Info.getTableHeader().setReorderingAllowed(false);
		jTable_Automobile_Info.getTableHeader().setReorderingAllowed(false);
		jTable_House_Info.getTableHeader().setReorderingAllowed(false);
		jTable_Traveler_Info.getTableHeader().setReorderingAllowed(false);
		
		jTable_Personal_Info.addMouseListener(new MouseAdapter(){
		    public void mouseClicked(MouseEvent evnt) {
		        if (evnt.getClickCount() == 2) {
		            if (jTable_Personal_Info.getSelectedColumn() != -1) {
	            			customerID = (String) jTable_Personal_Info.getValueAt(jTable_Personal_Info.getSelectedRow(), 0);
			            	selectAutomobileInfo(customerID);
			            	selectHomeInfo(customerID);
			            	selectTravelInfo(customerID);
		            }
		         }
		     }
		});
		
        tabbedPaneForCustomerInfo.addTab("Customer", null, panel_Personal_Info,
                "Personal Information");
        
        tabbedPane.addTab("Automobile", null, panel_Automobile_Info,
                "Automobile Information");
        
        tabbedPane.addTab("House", null, panel_House_Info,
                "House Information");

        tabbedPane.addTab("Traveller", null, panel_Traveler_Info,
                "Traveler Information");

        Dimension nd = new Dimension(screenSize.width, screenSize.height/2);
        Dimension ndForCustomerInfo = new Dimension(screenSize.width/3, screenSize.height / 2 - 157);
        tabbedPaneForCustomerInfo.setPreferredSize(ndForCustomerInfo);
        tabbedPane.setPreferredSize(nd);
                
        Dimension ndForDetailedInfo = new Dimension(screenSize.width/3, screenSize.height / 2 - 157);
        jPanel_Detailed_Search.setPreferredSize(ndForDetailedInfo);
        
        //The following line enables to use scrolling tabs.
        tabbedPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);
        tabbedPaneForCustomerInfo.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);
                
        AutoTextField.setEditable(false);
        TravelTextField.setEditable(false);
        HouseTextField.setEditable(false);
        
        idButton.setSelected(true);
        
        //Add the tabbed pane to this panel.
        jPanel_Search_Result.add(tabbedPane);
		jPanel_Customer_Search.setLayout(new BoxLayout(jPanel_Customer_Search, BoxLayout.X_AXIS));
        jPanel_Customer_Search.add(tabbedPaneForCustomerInfo, BorderLayout.WEST);
        jPanel_Customer_Search.add(jPanel_Detailed_Search);
		        
        jPanel_Detailed_Search.setBorder(BorderFactory.createLineBorder(Color.black));
        jPanel_Detailed_Search.add(idInfo);
        jPanel_Detailed_Search.add(idTextField);
        jPanel_Detailed_Search.add(firstNameInfo);
        jPanel_Detailed_Search.add(firstNameTextField);
        jPanel_Detailed_Search.add(lastNameInfo);
        jPanel_Detailed_Search.add(LastNameTextField);
        jPanel_Detailed_Search.add(phoneNumInfo);
        jPanel_Detailed_Search.add(phoneNumField);
        jPanel_Detailed_Search.add(birthDateInfo);
        jPanel_Detailed_Search.add(birthDateField);
        jPanel_Detailed_Search.add(emailInfo);
        jPanel_Detailed_Search.add(emailField);
		jPanel_Detailed_Search.add(postalCdInfo);
		jPanel_Detailed_Search.add(postalCDField);
		jPanel_Detailed_Search.add(priCustIDInfo);
		jPanel_Detailed_Search.add(priCustIDField);
		jPanel_Detailed_Search.add(memoInfo);
		jPanel_Detailed_Search.add(memoField);
		jPanel_Detailed_Search.add(addrStrtLabel);
		jPanel_Detailed_Search.add(addrStrtField);
		jPanel_Detailed_Search.add(addrPvLabel);
		jPanel_Detailed_Search.add(addrPvField);
        		
		jPanel_Search.add(idButton);
		jPanel_Search.add(nameButton);
		jPanel_Search.add(phoneNumButton);		
		jPanel_Search.add(allButton);				
		jPanel_Search.add(jTextField);
		jPanel_Search.add(jButton);
		jPanel_Search.add(jButtonForNewCustomer);
		jPanel_Search.add(jButtonUpdateForCustomer);
		jPanel_Other_Info.add(AutomobileInfo, "West");
		jPanel_Other_Info.add(AutoTextField);
		jPanel_Other_Info.add(HouseInfo);
		jPanel_Other_Info.add(HouseTextField);
		jPanel_Other_Info.add(TravelInfo);
		jPanel_Other_Info.add(TravelTextField, "East");
		jPanel_Other_Info.add(jButtonForNewOther);
		jPanel_Other_Info.add(jButtonUpdateForOther);
						
		jPanel_Top_Section.add(jPanel_Customer_Search);
		jPanel_Top_Section.add(jPanel_Other_Info);
		
		jFrame.add(jPanel_Top_Section, "Center");
		jFrame.add(jPanel_Search_Result, "South");
		jFrame.add(jPanel_Search, "North");
		jFrame.add(jPanel_New_Info, "East");
		jFrame.add(jPanel_Update, "West");
		
		jFrame.pack();
		jFrame.setSize(screenSize.width, screenSize.height);
		jFrame.setResizable(true);
		jFrame.setVisible(true);
		jFrame.setLocationRelativeTo(null);
		jFrame.addWindowListener( new WindowAdapter() {
		    public void windowOpened( WindowEvent e ){
		        jTextField.requestFocus();
		    }
		}); 
				
		jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		Connection connection = null;
	    PreparedStatement query = null;
		
	  
	    idButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
		        idButton.setSelected(true);
		        nameButton.setSelected(false);
				phoneNumButton.setSelected(false);
				allButton.setSelected(false);
			}				
	    });
	    nameButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
		        idButton.setSelected(false);
		        nameButton.setSelected(true);
				phoneNumButton.setSelected(false);
				allButton.setSelected(false);			
			}
	    });	       
	    phoneNumButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
		        idButton.setSelected(false);
		        nameButton.setSelected(false);
				phoneNumButton.setSelected(true);
				allButton.setSelected(false);			
			}
	    });	    
	    allButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
		        idButton.setSelected(false);
		        nameButton.setSelected(false);
				phoneNumButton.setSelected(false);
				allButton.setSelected(true);			
			}
	    });
	    
		//New
		jButtonForNewCustomer.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				MemberDialog memberDialog = new MemberDialog(CUSTOMER_MODE, NEW_MODE);
			}			
		});
		
		jButtonForNewOther.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				switch(jTable_Personal_Info.getSelectedRowCount())
				{
					case 0:
						JOptionPane.showMessageDialog(jFrame, "No data to insert Automobile");
					break;
					
					case 1:
						System.out.println("tabbedPane = " + tabbedPane.getSelectedIndex());
						if (tabbedPane.getSelectedIndex() == AUTOMOBILE_MODE) {
							customerID = (String) jTable_Personal_Info.getValueAt(jTable_Personal_Info.getSelectedRow(), 0);
							MemberDialog memberDialog = new MemberDialog(AUTOMOBILE_MODE, NEW_MODE);
						}
						else if (tabbedPane.getSelectedIndex() == HOME_MODE) {
							customerID = (String) jTable_Personal_Info.getValueAt(jTable_Personal_Info.getSelectedRow(), 0);
							MemberDialog memberDialog = new MemberDialog(HOME_MODE, NEW_MODE);
						}
						else if (tabbedPane.getSelectedIndex() == TRAVEL_MODE) {
							customerID = (String) jTable_Personal_Info.getValueAt(jTable_Personal_Info.getSelectedRow(), 0);
							MemberDialog memberDialog = new MemberDialog(TRAVEL_MODE, NEW_MODE);
						}
					break;
					
					default:
						JOptionPane.showMessageDialog(jFrame, "Please select only one column.");
					break;
				}
			}			
		});
		
		//Update
		jButtonUpdateForCustomer.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				
				System.out.println("idinfo = " + idTextField.getText().trim());
				if (!idTextField.getText().trim().isEmpty()) {
					MemberDialog memberDialog = new MemberDialog(CUSTOMER_MODE, EDIT_MODE);
				}
				else if (idTextField.getText().trim().isEmpty()){
					JOptionPane.showMessageDialog(jFrame, "No data to be updated");
				}
			}			
		});
		
		//Update
		jButtonUpdateForOther.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				System.out.println("getSelectedRow = " + jTable_Automobile_Info.getSelectedRow());
				if (tabbedPane.getSelectedIndex() == 0) {
					if (jTable_Automobile_Info.getSelectedRow() != -1) {
						MemberDialog memberDialog = new MemberDialog(AUTOMOBILE_MODE, EDIT_MODE); // 두개 찍었으면, 한개만 찍어달라고 얘기하기.
					}
					else {
						JOptionPane.showMessageDialog(jFrame, "No data to be updated");
					}
				}
				else if (tabbedPane.getSelectedIndex() == 1) {
					if (jTable_House_Info.getSelectedRow() != -1) {
						MemberDialog memberDialog = new MemberDialog(HOME_MODE, EDIT_MODE); // 두개 찍었으면, 한개만 찍어달라고 얘기하기.
					}
					else {
						JOptionPane.showMessageDialog(jFrame, "No data to be updated");
					}
				}
				else if (tabbedPane.getSelectedIndex() == 2) {
					if (jTable_Traveler_Info.getSelectedRow() != -1) {
						MemberDialog memberDialog = new MemberDialog(TRAVEL_MODE, EDIT_MODE); // 두개 찍었으면, 한개만 찍어달라고 얘기하기.
					}
					else {
						JOptionPane.showMessageDialog(jFrame, "No data to be updated");
					}
				}
			}			
		});
		
		jButton.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				if(jTextField.getText().trim().length() > 0)
				{
					if (idButton.isSelected()) {
						searchMember(SEARCH_ID, jTextField.getText().trim());
					}
					else if (nameButton.isSelected()) {
						searchMember(SEARCH_NAME, jTextField.getText().trim());
					}
					else if (phoneNumButton.isSelected()) {
							searchMember(SEARCH_CELL, jTextField.getText().trim());
					}
					else if (allButton.isSelected()) {
						searchMember(SEARCH_ALL, jTextField.getText().trim());
					}
					
					jButton.setText("Search");
				}
				else
				{
					JOptionPane.showMessageDialog(jFrame, "Please enter search word!");
				}
			}
		});
	}
 	
	public void closeDatabase()
	{
		try
		{
			if (connection != null)
			{
				connection.close();
			}
			 
			if (statement != null)
			{
				statement.close();
			}
			 
			if (resultSet != null)
			{
				resultSet.close();
			}
		}
		catch (SQLException e)
		{
			System.out.println("closeDatabase" +  e.getStackTrace());
		}
	}
	
	public String idCheck()
	{
		String result = null;

		try
		{	
			connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);

			statement = connection.createStatement();
 
			resultSet = statement.executeQuery("SELECT IFNULL(MAX(CUST_ID),0)  +1 FROM cccustom;");
			
			if (resultSet.next())
			{
				result = resultSet.getString(1);
				System.out.println("result =" + result);
			}
		}
		catch (SQLException e)
		{
			System.out.println("IDCheck" +  e.getStackTrace());
		}
		
		finally
		{
			closeDatabase();
		}
		return result;
	}
	
	public String timeStampCheck()
	{
		String result = null;
		
		try
		{	
			connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);

			statement = connection.createStatement();
 
			resultSet = statement.executeQuery("SELECT DATE_FORMAT(now(),'%Y%m%d%H%i%s')");
			
			if (resultSet.next())
			{
				result = resultSet.getString(1);
				System.out.println("result = " + result);
			}
		}
		catch (SQLException e)
		{
			System.out.println("timeStampCheck" +  e.getStackTrace());
		}
		
		finally
		{
			closeDatabase();
		}
		return result;
	}
	
	public void searchMember(int searchMode, String keyWord)
	{
//		if (case = SEARCH_ID)
//		String keyWord = String.format("%010d", Integer.parseInt(inputkeyWord));
		
		String customerID = null;
		
		try
		{
			connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
			
			statement = connection.createStatement();
 
			System.out.println("SearchMode = " + searchMode);
		
			switch (searchMode)
			{
				case SEARCH_ID:
					String keyID = String.format("%010d", Integer.parseInt(keyWord));
					resultSet = statement.executeQuery("SELECT * FROM cccustom where cccustom.CUST_ID =\"" + keyID + "\"");
				break;

				case SEARCH_NAME:
					resultSet = statement.executeQuery("SELECT * FROM cccustom where cccustom.FIRST_NAME LIKE '%" + keyWord + "%' or cccustom.LAST_NAME LIKE '%" + keyWord + "%'");
				break;
				
				case SEARCH_CELL:
					resultSet = statement.executeQuery("SELECT * FROM cccustom where cccustom.CELL_NO LIKE '%" + keyWord + "%'");
				break;
		
				case SEARCH_ALL:
					resultSet = statement.executeQuery("SELECT * FROM cccustom");
				break;	
			}
			
			//Customer Info
			ResultSetMetaData resultSetMetaData = resultSet.getMetaData();//Getting info from column

			Object [] tempObject = new Object[resultSetMetaData.getColumnCount()];//tempObject = data
			
			defaultTableModel_Personal_Info.setRowCount(0);
			
			while (resultSet.next())
			{
				for (int i=0; i < resultSetMetaData.getColumnCount(); i++)
				{
					tempObject[i] = resultSet.getString(i+1);
					if (i == 0) 
					{
						customerID = (String) tempObject[0];
					}
				}
				
				defaultTableModel_Personal_Info.addRow(tempObject);
			}
			
			if (defaultTableModel_Personal_Info.getRowCount() > 0)
			{
				jTable_Personal_Info.setRowSelectionInterval(0, 0);
			}
			//CustomerInfo end
			
		}
		catch (SQLException e)
		{
			System.out.println("SQLException3" +  e.getStackTrace());
		}
		
		finally
		{
			closeDatabase();
		}
	}
	
	public void selectAutomobileInfo(String customerID) {
		try
		{								
			connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
			
			statement = connection.createStatement();
		
			resultAutomobileSet = statement.executeQuery("SELECT * FROM AUTXNPRM where AUTXNPRM.CUST_ID = \"" + customerID + "\"");
	
			//AutomobileInfo
			ResultSetMetaData resultAutomobileSetMetaData = resultAutomobileSet.getMetaData();
	
			Object [] tempAutomobileObject = new Object[resultAutomobileSetMetaData.getColumnCount()];
			
			defaultTableModel_Automobile_Info.setRowCount(0);			
			
			while (resultAutomobileSet.next())
			{
				for (int i=0; i < resultAutomobileSetMetaData.getColumnCount(); i++)
				{
					tempAutomobileObject[i] = resultAutomobileSet.getString(i+1);
					if (i == 0) 
					{
						customerID = (String)tempAutomobileObject[0];
					}
				}
				
				defaultTableModel_Automobile_Info.addRow(tempAutomobileObject);
			}
			String rs = String.valueOf(defaultTableModel_Automobile_Info.getRowCount());
			AutoTextField.setText(rs);
			
			if (defaultTableModel_Automobile_Info.getRowCount() > 0)
			{
				jTable_Automobile_Info.setRowSelectionInterval(0, 0);
			}
			//AutomobileInfo end
		}
		catch (SQLException e)
		{
			System.out.println("SQLException2" +  e.getStackTrace());
		}
		
		finally
		{
			closeDatabase();
		}
	}
	public void selectTravelInfo(String customerID) {
		try
		{								
			connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
			
			statement = connection.createStatement();
		
			resultTravelSet = statement.executeQuery("SELECT * FROM trtxnprm where trtxnprm.CUST_ID = \"" + customerID + "\"");
	
			//AutomobileInfo
			ResultSetMetaData resultTravelSetMetaData = resultTravelSet.getMetaData();
	
			Object [] tempTravelObject = new Object[resultTravelSetMetaData.getColumnCount()];
			
			defaultTableModel_Traveler_Info.setRowCount(0);			
					
			while (resultTravelSet.next())
			{
				for (int i=0; i < resultTravelSetMetaData.getColumnCount(); i++)
				{
					tempTravelObject[i] = resultTravelSet.getString(i+1);
					if (i == 0) 
					{
						customerID = (String)tempTravelObject[0];
					}
				}
				
				defaultTableModel_Traveler_Info.addRow(tempTravelObject);
			}
			String rs = String.valueOf(defaultTableModel_Traveler_Info.getRowCount());
			TravelTextField.setText(rs);
			
			if (defaultTableModel_Traveler_Info.getRowCount() > 0)
			{
				jTable_Traveler_Info.setRowSelectionInterval(0, 0);
			}
			//AutomobileInfo end
		}
		catch (SQLException e)
		{
			System.out.println("SQLException2" +  e.getStackTrace());
		}
		
		finally
		{
			closeDatabase();
		}
	}
	public void selectHomeInfo(String customerID) {
		try
		{									
			connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
			
			statement = connection.createStatement();
		
			resultHomeSet = statement.executeQuery("SELECT * FROM HOTXNPRM where HOTXNPRM.CUST_ID = \"" + customerID + "\"");
	
			//AutomobileInfo
			ResultSetMetaData resultHouseSetMetaData = resultHomeSet.getMetaData();
	
			Object [] tempHomeObject = new Object[resultHouseSetMetaData.getColumnCount()];
			
			defaultTableModel_House_Info.setRowCount(0);			
			
			while (resultHomeSet.next()) {
				for (int i=0; i < resultHouseSetMetaData.getColumnCount(); i++) {
					tempHomeObject[i] = resultHomeSet.getString(i+1);
					if (i == 0) {
						customerID = (String)tempHomeObject[0];
					}
				}
				defaultTableModel_House_Info.addRow(tempHomeObject);
			}
			String rs = String.valueOf(defaultTableModel_House_Info.getRowCount());
			HouseTextField.setText(rs);
			
			if (defaultTableModel_House_Info.getRowCount() > 0) {
				jTable_House_Info.setRowSelectionInterval(0, 0);
			}
			//AutomobileInfo end
		}
		catch (SQLException e) {
			System.out.println("SQLException2" +  e.getStackTrace());
		}
		
		finally {
			closeDatabase();
		}
	}

	public void selectDetailedInfo(String customerID) {
		try
		{									
			connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
			
			statement = connection.createStatement();
		
			resultDetailedInfoSet = statement.executeQuery("SELECT * FROM CCCUSTOM where CCCUSTOM.CUST_ID = \"" + customerID + "\"");
	
			//AutomobileInfo
			ResultSetMetaData resultDetailedSetMetaData = resultDetailedInfoSet.getMetaData();
	
			Object [] tempDetailedInfoObject = new Object[resultDetailedSetMetaData.getColumnCount()];
			
			defaultTableModel_House_Info.setRowCount(0);			
			
			while (resultHomeSet.next()) {
				for (int i=0; i < resultDetailedSetMetaData.getColumnCount(); i++) {
					tempDetailedInfoObject[i] = resultDetailedInfoSet.getString(i+1);
					if (i == 0) {
						customerID = (String)tempDetailedInfoObject[0];
					}
				}
				defaultTableModel_House_Info.addRow(tempDetailedInfoObject);
			}
			String rs = String.valueOf(defaultTableModel_House_Info.getRowCount());
			HouseTextField.setText(rs);
			
			if (defaultTableModel_House_Info.getRowCount() > 0) {
				jTable_House_Info.setRowSelectionInterval(0, 0);
			}
			//AutomobileInfo end
		}
		catch (SQLException e) {
			System.out.println("SQLException2" +  e.getStackTrace());
		}
		
		finally {
			closeDatabase();
		}
	}
	
	public boolean submitMember(int dialogMode, String tempID, String LastName, String FirstName, String cellNum, String birthDate, String email, String priCustID, String memo, String postalCd, String addrStNum, String addrPvNum)
	{
		
		int result = 0;
		
		try
		{
			connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
 
			if (dialogMode == NEW_MODE)
			{	
				String id = String.format("%010d", Integer.parseInt(tempID));
			    
				preparedStatement = connection.prepareStatement("INSERT INTO cccustom (CUST_ID, LAST_NAME, FIRST_NAME, CELL_NO, BIRTH_DATE, EMAIL, PRI_CUST_ID, MEMO, POSTAL_CD, ADDR_ST_NM, ADDR_PV_NM)" + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
			    
				preparedStatement.setString(1, id);
				preparedStatement.setString(2, LastName);
				preparedStatement.setString(3, FirstName);
				preparedStatement.setString(4, cellNum);
				preparedStatement.setString(5, birthDate);
				preparedStatement.setString(6, email);
				preparedStatement.setString(7, priCustID);
				preparedStatement.setString(8, memo);
				preparedStatement.setString(9, postalCd);
				preparedStatement.setString(10, addrStNum);
				preparedStatement.setString(11, addrPvNum);
	//			       the mysql insert statement
			}
			else if (dialogMode == EDIT_MODE)
			{
				preparedStatement = connection.prepareStatement("UPDATE cccustom SET LAST_NAME=?, FIRST_NAME=?, CELL_NO=?, BIRTH_DATE=?, EMAIL=?, PRI_CUST_ID = ?, MEMO = ?, POSTAL_CD = ?, ADDR_ST_NM = ?, ADDR_PV_NM = ? WHERE CUST_ID=?");
				preparedStatement.setString(1, LastName);
				preparedStatement.setString(2, FirstName);
				preparedStatement.setString(3, cellNum);
				preparedStatement.setString(4, birthDate);
				preparedStatement.setString(5, email);
				preparedStatement.setString(6, priCustID);
				preparedStatement.setString(7, memo);
				preparedStatement.setString(8, postalCd);
				preparedStatement.setString(9, addrStNum);
				preparedStatement.setString(10, addrPvNum);
				preparedStatement.setString(11, tempID);
			}
			result = preparedStatement.executeUpdate();
		}
		catch (SQLException e)
		{
			System.out.println("submitMember" +  e.getStackTrace());
		}
		
		finally
		{
			closeDatabase();
		}
		
		System.out.println("SearchMember::submitMember");
		
		return (result > 0) ? true : false;
	}
	
	public boolean submitMemberForAuto(int dialogMode, String tempID, String time_stamp, String txnType, String plateNo, String docNo, 
									  String expDate, String newExpDate, String procType, String premium, String textDateTime, String callDateTime, 
									  String visitDateTime, String completeDate, String companyName, String ownerShip, String memo, String postalCD, 
									  String addrStNum, String addrPvNum)
	{
		
		int result = 0;
		
		try
		{
			connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
 
			if (dialogMode == NEW_MODE)
			{
					System.out.println("submitMember new");
					
					Float premiumForAuto = Float.parseFloat(premium);
					
					preparedStatement = connection.prepareStatement("INSERT INTO AUTXNPRM (CUST_ID, TIME_STAMP, TXN_TYPE, PLATE_NO, DOC_NO, EXP_DATE, NEW_EXP_DATE, PROC_TYPE, PREMIUM, TEXT_DATE_TIME, CALL_DATE_TIME, VISIT_DATE_TIME, COMPLETE_DATE, COMPANY_NAME, OWNERSHIP, MEMO, POSTAL_CD, ADDR_ST_NM, ADDR_PV_NM)" + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"); // 19
				    
					preparedStatement.setString(1, tempID);
					preparedStatement.setString(2, time_stamp);
					preparedStatement.setString(3, txnType);
					preparedStatement.setString(4, plateNo);
					preparedStatement.setString(5, docNo);
					preparedStatement.setString(6, expDate);
					preparedStatement.setString(7, newExpDate);
					preparedStatement.setString(8, procType);
					preparedStatement.setFloat(9, premiumForAuto);
					preparedStatement.setString(10, textDateTime);
					preparedStatement.setString(11, callDateTime);
					preparedStatement.setString(12, visitDateTime);
					preparedStatement.setString(13, completeDate);
					preparedStatement.setString(14, companyName);
					preparedStatement.setString(15, ownerShip);
					preparedStatement.setString(16, memo);
					preparedStatement.setString(17, postalCD);
					preparedStatement.setString(18, addrStNum);
					preparedStatement.setString(19, addrPvNum);

	//			       the mysql insert statement
			}
			else if (dialogMode == EDIT_MODE)
			{
				
				Float premiumForAuto = Float.parseFloat(premium);
				
				System.out.println(tempID);
								
				preparedStatement = connection.prepareStatement("UPDATE AUTXNPRM SET TXN_TYPE=?, PLATE_NO = ?, DOC_NO = ?, EXP_DATE = ?, NEW_EXP_DATE = ?, PROC_TYPE = ?, PREMIUM = ?, TEXT_DATE_TIME = ?, CALL_DATE_TIME = ?, VISIT_DATE_TIME = ?, COMPLETE_DATE = ?, COMPANY_NAME = ?, OWNERSHIP = ?, MEMO = ?, POSTAL_CD = ?, ADDR_ST_NM = ?, ADDR_PV_NM = ? WHERE TIME_STAMP = ?");
				preparedStatement.setString(1, txnType);
				preparedStatement.setString(2, plateNo);
				preparedStatement.setString(3, docNo);
				preparedStatement.setString(4, expDate);
				preparedStatement.setString(5, newExpDate);
				preparedStatement.setString(6, procType);
				preparedStatement.setFloat(7, premiumForAuto);
				preparedStatement.setString(8, textDateTime);
				preparedStatement.setString(9, callDateTime);
				preparedStatement.setString(10, visitDateTime);
				preparedStatement.setString(11, completeDate);
				preparedStatement.setString(12, companyName);
				preparedStatement.setString(13, ownerShip);
				preparedStatement.setString(14, memo);
				preparedStatement.setString(15, postalCD);
				preparedStatement.setString(16, addrStNum);
				preparedStatement.setString(17, addrPvNum);
				preparedStatement.setString(18, time_stamp);
			}
				
			result = preparedStatement.executeUpdate();
		}
		catch (SQLException e)
		{
			System.out.println("submitMember" +  e.getStackTrace());
		}
		
		finally
		{
			closeDatabase();
		}
		
		return (result > 0) ? true : false;
	}
	
	public boolean submitMemberForHome(int dialogMode, String tempID, String time_stamp, String expDate,
									 String newExpDate, String txnType, String procType, String sigxpNo, String premium, 
									 String textDateTime, String callDateTime, String visitDateTime, String completeDate, String companyName, String ownerShip, 
									 String memo, String postalCd, String addrStNum, String addrPvNum)
	{

		int result = 0;

		try
		{
			connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);

			if (dialogMode == NEW_MODE)
			{
				System.out.println("submitMember new");

				System.out.println("premium = " + premium);
				
				Float premiumForAuto = Float.parseFloat(premium);

				preparedStatement = connection.prepareStatement("INSERT INTO HOTXNPRM (CUST_ID, TIME_STAMP, EXP_DATE, NEW_EXP_DATE, TXN_TYPE, PROC_TYPE, SIGXP_NO, PREMIUM, TEXT_DATE_TIME, CALL_DATE_TIME, VISIT_DATE_TIME, COMPLETE_DATE, COMPANY_NAME, OWNERSHIP, MEMO, POSTAL_CD, ADDR_ST_NM, ADDR_PV_NM)" + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"); // 18

				preparedStatement.setString(1, tempID);
				preparedStatement.setString(2, time_stamp);
				preparedStatement.setString(3, expDate);
				preparedStatement.setString(4, newExpDate);
				preparedStatement.setString(5, txnType);
				preparedStatement.setString(6, procType);
				preparedStatement.setString(7, sigxpNo);
				preparedStatement.setFloat(8, premiumForAuto);
				preparedStatement.setString(9, textDateTime);
				preparedStatement.setString(10, callDateTime);
				preparedStatement.setString(11, visitDateTime);
				preparedStatement.setString(12, completeDate);
				preparedStatement.setString(13, companyName);
				preparedStatement.setString(14, ownerShip);
				preparedStatement.setString(15, memo);
				preparedStatement.setString(16, postalCd);
				preparedStatement.setString(17, addrStNum);
				preparedStatement.setString(18, addrPvNum);

//			       the mysql insert statement
			}
			else if (dialogMode == EDIT_MODE)
			{
				System.out.println("premium = " + premium);
								
				System.out.println("submitMember new2");
				preparedStatement = connection.prepareStatement("UPDATE HOTXNPRM SET EXP_DATE=?, NEW_EXP_DATE = ?, TXN_TYPE = ?, PROC_TYPE = ?, SIGXP_NO = ?, PREMIUM = ?, TEXT_DATE_TIME = ?, CALL_DATE_TIME = ?, VISIT_DATE_TIME = ?, COMPLETE_DATE = ?, COMPANY_NAME = ?, OWNERSHIP = ?, MEMO = ?, POSTAL_CD = ?, ADDR_ST_NM = ?, ADDR_PV_NM = ? WHERE TIME_STAMP = ?");
				preparedStatement.setString(1, expDate);
				preparedStatement.setString(2, newExpDate);
				preparedStatement.setString(3, txnType);
				preparedStatement.setString(4, procType);
				preparedStatement.setString(5, sigxpNo);
				preparedStatement.setString(6, premium);
				preparedStatement.setString(7, textDateTime);
				preparedStatement.setString(8, callDateTime);
				preparedStatement.setString(9, visitDateTime);
				preparedStatement.setString(10, completeDate);
				preparedStatement.setString(11, companyName);
				preparedStatement.setString(12, ownerShip);
				preparedStatement.setString(13, memo);
				preparedStatement.setString(14, postalCd);
				preparedStatement.setString(15, addrStNum);
				preparedStatement.setString(16, addrPvNum);
				preparedStatement.setString(17, time_stamp);
			}
			result = preparedStatement.executeUpdate();
		}
		catch (SQLException e)
		{
			System.out.println("submitMember" +  e.getStackTrace());
		}

		finally
		{
			closeDatabase();
		}

		return (result > 0) ? true : false;
	}
	
	public boolean submitMemberForTravel(int dialogMode, String tempID, String time_stamp, String effDate, 
			  String expDate, String txnType, String procType, String premium, String textDateTime, String callDateTime, 
			  String mailDateTime, String completeDate, String companyName, String ownerShip, String memo)
	{
	
		int result = 0;
	
		try
		{
			connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
		
			if (dialogMode == NEW_MODE)
			{										
				preparedStatement = connection.prepareStatement("INSERT INTO TRTXNPRM (CUST_ID, TIME_STAMP, EFF_DATE, EXP_DATE, TXN_TYPE, PROC_TYPE, PREMIUM, TEXT_DATE_TIME, CALL_DATE_TIME, MAIL_DATE_TIME, COMPLETE_DATE, COMPANY_NAME, OWNERSHIP, MEMO)" + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"); // 19
				
				preparedStatement.setString(1, tempID);
				preparedStatement.setString(2, time_stamp);
				preparedStatement.setString(3, effDate);
				preparedStatement.setString(4, expDate);
				preparedStatement.setString(5, txnType);
				preparedStatement.setString(6, procType);
				preparedStatement.setString(7, premium);
				preparedStatement.setString(8, textDateTime);
				preparedStatement.setString(9, callDateTime);
				preparedStatement.setString(10, mailDateTime);
				preparedStatement.setString(11, completeDate);
				preparedStatement.setString(12, companyName);
				preparedStatement.setString(13, ownerShip);
				preparedStatement.setString(14, memo);
		
		//			       the mysql insert statement
			}
			else if (dialogMode == EDIT_MODE)
			{				
				Float premiumForAuto = Float.parseFloat(premium);

				System.out.println("submitMember new2");
				preparedStatement = connection.prepareStatement("UPDATE TRTXNPRM SET EFF_DATE = ?, EXP_DATE = ?, TXN_TYPE = ?, PROC_TYPE = ?, PREMIUM = ?, TEXT_DATE_TIME = ?, CALL_DATE_TIME = ?, MAIL_DATE_TIME = ?, COMPLETE_DATE = ?, COMPANY_NAME = ?, OWNERSHIP = ?, MEMO = ? WHERE TIME_STAMP =?");
				preparedStatement.setString(1, effDate);
				preparedStatement.setString(2, expDate);
				preparedStatement.setString(3, txnType);
				preparedStatement.setString(4, procType);
				preparedStatement.setFloat(5, premiumForAuto);
				preparedStatement.setString(6, textDateTime);
				preparedStatement.setString(7, callDateTime);
				preparedStatement.setString(8, mailDateTime);
				preparedStatement.setString(9, completeDate);
				preparedStatement.setString(10, companyName);
				preparedStatement.setString(11, ownerShip);
				preparedStatement.setString(12, memo);
				preparedStatement.setString(13, time_stamp);
			}

			result = preparedStatement.executeUpdate();
		}
		catch (SQLException e)
		{
			System.out.println("submitMember" +  e.getStackTrace());
		}
	
		finally
		{
			closeDatabase();
		}
	
		return (result > 0) ? true : false;
	
	}
	
	public static void main (String[] args) {
		new CustomerCare();
	}
	
	class MemberDialog {		
		JDialog jDialog = new JDialog(jFrame, "Customer Info Input");
		JDialog jDialogForAuto = new JDialog(jFrame, "Automobile Info Input");
		JDialog jDialogForHome = new JDialog(jFrame, "Home Info Input");
		JDialog jDialogForTravel = new JDialog(jFrame, "Travel Info Input");
		JDialog jDialogUpdate = new JDialog(jFrame, "Update");

		JButton submitButton = new JButton("Register");
		JButton cancelButton = new JButton("Cancel");
		
		JPanel fieldNamePanel = new JPanel(new GridLayout(0,1));
		JPanel fieldValuePanel = new JPanel(new GridLayout(0,1));
		JPanel buttonPanel = new JPanel(new FlowLayout());
		JPanel buttonPanelForAuto = new JPanel(new FlowLayout());
		JPanel idPanel = new JPanel(new BorderLayout());
		JPanel idPanelForAuto = new JPanel(new BorderLayout());
		JPanel timeStampPanelForAuto = new JPanel(new BorderLayout());
		JPanel premiumPanelForAuto = new JPanel(new BorderLayout());

		JLabel idLabel = new JLabel("ID");
		JLabel lastNameLabel = new JLabel("Last Name");
		JLabel firstNameLabel = new JLabel("First Name");
		JLabel cellLabel= new JLabel("Phone #");
		JLabel birthDateLabel= new JLabel("Birth Date");
		JLabel emailLabel = new JLabel("Email");
		JLabel priCustIDLabel = new JLabel("Primary CustID");
		JLabel memoLabel = new JLabel("Memo");
		JLabel postalCdLabel = new JLabel("Postal Code");
		JLabel addrStNumLabel = new JLabel("Address Strt.Num");
		JLabel addrPvNumLabel = new JLabel("Address Pv. Num");
		
		JLabel idLabelForAuto = new JLabel("ID");
		JLabel timeStampLabel = new JLabel("Time Stamp");
		JLabel txnTypeLabel = new JLabel("Txn Type");
		JLabel plateNoLabel = new JLabel("Plate Number");
		JLabel docNoLabel = new JLabel("Doc Number");
		JLabel expDatelabel = new JLabel("Expiry Date");
		JLabel newExpDatelabel = new JLabel("New Expiry Date");
		JLabel procTypeLabel = new JLabel("Proc Type");
		JLabel premiumLabel = new JLabel("Premium");
		JLabel textDateTime = new JLabel("Text Date");
		JLabel callDateTime = new JLabel("Call Date");
		JLabel visitDateTime = new JLabel("Visit Date");
		JLabel completeDateLabel = new JLabel("Complete Date");
		JLabel companyNameLabel = new JLabel("Company Name");
		JLabel onwerLabel = new JLabel("Owner");
		
		JLabel effDateLabel = new JLabel("Eff Date");
		JLabel sigxpNoLabel = new JLabel("Sigxp No");
		JLabel mailDateTimeLabel = new JLabel("Mail Date");
		JLabel crtDateTimeLabel = new JLabel("Crt Date Time");
		
		JTextField idField = new JTextField(20);
		JTextField lastNameField = new JTextField(20);
		JTextField firstNameField = new JTextField(20);
		JTextField cellField = new JTextField(20);
		JTextField birthDateField = new JTextField(20);
		JTextField emailField = new JTextField(20);
		JTextField priCustIDField = new JTextField(20);
		JTextField memoField = new JTextField(20);
		JTextField postalCdField = new JTextField(20);
		JTextField addrStrtNumField = new JTextField(20);
		JTextField addrPvNumField = new JTextField(20);

		JTextField idFieldForAuto = new JTextField(20);
		JTextField idFieldForHome = new JTextField(20);
		JTextField idFieldForTravel = new JTextField(20);		
		JTextField timeStampField = new JTextField(20);
		JTextField txnTypeField = new JTextField(20);
		JTextField plateNoField = new JTextField(20);
		JTextField docNoField = new JTextField(20);
		JTextField expDateField = new JTextField(20);
		JTextField newExpDateField = new JTextField(20);
		JTextField procTypeField = new JTextField(20);
		JTextField premiumField = new JTextField(20);
		JTextField premiumFieldForAuto = new JTextField(20);
		JTextField premiumFieldForHome = new JTextField(20);
		JTextField premiumFieldForTravel = new JTextField(20);
		JTextField textDateTimeField = new JTextField(20);
		JTextField callDateTimeField = new JTextField(20);
		JTextField visitDateTimeField = new JTextField(20);
		JTextField completeDateField = new JTextField(20);
		JTextField companyNameField = new JTextField(20);
		JTextField ownerField = new JTextField(20);
		
		JTextField effDateField = new JTextField(20);
		JTextField mailDateTimeField = new JTextField(20);
		JTextField sigxpNoField = new JTextField(20);
		JTextField crtDateTimeField = new JTextField(20);

		int dialogMode = NEW_MODE;

		MemberDialog(int newInfo, int dialogMode) {			
			
			if (dialogMode == NEW_MODE) {
				if (newInfo == CUSTOMER_MODE) {
					fieldNamePanel.add(idLabel);
					fieldNamePanel.add(lastNameLabel);
					fieldNamePanel.add(firstNameLabel);
					fieldNamePanel.add(cellLabel);
					fieldNamePanel.add(birthDateLabel);
					fieldNamePanel.add(emailLabel);
					fieldNamePanel.add(priCustIDLabel);
					fieldNamePanel.add(memoLabel);
					fieldNamePanel.add(postalCdLabel);
					fieldNamePanel.add(addrStNumLabel);
					fieldNamePanel.add(addrPvNumLabel);
	
					fieldValuePanel.add(idPanel);
					fieldValuePanel.add(lastNameField);
					fieldValuePanel.add(firstNameField);
					fieldValuePanel.add(cellField);
					fieldValuePanel.add(birthDateField);
					fieldValuePanel.add(emailField);		
					fieldValuePanel.add(priCustIDField);
					fieldValuePanel.add(memoField);
					fieldValuePanel.add(postalCdField);
					fieldValuePanel.add(addrStrtNumField);
					fieldValuePanel.add(addrPvNumField);
					
					idPanel.add(idField);
					idField.setEnabled(false);//to disable further editing of ID when creating a new profile
					idField.setText(CustomerCare.this.idCheck());
					
					buttonPanel.add(submitButton);
					buttonPanel.add(cancelButton);
	
					jDialog.add(fieldValuePanel, "Center");
					jDialog.add(fieldNamePanel, "West");
					jDialog.add(buttonPanel, "South");
					
					jDialog.setVisible(true);
					jDialog.setSize(286, 456);
					jDialog.setLocationRelativeTo(jFrame);
					jDialog.setResizable(false);
				}		
				else if (newInfo == AUTOMOBILE_MODE) {
					fieldNamePanel.add(idLabel);
					fieldNamePanel.add(timeStampLabel);
					fieldNamePanel.add(txnTypeLabel);
					fieldNamePanel.add(plateNoLabel);
					fieldNamePanel.add(docNoLabel);
					fieldNamePanel.add(expDatelabel);
					fieldNamePanel.add(newExpDatelabel);
					fieldNamePanel.add(procTypeLabel);
					fieldNamePanel.add(premiumLabel);
					fieldNamePanel.add(textDateTime);
					fieldNamePanel.add(callDateTime);
					fieldNamePanel.add(visitDateTime);
					fieldNamePanel.add(completeDateLabel);
					fieldNamePanel.add(companyNameLabel);
					fieldNamePanel.add(onwerLabel);
					fieldNamePanel.add(memoLabel);
					fieldNamePanel.add(postalCdLabel);
					fieldNamePanel.add(addrStNumLabel);
					fieldNamePanel.add(addrPvNumLabel);
					
					fieldValuePanel.add(idPanelForAuto);
					fieldValuePanel.add(timeStampPanelForAuto);
					fieldValuePanel.add(txnTypeField);
					fieldValuePanel.add(plateNoField);
					fieldValuePanel.add(docNoField);
					fieldValuePanel.add(expDateField);
					fieldValuePanel.add(newExpDateField);	
					fieldValuePanel.add(procTypeField);
					fieldValuePanel.add(premiumPanelForAuto);
					fieldValuePanel.add(textDateTimeField);
					fieldValuePanel.add(callDateTimeField);
					fieldValuePanel.add(visitDateTimeField);
					fieldValuePanel.add(completeDateField);	
					fieldValuePanel.add(companyNameField);	
					fieldValuePanel.add(ownerField);	
					fieldValuePanel.add(memoField);
					fieldValuePanel.add(postalCdField);
					fieldValuePanel.add(addrStrtNumField);
					fieldValuePanel.add(addrPvNumField);
					
					timeStampPanelForAuto.add(timeStampField);
					timeStampField.setEnabled(false);
					timeStampField.setText(CustomerCare.this.timeStampCheck());
																	
					idPanelForAuto.add(idFieldForAuto);
					idFieldForAuto.setEnabled(false);//to disable further editing of ID when creating a new profile
					idFieldForAuto.setText(customerID);
					
					premiumPanelForAuto.add(premiumFieldForAuto);
					premiumFieldForAuto.setEnabled(true);//to disable further editing of ID when creating a new profile
					premiumFieldForAuto.setText("0");
					
					buttonPanelForAuto.add(submitButton);
					buttonPanelForAuto.add(cancelButton);
					
					jDialogForAuto.add(fieldValuePanel, "Center");
					jDialogForAuto.add(fieldNamePanel, "West");
					jDialogForAuto.add(buttonPanelForAuto, "South");
	
					jDialogForAuto.pack();
					jDialogForAuto.setVisible(true);
					jDialogForAuto.setSize(301, 514);
					jDialogForAuto.setLocationRelativeTo(jFrame);
					jDialogForAuto.setResizable(false);
				}
				else if (newInfo == HOME_MODE) {
					
					fieldNamePanel.add(idLabel);
					fieldNamePanel.add(timeStampLabel);
					fieldNamePanel.add(expDatelabel);
					fieldNamePanel.add(newExpDatelabel);					
					fieldNamePanel.add(txnTypeLabel);
					fieldNamePanel.add(procTypeLabel);
					fieldNamePanel.add(sigxpNoLabel);					
					fieldNamePanel.add(premiumLabel);
					fieldNamePanel.add(textDateTime);
					fieldNamePanel.add(callDateTime);
					fieldNamePanel.add(visitDateTime);
					fieldNamePanel.add(completeDateLabel);
					fieldNamePanel.add(companyNameLabel);
					fieldNamePanel.add(onwerLabel);
					fieldNamePanel.add(memoLabel);
					fieldNamePanel.add(postalCdLabel);
					fieldNamePanel.add(addrStNumLabel);
					fieldNamePanel.add(addrPvNumLabel);

					fieldValuePanel.add(idPanelForAuto);
					fieldValuePanel.add(timeStampPanelForAuto);
					fieldValuePanel.add(expDateField);
					fieldValuePanel.add(newExpDateField);					
					fieldValuePanel.add(txnTypeField);
					fieldValuePanel.add(procTypeField);
					fieldValuePanel.add(sigxpNoField);					
					fieldValuePanel.add(premiumPanelForAuto);
					fieldValuePanel.add(textDateTimeField);
					fieldValuePanel.add(callDateTimeField);
					fieldValuePanel.add(visitDateTimeField);
					fieldValuePanel.add(completeDateField);	
					fieldValuePanel.add(companyNameField);	
					fieldValuePanel.add(ownerField);	
					fieldValuePanel.add(memoField);
					fieldValuePanel.add(postalCdField);
					fieldValuePanel.add(addrStrtNumField);
					fieldValuePanel.add(addrPvNumField);
																	
					idPanelForAuto.add(idFieldForHome);
					idFieldForHome.setEnabled(false);//to disable further editing of ID when creating a new profile
					idFieldForHome.setText(customerID);
					
					premiumPanelForAuto.add(premiumFieldForHome);
					premiumFieldForHome.setEnabled(true);//to disable further editing of ID when creating a new profile
					premiumFieldForHome.setText("0");

					timeStampPanelForAuto.add(timeStampField);
					timeStampField.setEnabled(false);
					timeStampField.setText(CustomerCare.this.timeStampCheck());
					
					buttonPanelForAuto.add(submitButton);
					buttonPanelForAuto.add(cancelButton);
					
					jDialogForHome.add(fieldValuePanel, "Center");
					jDialogForHome.add(fieldNamePanel, "West");
					jDialogForHome.add(buttonPanelForAuto, "South");
	
					jDialogForHome.pack();
					jDialogForHome.setVisible(true);
					jDialogForHome.setSize(301, 514);
					jDialogForHome.setLocationRelativeTo(jFrame);
					jDialogForHome.setResizable(false);
				}
				else if (newInfo == TRAVEL_MODE){
					fieldNamePanel.add(idLabel);
					fieldNamePanel.add(timeStampLabel);
					fieldNamePanel.add(effDateLabel);
					fieldNamePanel.add(expDatelabel);
					fieldNamePanel.add(txnTypeLabel);
					fieldNamePanel.add(procTypeLabel);
					fieldNamePanel.add(premiumLabel);
					fieldNamePanel.add(textDateTime);
					fieldNamePanel.add(callDateTime);
					fieldNamePanel.add(mailDateTimeLabel);
					fieldNamePanel.add(completeDateLabel);
					fieldNamePanel.add(companyNameLabel);
					fieldNamePanel.add(onwerLabel);
					fieldNamePanel.add(memoLabel);

					fieldValuePanel.add(idPanelForAuto);
					fieldValuePanel.add(timeStampPanelForAuto);					
					fieldValuePanel.add(effDateField);
					fieldValuePanel.add(expDateField);
					fieldValuePanel.add(txnTypeField);
					fieldValuePanel.add(procTypeField);
					fieldValuePanel.add(premiumPanelForAuto);
					fieldValuePanel.add(textDateTimeField);
					fieldValuePanel.add(callDateTimeField);
					fieldValuePanel.add(mailDateTimeField);
					fieldValuePanel.add(completeDateField);	
					fieldValuePanel.add(companyNameField);	
					fieldValuePanel.add(ownerField);	
					fieldValuePanel.add(memoField);
																	
					idPanelForAuto.add(idFieldForTravel);
					idFieldForTravel.setEnabled(false);//to disable further editing of ID when creating a new profile
					idFieldForTravel.setText(customerID);
					
					premiumPanelForAuto.add(premiumFieldForTravel);
					premiumFieldForTravel.setEnabled(true);//to disable further editing of ID when creating a new profile
					premiumFieldForTravel.setText("0");
					
					timeStampPanelForAuto.add(timeStampField);
					timeStampField.setEnabled(false);
					timeStampField.setText(CustomerCare.this.timeStampCheck());
					
					buttonPanelForAuto.add(submitButton);
					buttonPanelForAuto.add(cancelButton);
					
					jDialogForTravel.add(fieldValuePanel, "Center");
					jDialogForTravel.add(fieldNamePanel, "West");
					jDialogForTravel.add(buttonPanelForAuto, "South");
	
					jDialogForTravel.pack();
					jDialogForTravel.setVisible(true);
					jDialogForTravel.setSize(301, 514);
					jDialogForTravel.setLocationRelativeTo(jFrame);
					jDialogForTravel.setResizable(false);
				}
			}
			else if (dialogMode == EDIT_MODE) {
				if (newInfo == CUSTOMER_MODE) {
					fieldNamePanel.add(idLabel);
					fieldNamePanel.add(lastNameLabel);
					fieldNamePanel.add(firstNameLabel);
					fieldNamePanel.add(cellLabel);
					fieldNamePanel.add(birthDateLabel);
					fieldNamePanel.add(emailLabel);
					fieldNamePanel.add(priCustIDLabel);
					fieldNamePanel.add(memoLabel);
					fieldNamePanel.add(postalCdLabel);
					fieldNamePanel.add(addrStNumLabel);
					fieldNamePanel.add(addrPvNumLabel);
	
					fieldValuePanel.add(idPanel);
					fieldValuePanel.add(lastNameField);
					fieldValuePanel.add(firstNameField);
					fieldValuePanel.add(cellField);
					fieldValuePanel.add(birthDateField);
					fieldValuePanel.add(emailField);		
					fieldValuePanel.add(priCustIDField);
					fieldValuePanel.add(memoField);
					fieldValuePanel.add(postalCdField);
					fieldValuePanel.add(addrStrtNumField);
					fieldValuePanel.add(addrPvNumField);
					
					idPanel.add(idField);
					idField.setEnabled(false);//to disable further editing of ID when creating a new profile
					idField.setText(idTextField.getText().trim());
					
					lastNameField.setText(LastNameTextField.getText().trim());
					firstNameField.setText(firstNameTextField.getText().trim());
					cellField.setText(phoneNumField.getText().trim());
					birthDateField.setText(birthDateField.getText().trim());
					emailField.setText(emailField.getText().trim());	
					priCustIDField.setText(priCustIDField.getText().trim());
					memoField.setText(memoField.getText().trim());
					postalCdField.setText(postalCDField.getText().trim());
					addrStrtNumField.setText(addrStrtField.getText().trim());
					addrPvNumField.setText(addrPvField.getText().trim());	
					
					buttonPanel.add(submitButton);
					buttonPanel.add(cancelButton);
	
					jDialogUpdate.add(fieldValuePanel, "Center");
					jDialogUpdate.add(fieldNamePanel, "West");
					jDialogUpdate.add(buttonPanel, "South");
					
					jDialogUpdate.setVisible(true);
					jDialogUpdate.setSize(286, 456);
					jDialogUpdate.setLocationRelativeTo(jFrame);
					jDialogUpdate.setResizable(false);
				}
				else if (newInfo == AUTOMOBILE_MODE) {
					fieldNamePanel.add(idLabel);
					fieldNamePanel.add(timeStampLabel);
					fieldNamePanel.add(txnTypeLabel);
					fieldNamePanel.add(plateNoLabel);
					fieldNamePanel.add(docNoLabel);
					fieldNamePanel.add(expDatelabel);
					fieldNamePanel.add(newExpDatelabel);
					fieldNamePanel.add(procTypeLabel);
					fieldNamePanel.add(premiumLabel);
					fieldNamePanel.add(textDateTime);
					fieldNamePanel.add(callDateTime);
					fieldNamePanel.add(visitDateTime);
					fieldNamePanel.add(completeDateLabel);
					fieldNamePanel.add(companyNameLabel);
					fieldNamePanel.add(onwerLabel);
					fieldNamePanel.add(memoLabel);
					fieldNamePanel.add(postalCdLabel);
					fieldNamePanel.add(addrStNumLabel);
					fieldNamePanel.add(addrPvNumLabel);
					
					fieldValuePanel.add(idPanelForAuto);
					fieldValuePanel.add(timeStampField);
					fieldValuePanel.add(txnTypeField);
					fieldValuePanel.add(plateNoField);
					fieldValuePanel.add(docNoField);
					fieldValuePanel.add(expDateField);
					fieldValuePanel.add(newExpDateField);	
					fieldValuePanel.add(procTypeField);
					fieldValuePanel.add(premiumFieldForAuto);
					fieldValuePanel.add(textDateTimeField);
					fieldValuePanel.add(callDateTimeField);
					fieldValuePanel.add(visitDateTimeField);
					fieldValuePanel.add(completeDateField);	
					fieldValuePanel.add(companyNameField);	
					fieldValuePanel.add(ownerField);	
					fieldValuePanel.add(memoField);
					fieldValuePanel.add(postalCdField);
					fieldValuePanel.add(addrStrtNumField);
					fieldValuePanel.add(addrPvNumField);
					
					idPanelForAuto.add(idFieldForAuto);
					idFieldForAuto.setEnabled(false);//to disable further editing of ID when creating a new profile
					idFieldForAuto.setText(String.valueOf(defaultTableModel_Personal_Info.getValueAt(jTable_Personal_Info.getSelectedRow(), 0)));
					
					timeStampField.setText(String.valueOf(defaultTableModel_Automobile_Info.getValueAt(jTable_Automobile_Info.getSelectedRow(), 1)));
					timeStampField.setEnabled(false);//to disable further editing of ID when creating a new profile

					txnTypeField.setText(String.valueOf(defaultTableModel_Automobile_Info.getValueAt(jTable_Automobile_Info.getSelectedRow(), 2)));
					plateNoField.setText(String.valueOf(defaultTableModel_Automobile_Info.getValueAt(jTable_Automobile_Info.getSelectedRow(), 3)));
					docNoField.setText(String.valueOf(defaultTableModel_Automobile_Info.getValueAt(jTable_Automobile_Info.getSelectedRow(), 4)));
					expDateField.setText(String.valueOf(defaultTableModel_Automobile_Info.getValueAt(jTable_Automobile_Info.getSelectedRow(), 5)));
					newExpDateField.setText(String.valueOf(defaultTableModel_Automobile_Info.getValueAt(jTable_Automobile_Info.getSelectedRow(), 6)));	
					procTypeField.setText(String.valueOf(defaultTableModel_Automobile_Info.getValueAt(jTable_Automobile_Info.getSelectedRow(), 7)));
					premiumFieldForAuto.setText(String.valueOf(defaultTableModel_Automobile_Info.getValueAt(jTable_Automobile_Info.getSelectedRow(), 8)));
					textDateTimeField.setText(String.valueOf(defaultTableModel_Automobile_Info.getValueAt(jTable_Automobile_Info.getSelectedRow(), 9)));
					callDateTimeField.setText(String.valueOf(defaultTableModel_Automobile_Info.getValueAt(jTable_Automobile_Info.getSelectedRow(), 10)));
					visitDateTimeField.setText(String.valueOf(defaultTableModel_Automobile_Info.getValueAt(jTable_Automobile_Info.getSelectedRow(), 11)));	
					completeDateField.setText(String.valueOf(defaultTableModel_Automobile_Info.getValueAt(jTable_Automobile_Info.getSelectedRow(), 12)));
					companyNameField.setText(String.valueOf(defaultTableModel_Automobile_Info.getValueAt(jTable_Automobile_Info.getSelectedRow(), 13)));	
					ownerField.setText(String.valueOf(defaultTableModel_Automobile_Info.getValueAt(jTable_Automobile_Info.getSelectedRow(), 14)));
					memoField.setText(String.valueOf(defaultTableModel_Automobile_Info.getValueAt(jTable_Automobile_Info.getSelectedRow(), 15)));
					postalCdField.setText(String.valueOf(defaultTableModel_Automobile_Info.getValueAt(jTable_Automobile_Info.getSelectedRow(), 16)));
					addrStrtNumField.setText(String.valueOf(defaultTableModel_Automobile_Info.getValueAt(jTable_Automobile_Info.getSelectedRow(), 17)));
					addrPvNumField.setText(String.valueOf(defaultTableModel_Automobile_Info.getValueAt(jTable_Automobile_Info.getSelectedRow(), 18)));	
					
					buttonPanel.add(submitButton);
					buttonPanel.add(cancelButton);
	
					jDialogUpdate.add(fieldValuePanel, "Center");
					jDialogUpdate.add(fieldNamePanel, "West");
					jDialogUpdate.add(buttonPanel, "South");
					
					jDialogUpdate.setVisible(true);
					jDialogUpdate.setSize(286, 456);
					jDialogUpdate.setLocationRelativeTo(jFrame);
					jDialogUpdate.setResizable(false);
				}
				else if (newInfo == HOME_MODE) {
					
					fieldNamePanel.add(idLabel);
					fieldNamePanel.add(timeStampLabel);
					fieldNamePanel.add(expDatelabel);
					fieldNamePanel.add(newExpDatelabel);					
					fieldNamePanel.add(txnTypeLabel);
					fieldNamePanel.add(procTypeLabel);
					fieldNamePanel.add(sigxpNoLabel);					
					fieldNamePanel.add(premiumLabel);
					fieldNamePanel.add(textDateTime);
					fieldNamePanel.add(callDateTime);
					fieldNamePanel.add(visitDateTime);
					fieldNamePanel.add(completeDateLabel);
					fieldNamePanel.add(companyNameLabel);
					fieldNamePanel.add(onwerLabel);
					fieldNamePanel.add(memoLabel);
					fieldNamePanel.add(postalCdLabel);
					fieldNamePanel.add(addrStNumLabel);
					fieldNamePanel.add(addrPvNumLabel);

					fieldValuePanel.add(idPanel);
					fieldValuePanel.add(timeStampField);
					fieldValuePanel.add(expDateField);
					fieldValuePanel.add(newExpDateField);					
					fieldValuePanel.add(txnTypeField);
					fieldValuePanel.add(procTypeField);
					fieldValuePanel.add(sigxpNoField);					
					fieldValuePanel.add(premiumFieldForHome);
					fieldValuePanel.add(textDateTimeField);
					fieldValuePanel.add(callDateTimeField);
					fieldValuePanel.add(visitDateTimeField);
					fieldValuePanel.add(completeDateField);	
					fieldValuePanel.add(companyNameField);	
					fieldValuePanel.add(ownerField);	
					fieldValuePanel.add(memoField);
					fieldValuePanel.add(postalCdField);
					fieldValuePanel.add(addrStrtNumField);
					fieldValuePanel.add(addrPvNumField);						
					
					idPanel.add(idFieldForHome);
					idFieldForHome.setEnabled(false);//to disable further editing of ID when creating a new profile
					idFieldForHome.setText(String.valueOf(defaultTableModel_Personal_Info.getValueAt(jTable_Personal_Info.getSelectedRow(), 0)));
					
					timeStampField.setText(String.valueOf(defaultTableModel_House_Info.getValueAt(jTable_House_Info.getSelectedRow(), 1)));
					timeStampField.setEnabled(false);

					expDateField.setText(String.valueOf(defaultTableModel_House_Info.getValueAt(jTable_House_Info.getSelectedRow(), 2)));
					newExpDateField.setText(String.valueOf(defaultTableModel_House_Info.getValueAt(jTable_House_Info.getSelectedRow(), 3)));
					txnTypeField.setText(String.valueOf(defaultTableModel_House_Info.getValueAt(jTable_House_Info.getSelectedRow(), 4)));
					procTypeField.setText(String.valueOf(defaultTableModel_House_Info.getValueAt(jTable_House_Info.getSelectedRow(), 5)));
					sigxpNoField.setText(String.valueOf(defaultTableModel_House_Info.getValueAt(jTable_House_Info.getSelectedRow(), 6)));
					premiumFieldForHome.setText(String.valueOf(defaultTableModel_House_Info.getValueAt(jTable_House_Info.getSelectedRow(), 7)));
					textDateTimeField.setText(String.valueOf(defaultTableModel_House_Info.getValueAt(jTable_House_Info.getSelectedRow(), 8)));
					callDateTimeField.setText(String.valueOf(defaultTableModel_House_Info.getValueAt(jTable_House_Info.getSelectedRow(), 9)));	
					visitDateTimeField.setText(String.valueOf(defaultTableModel_House_Info.getValueAt(jTable_House_Info.getSelectedRow(), 10)));
					completeDateField.setText(String.valueOf(defaultTableModel_House_Info.getValueAt(jTable_House_Info.getSelectedRow(), 11)));	
					companyNameField.setText(String.valueOf(defaultTableModel_House_Info.getValueAt(jTable_House_Info.getSelectedRow(), 12)));
					ownerField.setText(String.valueOf(defaultTableModel_House_Info.getValueAt(jTable_House_Info.getSelectedRow(), 13)));
					memoField.setText(String.valueOf(defaultTableModel_House_Info.getValueAt(jTable_House_Info.getSelectedRow(), 14)));
					postalCdField.setText(String.valueOf(defaultTableModel_House_Info.getValueAt(jTable_House_Info.getSelectedRow(), 15)));
					addrStrtNumField.setText(String.valueOf(defaultTableModel_House_Info.getValueAt(jTable_House_Info.getSelectedRow(), 16)));	
					
					buttonPanel.add(submitButton);
					buttonPanel.add(cancelButton);
	
					jDialogUpdate.add(fieldValuePanel, "Center");
					jDialogUpdate.add(fieldNamePanel, "West");
					jDialogUpdate.add(buttonPanel, "South");
					
					jDialogUpdate.setVisible(true);
					jDialogUpdate.setSize(286, 456);
					jDialogUpdate.setLocationRelativeTo(jFrame);
					jDialogUpdate.setResizable(false);
				}
				else if (newInfo == TRAVEL_MODE) {
					fieldNamePanel.add(idLabel);
					fieldNamePanel.add(timeStampLabel);
					fieldNamePanel.add(effDateLabel);
					fieldNamePanel.add(expDatelabel);
					fieldNamePanel.add(txnTypeLabel);
					fieldNamePanel.add(procTypeLabel);
					fieldNamePanel.add(premiumLabel);
					fieldNamePanel.add(textDateTime);
					fieldNamePanel.add(callDateTime);
					fieldNamePanel.add(mailDateTimeLabel);
					fieldNamePanel.add(completeDateLabel);
					fieldNamePanel.add(companyNameLabel);
					fieldNamePanel.add(onwerLabel);
					fieldNamePanel.add(memoLabel);

					fieldValuePanel.add(idPanel);
					fieldValuePanel.add(timeStampField);					
					fieldValuePanel.add(effDateField);
					fieldValuePanel.add(expDateField);
					fieldValuePanel.add(txnTypeField);
					fieldValuePanel.add(procTypeField);
					fieldValuePanel.add(premiumFieldForTravel);
					fieldValuePanel.add(textDateTimeField);
					fieldValuePanel.add(callDateTimeField);
					fieldValuePanel.add(mailDateTimeField);
					fieldValuePanel.add(completeDateField);	
					fieldValuePanel.add(companyNameField);	
					fieldValuePanel.add(ownerField);	
					fieldValuePanel.add(memoField);
					
					idPanel.add(idFieldForTravel);
					idFieldForTravel.setEnabled(false);//to disable further editing of ID when creating a new profile
					idFieldForTravel.setText(String.valueOf(defaultTableModel_Personal_Info.getValueAt(jTable_Personal_Info.getSelectedRow(), 0)));
					
					timeStampField.setText(String.valueOf(defaultTableModel_Traveler_Info.getValueAt(jTable_Traveler_Info.getSelectedRow(), 1)));
					timeStampField.setEnabled(false);//to disable further editing of ID when creating a new profile

					effDateField.setText(String.valueOf(defaultTableModel_Traveler_Info.getValueAt(jTable_Traveler_Info.getSelectedRow(), 2)));
					expDateField.setText(String.valueOf(defaultTableModel_Traveler_Info.getValueAt(jTable_Traveler_Info.getSelectedRow(), 3)));
					txnTypeField.setText(String.valueOf(defaultTableModel_Traveler_Info.getValueAt(jTable_Traveler_Info.getSelectedRow(), 4)));;
					procTypeField.setText(String.valueOf(defaultTableModel_Traveler_Info.getValueAt(jTable_Traveler_Info.getSelectedRow(), 5)));	
					premiumFieldForTravel.setText(String.valueOf(defaultTableModel_Traveler_Info.getValueAt(jTable_Traveler_Info.getSelectedRow(), 6)));	
					textDateTimeField.setText(String.valueOf(defaultTableModel_Traveler_Info.getValueAt(jTable_Traveler_Info.getSelectedRow(), 7)));	
					callDateTimeField.setText(String.valueOf(defaultTableModel_Traveler_Info.getValueAt(jTable_Traveler_Info.getSelectedRow(), 8)));	
					mailDateTimeField.setText(String.valueOf(defaultTableModel_Traveler_Info.getValueAt(jTable_Traveler_Info.getSelectedRow(), 9)));	
					completeDateField.setText(String.valueOf(defaultTableModel_Traveler_Info.getValueAt(jTable_Traveler_Info.getSelectedRow(), 10)));	
					companyNameField.setText(String.valueOf(defaultTableModel_Traveler_Info.getValueAt(jTable_Traveler_Info.getSelectedRow(), 11)));	
					ownerField.setText(String.valueOf(defaultTableModel_Traveler_Info.getValueAt(jTable_Traveler_Info.getSelectedRow(), 12)));	
					memoField.setText(String.valueOf(defaultTableModel_Traveler_Info.getValueAt(jTable_Traveler_Info.getSelectedRow(), 13)));	
					
					buttonPanel.add(submitButton);
					buttonPanel.add(cancelButton);
	
					jDialogUpdate.add(fieldValuePanel, "Center");
					jDialogUpdate.add(fieldNamePanel, "West");
					jDialogUpdate.add(buttonPanel, "South");
					
					jDialogUpdate.setVisible(true);
					jDialogUpdate.setSize(286, 456);
					jDialogUpdate.setLocationRelativeTo(jFrame);
					jDialogUpdate.setResizable(false);
				}
				submitButton.setText("Update");	
			}
			
			// 301 514
			submitButton.addActionListener(new ActionListener()
			{
				@Override
				public void actionPerformed(ActionEvent e) {
					if (newInfo == CUSTOMER_MODE) {
						if (lastNameField.getText().trim().length() == 0 ) {
							JOptionPane.showMessageDialog(jDialog, "Please input last name!");
							lastNameField.requestFocus();
						}
						else if (firstNameField.getText().trim().length() == 0) {
							JOptionPane.showMessageDialog(jDialog, "Please input first name!");
							firstNameField.requestFocus();
						}
						else { // No Error							
							if (CustomerCare.this.submitMember(dialogMode, idField.getText().trim(), lastNameField.getText().trim(), 
															  firstNameField.getText().trim(), cellField.getText().trim(), birthDateField.getText().trim(), 
															  emailField.getText().trim(), priCustIDField.getText().trim(), memoField.getText().trim(), 
															  postalCdField.getText().trim(), addrStrtNumField.getText().trim(), addrPvNumField.getText().trim())) {
								if (dialogMode == NEW_MODE) {
									JOptionPane.showMessageDialog(jDialog, "Register Completed!");
								}
								else if (dialogMode == EDIT_MODE){
									JOptionPane.showMessageDialog(jDialogUpdate, "Succesfully Updated!");
									searchMember(SEARCH_ID, idField.getText().trim());
								}
								
								jDialogUpdate.dispose();
								jDialog.dispose();
							}						
						}
					// submit button을 누를때, automobile이 
					}
					else if (newInfo == AUTOMOBILE_MODE) {
						System.out.println("hello1");
						if (plateNoField.getText().trim().length() == 0 ) {
							JOptionPane.showMessageDialog(jDialog, "Please input plate number!");
							plateNoField.requestFocus();
						}
						else if (expDateField.getText().trim().length() == 0) {
							JOptionPane.showMessageDialog(jDialog, "Please input expiry date!");
							expDateField.requestFocus();
						}
						else { // No Error			
							if (CustomerCare.this.submitMemberForAuto(dialogMode, idFieldForAuto.getText().trim(), timeStampField.getText().trim(), txnTypeField.getText().trim(), 
																	 plateNoField.getText().trim(), docNoField.getText().trim(), expDateField.getText().trim(), newExpDateField.getText().trim(), 
																	 procTypeField.getText().trim(), premiumFieldForAuto.getText().trim(), textDateTimeField.getText().trim(), callDateTimeField.getText().trim(), 
																	 visitDateTimeField.getText().trim(), completeDateField.getText().trim(), companyNameField.getText().trim(), ownerField.getText().trim(), 
																	 memoField.getText().trim(), postalCdField.getText().trim(), addrStrtNumField.getText().trim(), addrPvNumField.getText().trim())) {
								if (dialogMode == NEW_MODE) {
									JOptionPane.showMessageDialog(jDialogForAuto, "Register Completed!");
								}
								else if (dialogMode == EDIT_MODE){
									JOptionPane.showMessageDialog(jDialogUpdate, "Succesfully Updated!");
									selectAutomobileInfo(idFieldForAuto.getText().trim());
								}
								
								jDialogForAuto.dispose();
								jDialogUpdate.dispose();
							}						
						}
					}
					else if (newInfo == HOME_MODE) {
						if (expDateField.getText().trim().length() == 0 ) {
							JOptionPane.showMessageDialog(jDialog, "Please input expiry date!");
							expDateField.requestFocus();
						}
						else if (txnTypeField.getText().trim().length() == 0) {
							JOptionPane.showMessageDialog(jDialog, "Please input txn type!");
							txnTypeField.requestFocus();
						}
						else { // No Error			
							System.out.println("premiumField = " + premiumField.getText().trim());
							if (CustomerCare.this.submitMemberForHome(dialogMode, idFieldForHome.getText().trim(), timeStampField.getText().trim(), expDateField.getText().trim(), newExpDateField.getText().trim(), 
																	txnTypeField.getText().trim(), procTypeField.getText().trim(), sigxpNoField.getText().trim(), premiumFieldForHome.getText().trim(), textDateTimeField.getText().trim(), 
																	callDateTimeField.getText().trim(), visitDateTimeField.getText().trim(), completeDateField.getText().trim(), companyNameField.getText().trim(), 
																	ownerField.getText().trim(), memoField.getText().trim(), postalCdField.getText().trim(), addrStrtNumField.getText().trim(), addrPvNumField.getText().trim())) {								
								if (dialogMode == NEW_MODE) {
									JOptionPane.showMessageDialog(jDialogForHome, "Register Completed!");
								}
								else {
									JOptionPane.showMessageDialog(jDialogUpdate, "Succesfully Updated!");
									selectHomeInfo(idFieldForHome.getText().trim());
								}
								
								jDialogUpdate.dispose();
								jDialogForHome.dispose();
							}						
						}
					}
					else if (newInfo == TRAVEL_MODE) {
						if (txnTypeField.getText().trim().length() == 0 ) {
							JOptionPane.showMessageDialog(jDialog, "Please input Txn Type!");
							txnTypeField.requestFocus();
						}
						else if (expDateField.getText().trim().length() == 0) {
							JOptionPane.showMessageDialog(jDialog, "Please input expiry date!");
							expDateField.requestFocus();
						}
						else { // No Error			
							System.out.println("premiumField = " + premiumField.getText().trim());
							if (CustomerCare.this.submitMemberForTravel(dialogMode, idFieldForTravel.getText().trim(), timeStampField.getText().trim(), effDateField.getText().trim(), 
																	 expDateField.getText().trim(), txnTypeField.getText().trim(), procTypeField.getText().trim(), premiumFieldForTravel.getText().trim(), textDateTimeField.getText().trim(),
																	 callDateTimeField.getText().trim(), mailDateTimeField.getText().trim(), completeDateField.getText().trim(), companyNameField.getText().trim(), ownerField.getText().trim(), 
																	 memoField.getText().trim())) {								
								if (dialogMode == NEW_MODE) {
									JOptionPane.showMessageDialog(jDialogForTravel, "Register Completed!");
								}
								else {
									JOptionPane.showMessageDialog(jDialogUpdate, "Succesfully Updated!");
								}
								jDialogUpdate.dispose();
								jDialogForTravel.dispose();
							}						
						}
					}
				}			
			});

			cancelButton.addActionListener(new ActionListener()
			{
				@Override
				public void actionPerformed(ActionEvent e)
				{
					jDialog.dispose();
					jDialogForAuto.dispose();
					jDialogUpdate.dispose();
					jDialogForTravel.dispose();
					jDialogForHome.dispose();					
				}			
			});
		}

		public boolean isNumber(String s)
		{
			
			try
			{
				Integer.valueOf(s);
				return true;
			}
			catch(NumberFormatException e)
			{
				return false;
			}
		}
	}
}