import java.awt.Canvas;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;

public abstract class CustomerSearchPanel extends JPanel implements MouseListener, MouseMotionListener {
	public static final int W = 325;
	public static final int H = 319;
	
	public static int mouseX;
	public static int mouseY;
	public static int clickedMouseX;
	public static int clickedMouseY;

	public static boolean mousePressed;
	public static boolean mouseClicked;
	public static boolean mouseExited;

	private JPanel jPanel;
	private JFrame jFrame;

	private JList itemsList;
	private DefaultListModel listData;
			
	public CustomerSearchPanel() {
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		
	    mouseX = 0;
	    mouseY = 0;
	    clickedMouseX = 0;
	    clickedMouseY = 0;
		mousePressed = false;
		mouseClicked = false;
		mouseExited = true;
		
		jFrame.setSize(screenSize.width, screenSize.height);
		jFrame.setResizable(false);
		jFrame.setVisible(true);
		jFrame.setLocationRelativeTo(null);

		jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		//---------------------------------------------------------------------
		// List
		//---------------------------------------------------------------------
		listData = new DefaultListModel();
		
		//---------------------------------------------------------------------
		// Extract shop item list from server
		//---------------------------------------------------------------------
		
//	    	try {
//		    URL url = new URL("http://" + MetalSlug.SERVER_IP_ADDRESS + ":8080/metal_slug_server/MetalSlugServer");
//		    HttpURLConnection conn = (HttpURLConnection) url.openConnection();
//		    conn.setDoOutput(true);
//		    conn.setRequestMethod("POST");
//		    conn.setRequestProperty("Content-Type", "application/json");
//		    
//		    Gson gson = new Gson();
////			    String jsonString = "{\"operation\"=\"update_msg\", \"id\"=\"" + LoginPanel.userIDText.getText() + "\", \"pwd\"=\"\"}";
//		    
//		    RequestProtocol reqProt = new RequestProtocol(RequestProtocol.OPERATION_SHOP_UPDATE_ITEMS, LoginPanel.userIDText.getText(), "", "");
//		    String jsonString = gson.toJson(reqProt);
//
//
////		    		    String jsonString = "{\"operation\"=\"signin\", \"id\"=\"" + userIDText.getText() + "\", \"pwd\"=\"" + passwordText.getText() + "\"}";
////		    		    String jsonString = "{\"operation\"=\"send_msg\", \"id\"=\"" + LoginPanel.userIDText.getText() + "\", \"pwd\"=\"\", \"msg\"=" + messageText.getText() + "\"}";
////			    String jsonString = "{\"operation\"=\"update_msgs\", \"id\"=\"" + LoginPanel.userIDText.getText() + "\", \"pwd\"=\"\"}";
//		    
//	        OutputStream os = conn.getOutputStream();
//	        os.write(jsonString.getBytes());
//	        os.flush();
//	        
////		    		    System.out.println("Client: conn.getResponseMessage() : " + conn.getResponseMessage());
//		    BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
//		    String respJsonString = "";
//			String decodedString = in.readLine();
//			while (decodedString != null) {
//				respJsonString += decodedString;
//				decodedString = in.readLine();
//			}
//			
//			ResponseProtocol respProt = gson.fromJson(respJsonString, ResponseProtocol.class);
//			if (respProt != null && respProt.result.equals("true")) {
//				System.out.println("ShopPanel::ShopPanel(): respProt.info: |" + respProt.info + "|");
//				shopItemsInfo = gson.fromJson(respProt.info, ItemsInfo.class);
//				for (int i = 0; i < shopItemsInfo.numItems; i++) {
//			        listData.addElement(shopItemsInfo.items[i].name);
//				}
//			}
//			else {
//				JOptionPane.showMessageDialog(null, respProt.info);
//			}
//			
//			conn.disconnect();
//				
//		} catch (MalformedURLException e1) {
//			e1.printStackTrace();
//			System.out.println("MalformedURLException: " + e1);
//		} catch (IOException e1) {
//			e1.printStackTrace();
//			System.out.println("IOException: " + e1);
//		}
//	    	
//		itemsList = new JList(listData);
//				
//		JScrollPane listScroller = new JScrollPane(itemsList);
//		listScroller.setBounds(10, 35, W-20, H-75);
//		jFrame.add(listScroller);
//		listScroller.setVisible(true);
//
//		itemsList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
//		itemsList.addListSelectionListener(this);
//		
//		public void valueChanged(ListSelectionEvent e) {
//			// TODO Auto-generated method stub
//			
//		}
	}
	
//	public void paint(Graphics g) {
//		g.drawImage(jFrame, 0, 1, null);
//		
//		if (MetalSlug.pickUpItemSourcePanel != MetalSlug.PANEL_ID_NONE) {
//			g.drawImage(MetalSlug.pickUpItemImage, mouseX, mouseY, null);
//		}
//	}
//	
//	public void update() {
////		System.out.println("ShopImagePanel::update(): ");
//
//		if (mouseClicked) {
//			System.out.println("ShopImagePanel::update(): clicked!!!");
//			System.out.println("clickedMouseX = " + clickedMouseX + " / clickedMouseY = " + clickedMouseY);
//			mouseClicked = false;
////			System.exit(1);
//
//			// 정확히 slot을(아이템이 안에 있든 없든) click했는지.
//			if (clickedMouseX >= ITEM_START_X && clickedMouseY >= ITEM_START_Y &&
//				((clickedMouseX - ITEM_START_X) % ITEM_START_X_GAP) <= SLOT_WIDTH &&
//				((clickedMouseY - ITEM_START_Y) % ITEM_START_Y_GAP) <= SLOT_HEIGHT) {
//				int rowClicked = (clickedMouseY - ITEM_START_Y) / ITEM_START_Y_GAP;
//				int colClicked = (clickedMouseX - ITEM_START_X) / ITEM_START_X_GAP;
//				System.out.println("rowClicked = " + rowClicked + " / colClicked = " + colClicked);
//	
//				int tempIndexSlotClicked = rowClicked * PANEL_NUM_COLS + colClicked;
//				System.out.println("tempIndexSlotClicked: " + tempIndexSlotClicked);
//
//				// 집어드는거?(정확히 들어올릴수 있는 아이템이 있는 슬롯을 click한 경우만)
//				if (MetalSlug.pickUpItemSourcePanel == MetalSlug.PANEL_ID_NONE) {
//					if (itemImages[tempIndexSlotClicked] != null) {
//				        MetalSlug.pickUpItemSourcePanel = MetalSlug.PANEL_ID_SHOP; // 아이템을 집어올린 panel
//				        MetalSlug.pickUpItemSourcePanelIndex = tempIndexSlotClicked; // 왜 필요? cancel되었을때, 다시 돌려놓아야 한다.
//				        
//				        MetalSlug.pickUpItem = shopItemsInfo.items[tempIndexSlotClicked].clone(); // 아이템을 집어올린 panel
////				        shopItemsInfo.items[tempIndexSlotClicked] = null;
//				        
//				        MetalSlug.pickUpItemImage = itemImages[tempIndexSlotClicked]; // 아이템을 집어올린 panel
////				        itemImages[tempIndexSlotClicked] = null;
//					}
//				}
////				// 내려놓을려고 하는거? 아닐수도 있고(정확히 빈 슬롯을 click한 경우만)
////				else {
////					if (itemImages[tempIndexSlotClicked] == null) {
////						// shop panel to shop panel
////						if (MetalSlug.pickUpItemSourcePanel == MetalSlug.PANEL_ID_SHOP) {
////							shopItemsInfo.items[tempIndexSlotClicked] = MetalSlug.pickUpItem;
////					        itemImages[tempIndexSlotClicked] = MetalSlug.pickUpItemImage;
////					        
////					        // reset!!
////					        MetalSlug.pickUpItemSourcePanel = MetalSlug.PANEL_ID_NONE; // reset
////					        MetalSlug.pickUpItemSourcePanelIndex = -1;
////					        MetalSlug.pickUpItem = null; 
////					        MetalSlug.pickUpItemImage = null;
////					        
////					        repaint();
////						}
////					}
////				}
//			}
//		}
//		
//		if (MetalSlug.pickUpItemSourcePanel != MetalSlug.PANEL_ID_NONE) {
//			repaint();
//		}
//	}
//	
//	//==================================================================================================== Mouse listener methods
//	//==================================================================================================== Mouse listener methods
//	//==================================================================================================== Mouse listener methods
//	// Mouse listener methods 
//	//==================================================================================================== Mouse listener methods
//	//==================================================================================================== Mouse listener methods
//	//==================================================================================================== Mouse listener methods
//
//	@Override
//	public void mouseDragged(MouseEvent e) {
////		System.out.println("ShopImagePanel::mouseDragged(): ");
////		int mouseX = e.getX();
////		int mouseY = e.getY();
////		System.out.println("mouseX = " + mouseX + " / mouseY = " + mouseY);
//	    this.setBounds(getX() - mouseX + e.getPoint().x, getY() - mouseY + e.getPoint().y, W, H);
//	    
//		MetalSlug.gamePanel.requestFocus();
//	}
//
//	@Override
//	public void mouseMoved(MouseEvent e) {
//		System.out.println("ShopImagePanel::mouseMoved(): ");
//		mouseX = e.getX();
//		mouseY = e.getY();
//		System.out.println("mouseX = " + mouseX + " / mouseY = " + mouseY);
//		
//		if (MetalSlug.pickUpItemSourcePanel != MetalSlug.PANEL_ID_NONE) {
//			System.out.println("--------------------------------------------------------------------------");
//			MetalSlug.mouseX = mouseX + getX();
//			MetalSlug.mouseY = mouseY + getY();
////			MetalSlug.repaint();
//		}
//		
//		MetalSlug.gamePanel.requestFocus();
//	}
//	
//	@Override
//	public void mouseClicked(MouseEvent e) {
////		System.out.println("ShopImagePanel::mouseClicked(): ");
//		mouseX = e.getX();
//		mouseY = e.getY();
////		System.out.println("mouseX = " + mouseX + " / mouseY = " + mouseY);
//		
//		MetalSlug.gamePanel.requestFocus();
//	}
//
//	@Override
//	public void mousePressed(MouseEvent e) {
////		System.out.println("ShopImagePanel::mousePressed(): ");
//		mouseX = e.getX();
//		mouseY = e.getY();
//		mousePressed = true;
//		clickedMouseX = e.getX();
//		clickedMouseY = e.getY();
////		mouseClicked = true;
////		System.out.println("mouseX = " + mouseX + " / mouseY = " + mouseY);
//		
//		MetalSlug.gamePanel.requestFocus();
//	}
//
//	@Override
//	public void mouseReleased(MouseEvent e) {
////		System.out.println("ShopImagePanel::mouseReleased(): ");
//		mouseX = e.getX();
//		mouseY = e.getY();
////		System.out.println("mouseX = " + mouseX + " / mouseY = " + mouseY);
////		if (clickedMouseX == mouseX && clickedMouseY == mouseY && mouseClicked) {
//		if (clickedMouseX == mouseX && clickedMouseY == mouseY && mousePressed) {
//			mouseClicked = true;
////			System.exit(1);
//		}
//		
//		MetalSlug.gamePanel.requestFocus();
//	}
//
//	@Override
//	public void mouseEntered(MouseEvent e) {
////		System.out.println("ShopImagePanel::mouseEntered(): ");
////		int mouseX = e.getX();
////		int mouseY = e.getY();
////		System.out.println("mouseX = " + mouseX + " / mouseY = " + mouseY);
//		
//		MetalSlug.gamePanel.requestFocus();
//	}
//
//	@Override
//	public void mouseExited(MouseEvent e) {
////		System.out.println("ShopImagePanel::mouseExited(): ");
////		int mouseX = e.getX();
////		int mouseY = e.getY();
////		System.out.println("mouseX = " + mouseX + " / mouseY = " + mouseY);
//		
//		MetalSlug.gamePanel.requestFocus();
//	}
//	//====================================================================================================
	public static void main(String[] args)
	{
		JFrame jframe = new JFrame();
		jframe.setSize(500, 500);
	}
}
