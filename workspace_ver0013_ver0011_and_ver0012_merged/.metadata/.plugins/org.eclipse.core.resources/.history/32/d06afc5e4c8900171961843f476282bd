import java.awt.BorderLayout;
import java.awt.Canvas;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;

import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

public class CustomerSearchPanel extends Canvas {
	
	Connection connection;
	PreparedStatement preparedStatement;
	Statement statement;
	ResultSet resultSet;
	ResultSet resultAutomobileSet;
	
	JMenu adminMenu = new JMenu("Admin");
	
	public static final int W = 325;
	public static final int H = 319;

	public static final int ITEM_START_X = 19;
	public static final int ITEM_START_Y = 15;
	public static final int ITEM_START_X_GAP = 59;
	public static final int ITEM_START_Y_GAP = 59;

	public static final int SLOT_WIDTH = 50;
	public static final int SLOT_HEIGHT = 50;

	public static final int PANEL_NUM_ROWS = 5;
	public static final int PANEL_NUM_COLS = 5;
	public static final int PANEL_MAX_NUM_ITEMS = PANEL_NUM_ROWS * PANEL_NUM_COLS;

	public final int SEARCH_ID = 0;
	public final int SEARCH_FIRST_NAME = 1;
	public final int SEARCH_LAST_NAME = 2;
	public final int SEARCH_CELL = 3;
	public final int SEARCH_ALL = 4;
	
	public final int NEW_MODE = 1;
	public final int EDIT_MODE = 2;
	
	JPanel jPanel_Customer_Search = new JPanel(new FlowLayout());
	JPanel jPanel_Customer_Search_Result = new JPanel(new FlowLayout());
	
	JFrame jFrame = new JFrame("Customer Search");
	
	public String customerID;
	
	JMenuBar menuBar = new JMenuBar();
	 
	DefaultTableModel defaultTableModel_Personal_Info 
	= new DefaultTableModel(new String[] { "Customer ID", "Last Name", "First Name", "Cell Num", "Birth Date", "E-mail"}, 0)
	{
		@Override
		public boolean isCellEditable(int row, int column)
		{
			return true;
		}
	};
	
	JTabbedPane tabbedPaneForCustomerInfo = new JTabbedPane();
	
	JTable jTable_Personal_Info = new JTable(defaultTableModel_Personal_Info);
	
	JScrollPane jScrollPane_Personal_Info = new JScrollPane(jTable_Personal_Info);

	JComponent panel_Personal_Info = jScrollPane_Personal_Info;
	
	JTextField jTextField = new JTextField(20);
		
	JButton jButton = new JButton("Search");
	
	JComboBox<String> jComboBox = new JComboBox<String>(new String[] {"ID", "First Name", "Last Name", "Cell #", "All"}); 
	
	public CustomerCare customerCare;
	
	public CustomerSearchPanel() {
		System.out.println("CustomerSearchPanel::CustomerSearchPanel()");
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		
	    setSize(W,H);	
		
	    customerCare = new CustomerCare();
	    
		adminMenu.add(new JMenuItem("New"));
		adminMenu.add(new JMenuItem("Update"));
		adminMenu.addSeparator();
		
		jTextField.addKeyListener(new KeyAdapter() {
			public void keyPressed(KeyEvent e) {
			    if (e.getKeyCode() == KeyEvent.VK_ENTER) {
	    				System.out.println("jCombo = " + SEARCH_ID);

			    		if (jComboBox.getSelectedIndex() == SEARCH_ID) {
						searchMember(SEARCH_ID, jTextField.getText().trim());
			    		}
			    		else if (jComboBox.getSelectedIndex() == SEARCH_FIRST_NAME) {
						searchMember(SEARCH_FIRST_NAME, jTextField.getText().trim());
			    		}
			    		else if (jComboBox.getSelectedIndex() == SEARCH_LAST_NAME) {
						searchMember(SEARCH_LAST_NAME, jTextField.getText().trim());
			    		}
			    		else if (jComboBox.getSelectedIndex() == SEARCH_CELL) {
						searchMember(SEARCH_CELL, jTextField.getText().trim());
			    		}
			    		else if (jComboBox.getSelectedIndex() == SEARCH_ALL) {
						searchMemberForAll();
					}
			    }
			}
		});
		
		menuBar.add(adminMenu);
		
		jFrame.setJMenuBar(menuBar);
	    
		jTable_Personal_Info.getTableHeader().setReorderingAllowed(false);

		jTable_Personal_Info.addMouseListener(new MouseAdapter(){
		    public void mouseClicked(MouseEvent evnt) {
		        if (evnt.getClickCount() == 1) {
		            if (jTable_Personal_Info.getSelectedColumn() != -1) {
		            		customerID = (String)jTable_Personal_Info.getValueAt(jTable_Personal_Info.getSelectedRow(), 0);
		            		System.out.println("customerID = " + customerCare);
		            		customerCare.insertAutoMobileInfo(customerID);
		            }
		        }
		    }
		});
		
        tabbedPaneForCustomerInfo.addTab("Customer", panel_Personal_Info);
        
        Dimension ndForCustomerInfo = new Dimension(screenSize.width/2, screenSize.height/2);
        tabbedPaneForCustomerInfo.setPreferredSize(ndForCustomerInfo);
        
        jPanel_Customer_Search_Result.add(tabbedPaneForCustomerInfo, "South");
        
        jPanel_Customer_Search.add(jComboBox, "North");
        jPanel_Customer_Search.add(jTextField,"North");
        jPanel_Customer_Search.add(jButton, "North");

        jFrame.add(jPanel_Customer_Search_Result, "South");
        jFrame.add(jPanel_Customer_Search, "North");
		
		jButton.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				if(jButton.getText().equals("Search"))
				{
					if (jTextField.getText().trim().length() > 0 || jComboBox.getSelectedIndex() == SEARCH_ALL)
					{
				    		if (jComboBox.getSelectedIndex() == SEARCH_ID) {
							searchMember(SEARCH_ID, jTextField.getText().trim());
				    		}
				    		else if (jComboBox.getSelectedIndex() == SEARCH_FIRST_NAME) {
							searchMember(SEARCH_FIRST_NAME, jTextField.getText().trim());
				    		}
				    		else if (jComboBox.getSelectedIndex() == SEARCH_LAST_NAME) {
							searchMember(SEARCH_LAST_NAME, jTextField.getText().trim());
				    		}
				    		else if (jComboBox.getSelectedIndex() == SEARCH_CELL) {
							searchMember(SEARCH_CELL, jTextField.getText().trim());
				    		}
				    		else if (jComboBox.getSelectedIndex() == SEARCH_ALL) {
							searchMemberForAll();
						}
						
						jButton.setText("Search");
					}
					else
					{
						JOptionPane.showMessageDialog(jFrame, "Please enter search word!");
					}
				}
				else
				{
					System.out.println("SearchMember::addActionListener");
				}
			}			
		});
        
        jFrame.add(jPanel_Customer_Search);
		jFrame.setSize(screenSize.width/2, screenSize.height/2);
		jFrame.setResizable(true);
		jFrame.setVisible(true);
		jFrame.setLocationRelativeTo(null);
		
		jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		//New
		adminMenu.getItem(0).addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				MemberDialog memberDialog = new MemberDialog();
				memberDialog.jDialog.setModal(true);
				memberDialog.jDialog.setVisible(true);
			}			
		});
		
		//Update
		adminMenu.getItem(1).addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				switch( jTable_Personal_Info.getSelectedRowCount() )
				{
					case 0:
						
						JOptionPane.showMessageDialog(jFrame, "No data to be updated");
					break;
					
					case 1:
						
						String id = String.valueOf(defaultTableModel_Personal_Info.getValueAt(jTable_Personal_Info.getSelectedRow(), 0));
						String lastName = String.valueOf(defaultTableModel_Personal_Info.getValueAt(jTable_Personal_Info.getSelectedRow(), 1));
						String firstName = String.valueOf(defaultTableModel_Personal_Info.getValueAt(jTable_Personal_Info.getSelectedRow(), 2));
						String cellNum = String.valueOf(defaultTableModel_Personal_Info.getValueAt(jTable_Personal_Info.getSelectedRow(), 3));
						String birthDate = String.valueOf(defaultTableModel_Personal_Info.getValueAt(jTable_Personal_Info.getSelectedRow(), 4));
						String email = String.valueOf(defaultTableModel_Personal_Info.getValueAt(jTable_Personal_Info.getSelectedRow(), 5));
		
						MemberDialog memberDialog = new MemberDialog(id, lastName, firstName, cellNum, birthDate, email);
						memberDialog.jDialog.setModal(true);
						memberDialog.jDialog.setVisible(true);
					break;
					
					default:
						JOptionPane.showMessageDialog(jFrame, "Please select only one column.");
					break;
				}
			}			
		});
	}
	

	public void searchMember(int searchMode, String keyWord)
	{
//		if (case = SEARCH_ID)
//		String keyWord = String.format("%010d", Integer.parseInt(inputkeyWord));
		
		String customerID = null;
		
		try
		{
			connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
			
			statement = connection.createStatement();
 
			System.out.println("SearchMode = " + searchMode);
		
			if (searchMode == SEARCH_ID) {
				String keyID = String.format("%010d", Integer.parseInt(keyWord));
				resultSet = statement.executeQuery("SELECT * FROM cccustom where cccustom.CUST_ID=\"" + keyID + "\"");
//					resultAutomobileSet = statement.executeQuery("SELECT * FROM autxnprm where autxnprm.CUST_ID=\"" + keyWord + "\"");
			}
			else if (searchMode == SEARCH_FIRST_NAME) {
				resultSet = statement.executeQuery("SELECT * FROM cccustom where cccustom.FIRST_NAME LIKE '%" + keyWord + "%'");
			}
			else if (searchMode == SEARCH_LAST_NAME) {
				resultSet = statement.executeQuery("SELECT * FROM cccustom where cccustom.LAST_NAME LIKE '%" + keyWord + "%'");
			}
			else if (searchMode == SEARCH_CELL) {
				resultSet = statement.executeQuery("SELECT * FROM cccustom where cccustom.CELL_NO LIKE '%" + keyWord + "%'");
			}
			else if (searchMode == SEARCH_ALL) {
				resultSet = statement.executeQuery("SELECT * FROM cccustom");
			}
			
			//Customer Info
			ResultSetMetaData resultSetMetaData = resultSet.getMetaData();//Getting info from column

			Object [] tempObject = new Object[resultSetMetaData.getColumnCount()];//tempObject = data
			
			defaultTableModel_Personal_Info.setRowCount(0);
			
			while (resultSet.next())
			{
				for (int i=0; i < resultSetMetaData.getColumnCount(); i++)
				{
					tempObject[i] = resultSet.getString(i+1);
					if (i == 0) 
					{
						customerID = (String) tempObject[0];
						System.out.println(customerID);
					}
				}
				
				defaultTableModel_Personal_Info.addRow(tempObject);
			}
			
			if (defaultTableModel_Personal_Info.getRowCount() > 0)
			{
				jTable_Personal_Info.setRowSelectionInterval(0, 0);
			}
			//CustomerInfo end
			
		}
		catch (SQLException e)
		{
			System.out.println("SQLException3" +  e.getStackTrace());
		}
		
		finally
		{
			closeDatabase();
		}	
	}
	
	public void searchMemberForAll()
	{
		
		String customerID = null;
		
		try
		{
			connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
			
			statement = connection.createStatement();
			
			resultSet = statement.executeQuery("SELECT * FROM cccustom");
			
			//Customer Info
			ResultSetMetaData resultSetMetaData = resultSet.getMetaData();//Getting info from column

			Object [] tempObject = new Object[resultSetMetaData.getColumnCount()];//tempObject = data
			
			defaultTableModel_Personal_Info.setRowCount(0);
			
			while (resultSet.next())
			{
				for (int i=0; i < resultSetMetaData.getColumnCount(); i++)
				{
					tempObject[i] = resultSet.getString(i+1);
					if (i == 0) 
					{
						customerID = (String) tempObject[0];
						System.out.println(customerID);
					}
				}
				
				defaultTableModel_Personal_Info.addRow(tempObject);
			}
			
			if (defaultTableModel_Personal_Info.getRowCount() > 0)
			{
				jTable_Personal_Info.setRowSelectionInterval(0, 0);
			}
			//CustomerInfo end
		}
		catch (SQLException e)
		{
			System.out.println("SQLException3" +  e.getStackTrace());
		}
		
		finally
		{
			closeDatabase();
		}
	}
	
	public void closeDatabase()
	{
		try
		{
			if (connection != null)
			{
				connection.close();
			}
			 
			if (statement != null)
			{
				statement.close();
			}
			 
			if (resultSet != null)
			{
				resultSet.close();
			}
		}
		catch (SQLException e)
		{
			System.out.println("closeDatabase" +  e.getStackTrace());
		}
	}
	
	class MemberDialog
	{		
		JDialog jDialog = new JDialog(jFrame, "Customer Info Input");
		JButton submitButton = new JButton("Register");
		JButton cancelButton = new JButton("Cancel");
		
		JPanel fieldNamePanel = new JPanel(new GridLayout(8,1));
		JPanel fieldValuePanel = new JPanel(new GridLayout(8,1));
		JPanel buttonPanel = new JPanel(new FlowLayout());
		JPanel idPanel = new JPanel(new BorderLayout());
		
		JLabel idLabel = new JLabel("ID");
		JLabel lastNameLabel = new JLabel("Last Name");
		JLabel firstNameLabel = new JLabel("First Name");
		JLabel cellLabel= new JLabel("Phone #");
		JLabel birthDateLabel= new JLabel("Birth Date");
		JLabel emailLabel = new JLabel("Email");
		
		JTextField idField = new JTextField(20);
		JTextField lastNameField = new JTextField(20);
		JTextField firstNameField = new JTextField(20);
		JTextField cellField = new JTextField(20);
		JTextField birthDateField = new JTextField(20);
		JTextField emailField = new JTextField(20);

		int dialogMode = NEW_MODE;

		MemberDialog()
		{
			fieldNamePanel.add(idLabel);
			fieldNamePanel.add(lastNameLabel);
			fieldNamePanel.add(firstNameLabel);
			fieldNamePanel.add(cellLabel);
			fieldNamePanel.add(birthDateLabel);
			fieldNamePanel.add(emailLabel);

			idPanel.add(idField);
			
			fieldValuePanel.add(idPanel);
			fieldValuePanel.add(lastNameField);
			fieldValuePanel.add(firstNameField);
			fieldValuePanel.add(cellField);
			fieldValuePanel.add(birthDateField);
			fieldValuePanel.add(emailField);
			
			buttonPanel.add(submitButton);
			buttonPanel.add(cancelButton);
			
			jDialog.add(fieldNamePanel, "West");
			jDialog.add(fieldValuePanel, "Center");
			jDialog.add(buttonPanel, "South");

			jDialog.setSize(350, 250);
			jDialog.setLocationRelativeTo(jFrame);
			jDialog.setResizable(false);
			jDialog.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
			
			idField.setEnabled(false);//to disable further editing of ID when creating a new profile
			idField.setText(customerCare.idCheck());
			
			submitButton.addActionListener(new ActionListener()
			{
				@Override
				public void actionPerformed(ActionEvent e)
				{

//					if(idField.getText().trim().length() == 0)
//					{
//						JOptionPane.showMessageDialog(jDialog, "Please input ID!");
//						idField.requestFocus();
//					}
//					else if(idField.getText().trim().length() > 30)
//					{
//						JOptionPane.showMessageDialog(jDialog, "ID has to be within 10 digits!");
//						idField.requestFocus();
//					}
//					else if(dialogMode == NEW_MODE && CustomerCare.this.idCheck(idField.getText()))
//					{
//						JOptionPane.showMessageDialog(jDialog, "ID already exists!");
//						
//						idField.setText(null);
//						idField.requestFocus();
//					}
					if(lastNameField.getText().trim().length() == 0 )
					{
						JOptionPane.showMessageDialog(jDialog, "Please input last name!");
						lastNameField.requestFocus();
					}
					else if(firstNameField.getText().trim().length() > 20)
					{
						JOptionPane.showMessageDialog(jDialog, "Please input first name!");
						firstNameField.requestFocus();
					}

					//No error
					else
					{
//						String id = String.format("%010d", Integer.parseInt(inputkeyWord));
						
						System.out.println ("idField.getText().trim()::" + idField.getText().trim());
						if (customerCare.submitMember(dialogMode, idField.getText().trim(), lastNameField.getText().trim(), 
														  firstNameField.getText().trim(),cellField.getText().trim(), birthDateField.getText().trim(), 
														  emailField.getText().trim()))
						{
							if (dialogMode == NEW_MODE)
							{
								JOptionPane.showMessageDialog(jDialog, "Register Completed!");
							}
							else
							{
								JOptionPane.showMessageDialog(jDialog, "Succesfully Updated!");
							}
							
							jDialog.dispose();
						}
						else
						{
							JOptionPane.showMessageDialog(jDialog, "Error in input!");							
						}	
					}
				}			
			});

			cancelButton.addActionListener(new ActionListener()
			{
				@Override
				public void actionPerformed(ActionEvent e)
				{
					jDialog.dispose();
				}			
			});
			
		}

		MemberDialog(String id, String lastName, String firstName, String cellNum ,String birthDate, String email)
		{
			this();
			
			dialogMode = EDIT_MODE;
			
			idField.setText(id);
			lastNameField.setText(lastName);
			firstNameField.setText(firstName);
			cellField.setText(cellNum);
			birthDateField.setText(birthDate);
			emailField.setText(email);

			idField.setEnabled(false);
			
			submitButton.setText("Update");
		}

		public boolean isNumber(String s)
		{
			
			try
			{
				Integer.valueOf(s);
				return true;
			}
			catch(NumberFormatException e)
			{
				return false;
			}
		}
	}
}