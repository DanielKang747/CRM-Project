import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.List;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;

import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenuBar;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

import javax.swing.SwingConstants;

public class CustomerCare
{	
	Connection connection;
	PreparedStatement preparedStatement;
	Statement statement;
	ResultSet resultSet;
	ResultSet resultAutomobileSet;
	ResultSet resultTravelSet;
	ResultSet resultHomeSet;
	ResultSet resultDetailedInfoSet;
	ResultSet resultFamilyInfoSet;
	ResultSet resultCommercialInfoSet;

	public static BufferedImage beeIcon;
	
	public Dimension jFrameX;
	public int jFrameY;
	
	public final int SEARCH_ID = 0;
	public final int SEARCH_NAME = 1;
	public final int SEARCH_CELL = 2;
	public final int SEARCH_ALL = 3;
	public final int SEARCH_IN_PROGRESS = 4;
	public final int SEARCH_IN_COMPLETE = 5;

	public final int NEW_MODE = 1;
	public final int EDIT_MODE = 2;
	public final int INSERT_MODE = 3;
	
	public final int AUTOMOBILE_MODE = 0;
	public final int HOME_MODE = 1;
	public final int TRAVEL_MODE = 2;
	public final int CUSTOMER_MODE = 3;
	public final int COMMERCIAL_MODE = 4;
	
	public String customerID;
	public String priCustID;
	public boolean customInfo;
	public boolean autoInfo;
				
	JFrame jFrame = new JFrame("Queen Bee Diary");
	
	DefaultTableModel defaultTableModel_Personal_Info 
		= new DefaultTableModel(new String[] { "Customer ID", "Last Name", "First Name", "DOB", "Exp Date", 
				"Proc Type", "Company Name",  "Text Date Time", "Call Date Time", "Visit Date Time", "Complete Date"}, 0)
	{

		@Override
		public boolean isCellEditable(int row, int column)
		{
			return false;
		}
	};
	
	DefaultTableModel defaultTableModel_Automobile_Info 
		= new DefaultTableModel(new String[] { "Customer ID", "Time Stamp", "Txn Type", "Plate #", "Doc #", "Exp Date", 
											  "New Exp Date","Proc Type", "Premium",
											  "Complete Date", "Company Name", "Ownership", "Memo"}, 0)
	{
		@Override
		public boolean isCellEditable(int row, int column)
		{
			return true;
		}
	};

	DefaultTableModel defaultTableModel_House_Info 
		= new DefaultTableModel(new String[] { "Customer ID", "Time Stamp", "Exp Date", "New Exp Date", "Txn Type", "Proc Type", 
											  "Sigxp #", "Premium", "Complete Date",
											  "Company Name", "Ownership", "Memo"}, 0)
	{
		@Override
		public boolean isCellEditable(int row, int column)
		{
			return true;
		}
	};

	DefaultTableModel defaultTableModel_Traveler_Info 
		= new DefaultTableModel(new String[] { "Customer ID", "Time Stamp", "Eff Date", "Exp Date", "Txn Type", "Proc Type", 
											  "Premium", "Complete Date", "Company Name", "Onwership", "Memo"}, 0)
	{
		@Override
		public boolean isCellEditable(int row, int column)
		{
			return true;
		}
	};
	
	DefaultTableModel defaultTableModel_Family_Info 
	= new DefaultTableModel(new String[] {"Customer ID", "Last Name", "First Name", "DOB"}, 0)
	{
		@Override
		public boolean isCellEditable(int row, int column)
		{
			return false;
		}
	};
	
	DefaultTableModel defaultTableModel_Commercial_Info 
	= new DefaultTableModel(new String[] {"Customer ID", "Time Stamp", "Exp Date", "New Exp Date", "Txn Type", "Proc Type", 
										 "Premium", "Complete Date", "Company Name", "Ownership", "Memo"}, 0)
	{
		@Override
		public boolean isCellEditable(int row, int column)
		{
			return true;
		}
	};
	
	JLabel AutomobileInfo = new JLabel("AutoMobile = "); 
	JLabel TravelInfo = new JLabel("Travel = "); 
	JLabel HouseInfo = new JLabel("House = "); 
	JLabel CommercialInfo = new JLabel("Commercial = "); 
	JLabel totalInfo = new JLabel("Total = "); 
	
	JTextField AutoTextField = new JTextField(5);
	JTextField TravelTextField = new JTextField(5);
	JTextField HouseTextField = new JTextField(5);
	JTextField CommercialTextField = new JTextField(5);
	JTextField totalTextField = new JTextField(5);
	
	JLabel idInfo = new JLabel("ID"); 
	JLabel firstNameInfo = new JLabel("First Name"); 
	JLabel lastNameInfo = new JLabel("Last Name"); 
	JLabel phoneNumInfo = new JLabel("Phone #"); 
	JLabel birthDateInfo = new JLabel("Birth Date");
	JLabel emailInfo = new JLabel("Email"); 
	JLabel postalCdInfo = new JLabel("Postal Cd");  
	JLabel memoInfo = new JLabel("Memo"); 
	JLabel addrStrtLabel= new JLabel("Address"); 
	JLabel addrPvLabel = new JLabel("City/Prov."); 
	
	JTextField idTextField = new JTextField();
	JTextField firstNameTextField = new JTextField(10);
	JTextField LastNameTextField = new JTextField(10);
	JTextField phoneNumField = new JTextField(10);
	JTextField birthDateField = new JTextField(10);
	JTextField emailField = new JTextField(10);
	JTextField postalCDTextField = new JTextField(10);
	JTextField priCustIDField = new JTextField(10);
	JTextArea memoField = new JTextArea();
	JScrollPane memoFieldArea = new JScrollPane(memoField);
	JTextField addrStrtField = new JTextField(10);
	JTextField addrPvField = new JTextField(10);
	
	JTabbedPane tabbedPane = new JTabbedPane();
	JTabbedPane tabbedPaneForCustomerInfo = new JTabbedPane();
	JTabbedPane tabbedPaneForFamilyInfo = new JTabbedPane();
	
	JTable jTable_Personal_Info = new JTable(defaultTableModel_Personal_Info);
	JTable jTable_Automobile_Info = new JTable(defaultTableModel_Automobile_Info);
	JTable jTable_House_Info = new JTable(defaultTableModel_House_Info);
	JTable jTable_Traveler_Info = new JTable(defaultTableModel_Traveler_Info);
	JTable jTable_Family_Info = new JTable(defaultTableModel_Family_Info);
	JTable jTable_Commercial_Info = new JTable(defaultTableModel_Commercial_Info);

	JScrollPane jScrollPane_Personal_Info = new JScrollPane(jTable_Personal_Info);
	JScrollPane jScrollPane_Automobile_Info = new JScrollPane(jTable_Automobile_Info);
	JScrollPane jScrollPane_House_Info = new JScrollPane(jTable_House_Info);
	JScrollPane jScrollPane_Traveler_Info = new JScrollPane(jTable_Traveler_Info);
	JScrollPane jScrollPane_Family_Info = new JScrollPane(jTable_Family_Info);
	JScrollPane jScrollPane_Commercial_Info = new JScrollPane(jTable_Commercial_Info);

	JComponent panel_Personal_Info = jScrollPane_Personal_Info;
	JComponent panel_Automobile_Info = jScrollPane_Automobile_Info;
	JComponent panel_House_Info = jScrollPane_House_Info;
	JComponent panel_Traveler_Info = jScrollPane_Traveler_Info;
	JComponent panel_Family_Info = jScrollPane_Family_Info;
	JComponent panel_Commercial_Info = jScrollPane_Commercial_Info;
	
	JTextField jTextField = new JTextField(20);
	
	JButton jButton = new JButton("Search");
	
	JButton jButtonForNewCustomer = new JButton("New");
	JButton jButtonForNewOther = new JButton("New");
	
	JButton jButtonUpdateForCustomer = new JButton("Update");
	JButton jButtonUpdateForOther = new JButton("Update");
	JButton jButtonRenewalForOther = new JButton("Renewal");
	
	JMenuBar menuBar = new JMenuBar();
	
	JPanel jPanel_Search_Result = new JPanel(new FlowLayout());
	JPanel jPanel_Detailed_Search = new JPanel();
	JPanel jPanel_Memo_Field = new JPanel();
	JPanel jPanel_Family_Search = new JPanel();
	JPanel jPanel_Search = new JPanel();
	JPanel jPanel_Search_1 = new JPanel();
	JPanel jPanel_Search_2 = new JPanel();
	JPanel jPanel_Search_3 = new JPanel();
	JPanel jPanel_Customer_Search = new JPanel();
	JPanel jPanel_New_Info = new JPanel(new GridLayout(0,1));
	JPanel jPanel_Update = new JPanel(new GridLayout(0, 1));
	JPanel jPanel_Other_Info = new JPanel();
	JPanel jPanel_Top_Section = new JPanel();
		
    JRadioButton idButton = new JRadioButton("ID");
    JRadioButton nameButton = new JRadioButton("Name");
    JRadioButton phoneNumButton = new JRadioButton("Phone Num");
    JRadioButton allButton = new JRadioButton("All");
    JRadioButton inProgressButton = new JRadioButton("In Progress");
    JRadioButton completeButton = new JRadioButton("Complete");
    
	public CustomerCare()
	{
		 
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		
		jFrame.setJMenuBar(menuBar);

		jTextField.addKeyListener(new KeyAdapter() {
			public void keyPressed(KeyEvent e) {
			    if (e.getKeyCode() == KeyEvent.VK_ENTER) {
					if(jTextField.getText().trim().length() > 0)
					{
						if (idButton.isSelected()) {
							searchMember(SEARCH_ID, jTextField.getText().trim());
						}
						else if (nameButton.isSelected()) {
							searchMember(SEARCH_NAME, jTextField.getText().trim());
						}
						else if (phoneNumButton.isSelected()) {
							searchMember(SEARCH_CELL, jTextField.getText().trim());
						}
						else if (allButton.isSelected()) {
							searchMember(SEARCH_ALL, jTextField.getText().trim());
						}
						jButton.setText("Search");
					}
					else
					{
						JOptionPane.showMessageDialog(jFrame, "Please enter search word!");
					}
			    }
			}
		});
		
		jTable_Personal_Info.getTableHeader().setReorderingAllowed(false);
		jTable_Automobile_Info.getTableHeader().setReorderingAllowed(false);
		jTable_House_Info.getTableHeader().setReorderingAllowed(false);
		jTable_Traveler_Info.getTableHeader().setReorderingAllowed(false);
		
		jTable_Personal_Info.addMouseListener(new MouseAdapter(){
		    public void mouseClicked(MouseEvent evnt) {
		        if (evnt.getClickCount() == 2) {
		            if (jTable_Personal_Info.getSelectedColumn() != -1) {
	            			customerID = (String) jTable_Personal_Info.getValueAt(jTable_Personal_Info.getSelectedRow(), 0);
			            	selectAutomobileInfo(customerID);
			            	selectHomeInfo(customerID);
			            	selectTravelInfo(customerID);
			            	selectDetailedInfo(customerID);
		    				customerID = (String) jTable_Personal_Info.getValueAt(jTable_Personal_Info.getSelectedRow(), 0);
		    				selectFamilyInfo(customerID, priCustIDField.getText().trim());
		    				selectCommercialInfo(customerID);
		            }
		         }
		     }
		});
		
		jTable_Family_Info.addMouseListener(new MouseAdapter(){
		    public void mouseClicked(MouseEvent evnt) {
		        if (evnt.getClickCount() == 2) {
		            if (jTable_Family_Info.getSelectedColumn() != -1) {
	            			customerID = (String) jTable_Family_Info.getValueAt(jTable_Family_Info.getSelectedRow(), 0);
			            	selectAutomobileInfo(customerID);
			            	selectHomeInfo(customerID);
			            	selectTravelInfo(customerID);
			            	selectDetailedInfo(customerID);
		    				selectCommercialInfo(customerID);
		            }
		         }
		     }
		});
		
        tabbedPaneForCustomerInfo.addTab("Work List", null, panel_Personal_Info,
                "Personal Information");
        
        tabbedPane.addTab("Automobile", null, panel_Automobile_Info,
                "Automobile Information");
        
        tabbedPane.addTab("House", null, panel_House_Info,
                "House Information");

        tabbedPane.addTab("Traveller", null, panel_Traveler_Info,
                "Traveler Information");
        
        tabbedPane.addTab("Commercial", null, panel_Commercial_Info,
                "Commercial Information");
        
        tabbedPaneForFamilyInfo.addTab("Family", null, panel_Family_Info);

        Dimension nd = new Dimension(screenSize.width/2 + 330, screenSize.height/2 - 100);
        Dimension ndForCustomerInfo = new Dimension(screenSize.width/3 + 40, screenSize.height / 2 - 157);
        
        tabbedPaneForCustomerInfo.setPreferredSize(ndForCustomerInfo);
        tabbedPane.setPreferredSize(nd);
                
        Dimension ndForDetailedInfo = new Dimension(screenSize.width/3 - 650, screenSize.height /2 - 157);
        jPanel_Detailed_Search.setPreferredSize(ndForDetailedInfo);
        
        Dimension ndForFamilyInfo = new Dimension(screenSize.width/3 - 126, screenSize.height / 2 - 100);
        tabbedPaneForFamilyInfo.setPreferredSize(ndForFamilyInfo);
        
        //The following line enables to use scrolling tabs.
        tabbedPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);
        tabbedPaneForCustomerInfo.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);
        tabbedPaneForFamilyInfo.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);        
        
        nameButton.setSelected(true);
        
        jPanel_Detailed_Search.setBorder(BorderFactory.createLineBorder(Color.black));
        
        Border border = jPanel_Detailed_Search.getBorder();
        Border margin = new EmptyBorder(10,10,1,10);
        jPanel_Detailed_Search.setBorder(new CompoundBorder(border, margin));
        idInfo.setBounds(60, 26, 14, 16);
        
        idInfo.setLayout(new FlowLayout(FlowLayout.LEFT));
        firstNameInfo.setBounds(6, 78, 68, 16);
        firstNameInfo.setLayout(new FlowLayout(FlowLayout.LEFT));
        lastNameInfo.setBounds(8, 52, 66, 16);
        lastNameInfo.setLayout(new FlowLayout(FlowLayout.LEFT));
        phoneNumInfo.setBounds(24, 130, 50, 16);
        phoneNumInfo.setLayout(new FlowLayout(FlowLayout.LEFT));
        birthDateInfo.setBounds(12, 106, 62, 16);
        birthDateInfo.setLayout(new FlowLayout(FlowLayout.LEFT));
        emailInfo.setBounds(40, 156, 34, 16);
        emailInfo.setLayout(new FlowLayout(FlowLayout.LEFT));
        postalCdInfo.setBounds(15, 182, 59, 16);
        postalCdInfo.setLayout(new FlowLayout(FlowLayout.LEFT));
        addrStrtLabel.setBounds(18, 210, 56, 16);
        addrStrtLabel.setLayout(new FlowLayout(FlowLayout.LEFT));
        addrPvLabel.setBounds(9, 234, 65, 16);
        addrPvLabel.setLayout(new FlowLayout(FlowLayout.LEFT));
        memoInfo.setBounds(36, 262, 38, 16);
        memoInfo.setLayout(new FlowLayout(FlowLayout.LEFT));
        
        idTextField.setLocation(86, 21);
        idTextField.setSize(new Dimension(103, 26)); 
        jPanel_Detailed_Search.setLayout(null);
//        memoField.setSize (300,600) ;  // this line silently ignored
        jPanel_Detailed_Search.add(idInfo);
        jPanel_Detailed_Search.add(idTextField);
		priCustIDField.setBounds(190, 21, 103, 26);
		jPanel_Detailed_Search.add(priCustIDField);
        jPanel_Detailed_Search.add(firstNameInfo);
        firstNameTextField.setBounds(86, 73, 207, 26);
        jPanel_Detailed_Search.add(firstNameTextField);
        jPanel_Detailed_Search.add(lastNameInfo);
        LastNameTextField.setBounds(86, 47, 207, 26);
        jPanel_Detailed_Search.add(LastNameTextField);
        jPanel_Detailed_Search.add(phoneNumInfo);
        phoneNumField.setBounds(86, 125, 117, 26);
        jPanel_Detailed_Search.add(phoneNumField);
        jPanel_Detailed_Search.add(birthDateInfo);
        birthDateField.setBounds(86, 99, 117, 26);
        jPanel_Detailed_Search.add(birthDateField);
        jPanel_Detailed_Search.add(emailInfo);
        emailField.setBounds(86, 151, 207, 26);
        jPanel_Detailed_Search.add(emailField);
		jPanel_Detailed_Search.add(postalCdInfo);
		postalCDTextField.setBounds(86, 177, 117, 26);
		jPanel_Detailed_Search.add(postalCDTextField);
		jPanel_Detailed_Search.add(addrStrtLabel);
		addrStrtField.setBounds(86, 203, 207, 26);
		jPanel_Detailed_Search.add(addrStrtField);
		jPanel_Detailed_Search.add(addrPvLabel);
		addrPvField.setBounds(86, 229, 216, 26);
		jPanel_Detailed_Search.add(addrPvField);
		jPanel_Detailed_Search.add(memoInfo);
		memoField.setLineWrap(true);
		memoField.setWrapStyleWord(true);
		memoFieldArea.setBounds(90, 255, 208, 50);
		jPanel_Detailed_Search.add(memoFieldArea);
        				
        //Add the tabbed pane to this panel.
        jPanel_Search_Result.add(tabbedPane);
        jPanel_Search_Result.add(tabbedPaneForFamilyInfo);
        jPanel_Customer_Search.setLayout(new BoxLayout(jPanel_Customer_Search, BoxLayout.X_AXIS));
        jPanel_Customer_Search.add(tabbedPaneForCustomerInfo);
        jPanel_Customer_Search.add(jPanel_Detailed_Search);

        jPanel_Other_Info.setLayout(null);
        
        totalInfo.setBounds(11, 6, 90, 16);
        totalTextField.setBounds(60, 0, 45, 29);
        totalTextField.setEditable(false);
        jPanel_Other_Info.add(totalInfo);
        jPanel_Other_Info.add(totalTextField);
        AutomobileInfo.setBounds(210, 6, 90, 16);
        AutoTextField.setBounds(301, 0, 45, 29);
        AutoTextField.setEditable(false);
        jPanel_Other_Info.add(AutomobileInfo);
        jPanel_Other_Info.add(AutoTextField);
        HouseInfo.setBounds(355, 6, 58, 16);
        HouseTextField.setBounds(415, 0, 45, 29);
        HouseTextField.setEditable(false);
        jPanel_Other_Info.add(HouseInfo);
        jPanel_Other_Info.add(HouseTextField);
        TravelInfo.setBounds(465, 6, 56, 16);
        TravelTextField.setBounds(520, 0, 45, 29);
        TravelTextField.setEditable(false);
        jPanel_Other_Info.add(TravelInfo);
        jPanel_Other_Info.add(TravelTextField);
        CommercialInfo.setBounds(570, 6, 93, 16);
        CommercialTextField.setBounds(660, 0, 45, 29);
        CommercialTextField.setEditable(false);
        jPanel_Other_Info.add(CommercialInfo);
        jPanel_Other_Info.add(CommercialTextField);
        jButtonForNewOther.setBounds(720, 0, 75, 29);
        jPanel_Other_Info.add(jButtonForNewOther);
        jButtonUpdateForOther.setBounds(790, 0, 88, 29);
        jPanel_Other_Info.add(jButtonUpdateForOther);
        jButtonRenewalForOther.setBounds(872, 0, 88, 29);
        jPanel_Other_Info.add(jButtonRenewalForOther);
        
        jButtonForNewOther.addActionListener(new ActionListener()
        {
	        	@Override
	        	public void actionPerformed(ActionEvent e)
	        	{
	        		switch(jTable_Personal_Info.getSelectedRowCount())
	        		{
	        			case 0:
	        				JOptionPane.showMessageDialog(jFrame, "No data to insert Automobile");
	        			break;
	        			
	        			case 1:
	        				System.out.println("tabbedPane = " + tabbedPane.getSelectedIndex());
	        				if (tabbedPane.getSelectedIndex() == 0) {
	        					customerID = (String) jTable_Personal_Info.getValueAt(jTable_Personal_Info.getSelectedRow(), 0);
	        					MemberDialog memberDialog = new MemberDialog(AUTOMOBILE_MODE, NEW_MODE);
	        				}
	        				else if (tabbedPane.getSelectedIndex() == 1) {
	        					customerID = (String) jTable_Personal_Info.getValueAt(jTable_Personal_Info.getSelectedRow(), 0);
	        					MemberDialog memberDialog = new MemberDialog(HOME_MODE, NEW_MODE);
	        				}
	        				else if (tabbedPane.getSelectedIndex() == 2) {
	        					customerID = (String) jTable_Personal_Info.getValueAt(jTable_Personal_Info.getSelectedRow(), 0);
	        					MemberDialog memberDialog = new MemberDialog(TRAVEL_MODE, NEW_MODE);
	        				}
	        				else if (tabbedPane.getSelectedIndex() == 3) {
	        					System.out.println("Commercial_Mode");
	        					customerID = (String) jTable_Personal_Info.getValueAt(jTable_Personal_Info.getSelectedRow(), 0);
	        					MemberDialog memberDialog = new MemberDialog(COMMERCIAL_MODE, NEW_MODE);
	        				}
	        			break;
	        			
	        			default:
	        				JOptionPane.showMessageDialog(jFrame, "Please select only one column.");
	        			break;
	        		}
	        	}			
        });
        
        //Update
        jButtonUpdateForOther.addActionListener(new ActionListener() {
	        	@Override
	        	public void actionPerformed(ActionEvent e) {
	        		System.out.println("getSelectedRow = " + jTable_Automobile_Info.getSelectedRow());
	        		if (tabbedPane.getSelectedIndex() == 0) {
	        			if (jTable_Automobile_Info.getSelectedRow() != -1) {
	        				MemberDialog memberDialog = new MemberDialog(AUTOMOBILE_MODE, EDIT_MODE); // 두개 찍었으면, 한개만 찍어달라고 얘기하기.
	        			}
	        			else {
	        				JOptionPane.showMessageDialog(jFrame, "No data to be updated");
	        			}
	        		}
	        		else if (tabbedPane.getSelectedIndex() == 1) {
	        			if (jTable_House_Info.getSelectedRow() != -1) {
	        				MemberDialog memberDialog = new MemberDialog(HOME_MODE, EDIT_MODE); // 두개 찍었으면, 한개만 찍어달라고 얘기하기.
	        			}
	        			else {
	        				JOptionPane.showMessageDialog(jFrame, "No data to be updated");
	        			}
	        		}
	        		else if (tabbedPane.getSelectedIndex() == 2) {
	        			if (jTable_Traveler_Info.getSelectedRow() != -1) {
	        				MemberDialog memberDialog = new MemberDialog(TRAVEL_MODE, EDIT_MODE); // 두개 찍었으면, 한개만 찍어달라고 얘기하기.
	        			}
	        			else {
	        				JOptionPane.showMessageDialog(jFrame, "No data to be updated");
	        			}
	        		}
	        		else if (tabbedPane.getSelectedIndex() == 3) {
	        			if (jTable_Commercial_Info.getSelectedRow() != -1) {
	        				MemberDialog memberDialog = new MemberDialog(COMMERCIAL_MODE, EDIT_MODE); // 두개 찍었으면, 한개만 찍어달라고 얘기하기.
	        			}
	        			else {
	        				JOptionPane.showMessageDialog(jFrame, "No data to be updated");
	        			}
	        		}
	        	}			
        });
		
        jButtonRenewalForOther.addActionListener(new ActionListener() {
	        	@Override
	        	public void actionPerformed(ActionEvent e) {
	        		if (tabbedPane.getSelectedIndex() == 0) {
	        			if (jTable_Automobile_Info.getSelectedRow() != -1) {
	        				MemberDialog memberDialog = new MemberDialog(AUTOMOBILE_MODE, INSERT_MODE); // 두개 찍었으면, 한개만 찍어달라고 얘기하기.
	        			}
	        			else {
	        				JOptionPane.showMessageDialog(jFrame, "No data to be updated");
	        			}
	        		}
	        		else if (tabbedPane.getSelectedIndex() == 1) {
	        			if (jTable_House_Info.getSelectedRow() != -1) {
	        				MemberDialog memberDialog = new MemberDialog(HOME_MODE, INSERT_MODE); // 두개 찍었으면, 한개만 찍어달라고 얘기하기.
	        			}
	        			else {
	        				JOptionPane.showMessageDialog(jFrame, "No data to be updated");
	        			}
	        		}
	        		else if (tabbedPane.getSelectedIndex() == 3) {
	        			if (jTable_Commercial_Info.getSelectedRow() != -1) {
	        				MemberDialog memberDialog = new MemberDialog(COMMERCIAL_MODE, INSERT_MODE); // 두개 찍었으면, 한개만 찍어달라고 얘기하기.
	        			}
	        			else {
	        				JOptionPane.showMessageDialog(jFrame, "No data to be updated");
	        			}
	        		}
	        	}			
	    });
        
        jTable_Personal_Info.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);

		idTextField.setEditable(false);
		
		jPanel_Search_1.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
//		jPanel_Search_2.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
//		jPanel_Search_3.setLayout(new FlowLayout(FlowLayout.RIGHT, 5, 5));
		
		jPanel_Search_1.add(completeButton);
		jPanel_Search_1.add(inProgressButton);
		
		jPanel_Search_2.add(allButton);
		jPanel_Search_2.add(idButton);
		jPanel_Search_2.add(phoneNumButton);
		jPanel_Search_2.add(nameButton);
		jPanel_Search_2.add(jTextField);
		jPanel_Search_2.add(jButton);
		
		jPanel_Search_3.add(jButtonForNewCustomer);
		jPanel_Search_3.add(jButtonUpdateForCustomer);
		
		jPanel_Search.setLayout(new FlowLayout(FlowLayout.LEFT, 5,5));
		
		jPanel_Search.add(jPanel_Search_1);
		jPanel_Search.add(jPanel_Search_2, new FlowLayout(FlowLayout.CENTER, 5, 5));
		jPanel_Search.add(jPanel_Search_3, new FlowLayout(FlowLayout.RIGHT, 5, 5));
		
		jPanel_Top_Section.setLayout(new BoxLayout(jPanel_Top_Section, BoxLayout.Y_AXIS));
						
		jPanel_Top_Section.add(jPanel_Customer_Search);
		jPanel_Top_Section.add(jPanel_Other_Info, "West");
		
		jFrame.getContentPane().add(jPanel_Top_Section, "Center");
		jFrame.getContentPane().add(jPanel_Search_Result, "South");
		jFrame.getContentPane().add(jPanel_Search, "North");
		jFrame.getContentPane().add(jPanel_New_Info, "East");
		jFrame.getContentPane().add(jPanel_Update, "West");
			    
		jFrame.pack();
		jFrame.setSize(screenSize.width, screenSize.height);
		jFrame.setResizable(true);
		jFrame.setVisible(true);
		jFrame.setLocationRelativeTo(null);
		jFrame.addWindowListener( new WindowAdapter() {
		    public void windowOpened( WindowEvent e ){
		        jTextField.requestFocus();
		    }
		}); 
				
		jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		Connection connection = null;
	    PreparedStatement query = null;

		completeButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				completeButton.setSelected(true);
		        idButton.setSelected(false);
		        nameButton.setSelected(false);
				phoneNumButton.setSelected(false);
				allButton.setSelected(false);	
				inProgressButton.setSelected(false);
				searchMember(SEARCH_IN_COMPLETE, jTextField.getText().trim());
			}
		});
		inProgressButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
		        idButton.setSelected(false);
		        nameButton.setSelected(false);
				phoneNumButton.setSelected(false);
				allButton.setSelected(false);	
				inProgressButton.setSelected(true);
				completeButton.setSelected(false);
				searchMember(SEARCH_IN_PROGRESS, jTextField.getText().trim());
			}
		});
		allButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
		        idButton.setSelected(false);
		        nameButton.setSelected(false);
				phoneNumButton.setSelected(false);
				allButton.setSelected(true);	
				inProgressButton.setSelected(false);
				completeButton.setSelected(false);
				jTextField.requestFocus();
			}
		});
		nameButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
		        idButton.setSelected(false);
		        nameButton.setSelected(true);
				phoneNumButton.setSelected(false);
				allButton.setSelected(false);
				inProgressButton.setSelected(false);
				completeButton.setSelected(false);
				jTextField.requestFocus();
			}
		});	   
	    
	    idButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
		        idButton.setSelected(true);
		        nameButton.setSelected(false);
				phoneNumButton.setSelected(false);
				allButton.setSelected(false);
				inProgressButton.setSelected(false);
				completeButton.setSelected(false);
				jTextField.requestFocus();
			}				
	    });
	    phoneNumButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
		        idButton.setSelected(false);
		        nameButton.setSelected(false);
				phoneNumButton.setSelected(true);
				allButton.setSelected(false);	
				inProgressButton.setSelected(false);
				completeButton.setSelected(false);
				jTextField.requestFocus();
			}
	    });	    
	    
		//New
		jButtonForNewCustomer.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				MemberDialog memberDialog = new MemberDialog(CUSTOMER_MODE, NEW_MODE);
			}			
		});
		
		//Update
		jButtonUpdateForCustomer.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				System.out.println("idinfo = " + idTextField.getText().trim());
				MemberDialog memberDialog = new MemberDialog(CUSTOMER_MODE, EDIT_MODE);
			}			
		});
		
		jButton.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				if(jTextField.getText().trim().length() > 0)
				{
					if (idButton.isSelected()) {
						searchMember(SEARCH_ID, jTextField.getText().trim());
					}
					else if (nameButton.isSelected()) {
						searchMember(SEARCH_NAME, jTextField.getText().trim());
					}
					else if (phoneNumButton.isSelected()) {
						searchMember(SEARCH_CELL, jTextField.getText().trim());
					}
					else if (allButton.isSelected()) {
						searchMember(SEARCH_ALL, jTextField.getText().trim());
					}
					
					jButton.setText("Search");
				}
				else
				{
					JOptionPane.showMessageDialog(jFrame, "Please enter search word!");
				}
			}
		});
	}
 	
	protected static ImageIcon createImageIcon(String path) {
	    java.net.URL imgURL = CustomerCare.class.getResource(path);
	    return new ImageIcon(imgURL);
	}
	
	public void closeDatabase()
	{
		try
		{
			if (connection != null)
			{
				connection.close();
			}
			 
			if (statement != null)
			{
				statement.close();
			}
			 
			if (resultSet != null)
			{
				resultSet.close();
			}
		}
		catch (SQLException e)
		{
			System.out.println("closeDatabase" +  e.getStackTrace());
		}
	}
	
	public String idCheck()
	{
		String result = null;

		try
		{	
			connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);

			statement = connection.createStatement();
 
			resultSet = statement.executeQuery("SELECT IFNULL(MAX(CUST_ID),0)  +1 FROM cccustom;");
			
			if (resultSet.next())
			{
				result = resultSet.getString(1);
				System.out.println("result =" + result);
			}
		}
		catch (SQLException e)
		{
			System.out.println("IDCheck" +  e.getStackTrace());
		}
		
		finally
		{
			closeDatabase();
		}
		return result;
	}
	
	public String timeStampCheck()
	{
		String result = null;
		
		try
		{	
			connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);

			statement = connection.createStatement();
 
			resultSet = statement.executeQuery("SELECT DATE_FORMAT(now(),'%Y%m%d%H%i%s')");
			
			if (resultSet.next())
			{
				result = resultSet.getString(1);
				System.out.println("result = " + result);
			}
		}
		catch (SQLException e)
		{
			System.out.println("timeStampCheck" +  e.getStackTrace());
		}
		
		finally
		{
			closeDatabase();
		}
		return result;
	}
	
	public void searchMember(int searchMode, String keyWord)
	{
//		if (case = SEARCH_ID)
//		String keyWord = String.format("%010d", Integer.parseInt(inputkeyWord));
				
		try
		{
			connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
			
			statement = connection.createStatement();
			 
			System.out.println("SearchMode = " + searchMode);
		
			switch (searchMode) {
				case SEARCH_ID:
					String keyID = String.format("%010d", Integer.parseInt(keyWord));
					resultSet = statement.executeQuery("SELECT CUST_ID, LAST_NAME, FIRST_NAME, BIRTH_DATE FROM cccustom where cccustom.CUST_ID =\"" + keyID + "\"");
				break;
	
				case SEARCH_NAME:
					resultSet = statement.executeQuery("SELECT CUST_ID, LAST_NAME, FIRST_NAME, BIRTH_DATE FROM cccustom where cccustom.FIRST_NAME LIKE '%" + keyWord + "%' or cccustom.LAST_NAME LIKE '%" + keyWord + "%'");
				break;
				
				case SEARCH_CELL:
					resultSet = statement.executeQuery("SELECT CUST_ID, LAST_NAME, FIRST_NAME, BIRTH_DATE FROM cccustom where cccustom.CELL_NO LIKE '%" + keyWord + "%'");
				break;
		
				case SEARCH_ALL:
					resultSet = statement.executeQuery("SELECT B.CUST_ID, A.LAST_NAME, A.FIRST_NAME, A.BIRTH_DATE, B.EXP_DATE, B.PROC_TYPE, B.COMPANY_NAME, B.TEXT_DATE_TIME, B.CALL_DATE_TIME, B.VISIT_DATE_TIME, B.COMPLETE_DATE FROM CCCUSTOM A, AUTXNPRM B WHERE A.CUST_ID = B.CUST_ID AND B.EXP_DATE LIKE '" + keyWord + "%' UNION ALL SELECT  C.CUST_ID, A.LAST_NAME, A.FIRST_NAME, A.BIRTH_DATE, C.EXP_DATE, C.PROC_TYPE, C.COMPANY_NAME, C.TEXT_DATE_TIME, C.CALL_DATE_TIME, C.VISIT_DATE_TIME, C.COMPLETE_DATE FROM CCCUSTOM A, HOTXNPRM C WHERE A.CUST_ID = C.CUST_ID AND C.EXP_DATE LIKE '" + keyWord + "%' UNION ALL SELECT  E.CUST_ID, A.LAST_NAME, A.FIRST_NAME, A.BIRTH_DATE, E.EXP_DATE, E.PROC_TYPE, E.COMPANY_NAME, E.TEXT_DATE_TIME, E.CALL_DATE_TIME, E.VISIT_DATE_TIME, E.COMPLETE_DATE FROM CCCUSTOM A, COTXNPRM E WHERE A.CUST_ID = E.CUST_ID AND E.EXP_DATE LIKE '" + keyWord + "%' ORDER BY 5,6");
				break;	
				
				case SEARCH_IN_PROGRESS:
					resultSet = statement.executeQuery("SELECT B.CUST_ID, A.LAST_NAME, A.FIRST_NAME, A.BIRTH_DATE, B.EXP_DATE, B.PROC_TYPE, B.COMPANY_NAME, B.TEXT_DATE_TIME, B.CALL_DATE_TIME, B.VISIT_DATE_TIME, B.COMPLETE_DATE FROM CCCUSTOM A, AUTXNPRM B WHERE A.CUST_ID = B.CUST_ID AND B.PROC_TYPE NOT IN ('SUCCESS', 'FAIL', 'NEXT', 'COMPLETE') UNION ALL SELECT  C.CUST_ID, A.LAST_NAME, A.FIRST_NAME, A.BIRTH_DATE, C.EXP_DATE, C.PROC_TYPE, C.COMPANY_NAME, C.TEXT_DATE_TIME, C.CALL_DATE_TIME, C.VISIT_DATE_TIME, C.COMPLETE_DATE FROM CCCUSTOM A, HOTXNPRM C WHERE A.CUST_ID = C.CUST_ID AND C.PROC_TYPE NOT IN ('SUCCESS', 'FAIL', 'NEXT', 'COMPLETE') UNION ALL SELECT  E.CUST_ID, A.LAST_NAME, A.FIRST_NAME, A.BIRTH_DATE, E.EXP_DATE, E.PROC_TYPE, E.COMPANY_NAME, E.TEXT_DATE_TIME, E.CALL_DATE_TIME, E.VISIT_DATE_TIME, E.COMPLETE_DATE FROM CCCUSTOM A, COTXNPRM E WHERE A.CUST_ID = E.CUST_ID AND E.PROC_TYPE NOT IN ('SUCCESS', 'FAIL', 'NEXT', 'COMPLETE') UNION ALL SELECT  F.CUST_ID, A.LAST_NAME, A.FIRST_NAME, A.BIRTH_DATE, F.EXP_DATE, F.PROC_TYPE, F.COMPANY_NAME, F.TEXT_DATE_TIME, F.CALL_DATE_TIME, F.MAIL_DATE_TIME, F.COMPLETE_DATE FROM CCCUSTOM A, TRTXNPRM F WHERE A.CUST_ID = F.CUST_ID AND F.PROC_TYPE NOT IN ('SUCCESS', 'FAIL', 'NEXT', 'COMPLETE') ORDER BY 5,6");
				break;
				
				case SEARCH_IN_COMPLETE:
					resultSet = statement.executeQuery("SELECT B.CUST_ID, A.LAST_NAME, A.FIRST_NAME, A.BIRTH_DATE, B.EXP_DATE, B.PROC_TYPE, B.COMPANY_NAME, B.TEXT_DATE_TIME, B.CALL_DATE_TIME, B.VISIT_DATE_TIME, B.COMPLETE_DATE FROM CCCUSTOM A, AUTXNPRM B WHERE A.CUST_ID = B.CUST_ID AND B.PROC_TYPE = 'COMPLETE' UNION ALL SELECT  C.CUST_ID, A.LAST_NAME, A.FIRST_NAME, A.BIRTH_DATE, C.EXP_DATE, C.PROC_TYPE, C.COMPANY_NAME, C.TEXT_DATE_TIME, C.CALL_DATE_TIME, C.VISIT_DATE_TIME, C.COMPLETE_DATE FROM CCCUSTOM A, HOTXNPRM C WHERE A.CUST_ID = C.CUST_ID AND C.PROC_TYPE = 'COMPLETE' UNION ALL SELECT  E.CUST_ID, A.LAST_NAME, A.FIRST_NAME, A.BIRTH_DATE, E.EXP_DATE, E.PROC_TYPE, E.COMPANY_NAME, E.TEXT_DATE_TIME, E.CALL_DATE_TIME, E.VISIT_DATE_TIME, E.COMPLETE_DATE FROM CCCUSTOM A, COTXNPRM E WHERE A.CUST_ID = E.CUST_ID AND E.PROC_TYPE = 'COMPLETE' UNION ALL SELECT  F.CUST_ID, A.LAST_NAME, A.FIRST_NAME, A.BIRTH_DATE, F.EXP_DATE, F.PROC_TYPE, F.COMPANY_NAME, F.TEXT_DATE_TIME, F.CALL_DATE_TIME, F.MAIL_DATE_TIME, F.COMPLETE_DATE FROM CCCUSTOM A, TRTXNPRM F WHERE A.CUST_ID = F.CUST_ID AND F.PROC_TYPE = 'COMPLETE' ORDER BY 5,6");
				break;	
			}
					
			ResultSetMetaData resultSetMetaData = resultSet.getMetaData();//Getting info from column
			
			Object [] tempObject = new Object[resultSetMetaData.getColumnCount()];//tempObject = data

			defaultTableModel_Personal_Info.setRowCount(0);
			
			while (resultSet.next())
			{	
				for (int i=0; i < resultSetMetaData.getColumnCount(); i++)
				{
					tempObject[i] = resultSet.getString(i+1);
				}
				defaultTableModel_Personal_Info.addRow(tempObject);

			}
			String rs = String.valueOf(defaultTableModel_Personal_Info.getRowCount());
			totalTextField.setText(rs);
			
			if (defaultTableModel_Personal_Info.getRowCount() > 0)
			{
				jTable_Personal_Info.setRowSelectionInterval(0, 0);
			}
			//CustomerInfo end
			
		}
		catch (SQLException e)
		{
			System.out.println("SQLException3123" +  e.getStackTrace());
		}
		
		finally
		{
			closeDatabase();
		}
	}
	
	public void selectAutomobileInfo(String customerID) {
		try
		{								
			connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
			
			statement = connection.createStatement();
		
			resultAutomobileSet = statement.executeQuery("SELECT * FROM AUTXNPRM where AUTXNPRM.CUST_ID = \"" + customerID + "\"ORDER BY TIME_STAMP DESC");
			
			defaultTableModel_Automobile_Info.setRowCount(0);			
			
			while (resultAutomobileSet.next())
			{
				String customerId = resultAutomobileSet.getString(1);
				String timeStamp = resultAutomobileSet.getString(2);
				String txnType = resultAutomobileSet.getString(3);
				String plateNo = resultAutomobileSet.getString(4);
				String docNo= resultAutomobileSet.getString(5);
				String expDate = resultAutomobileSet.getString(6);
				String newExpDate = resultAutomobileSet.getString(7);
				String procType = resultAutomobileSet.getString(8);
				String premium = resultAutomobileSet.getString(9);
				String completeDate = resultAutomobileSet.getString(13);
				String companyName = resultAutomobileSet.getString(14);
				String owner = resultAutomobileSet.getString(15);
				String memo = resultAutomobileSet.getString(16);

			    Object[] row = { customerId, timeStamp, txnType, plateNo, docNo, expDate, newExpDate, procType, premium, completeDate, companyName, owner, memo};
				
				defaultTableModel_Automobile_Info.addRow(row);
			}
			String rs = String.valueOf(defaultTableModel_Automobile_Info.getRowCount());
			AutoTextField.setText(rs);
			
			if (defaultTableModel_Automobile_Info.getRowCount() > 0)
			{
				jTable_Automobile_Info.setRowSelectionInterval(0, 0);
			}
			//AutomobileInfo end
		}
		catch (SQLException e)
		{
			System.out.println("SQLException2" +  e.getStackTrace());
		}
		
		finally
		{
			closeDatabase();
		}
	}
	public void selectTravelInfo(String customerID) {
		try
		{								
			connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
			
			statement = connection.createStatement();
		
			resultTravelSet = statement.executeQuery("SELECT * FROM trtxnprm where trtxnprm.CUST_ID = \"" + customerID + "\" ORDER BY TIME_STAMP DESC");
			
			defaultTableModel_Traveler_Info.setRowCount(0);			
					
			while (resultTravelSet.next())
			{
				String customerId = resultTravelSet.getString(1);
				String timeStamp = resultTravelSet.getString(2);
				String effDate = resultTravelSet.getString(3);
				String expDate = resultTravelSet.getString(4);
				String txnType = resultTravelSet.getString(5);
				String procType = resultTravelSet.getString(6);
				String premium = resultTravelSet.getString(7);
				String completeDate = resultTravelSet.getString(11);
				String companyName = resultTravelSet.getString(12);
				String owner = resultTravelSet.getString(13);
				String memo = resultTravelSet.getString(14);

			    Object[] row = { customerId, timeStamp, effDate, expDate, txnType, procType, premium, completeDate, companyName, owner, memo};
				
				defaultTableModel_Traveler_Info.addRow(row);
			}
			String rs = String.valueOf(defaultTableModel_Traveler_Info.getRowCount());
			TravelTextField.setText(rs);
			
			if (defaultTableModel_Traveler_Info.getRowCount() > 0)
			{
				jTable_Traveler_Info.setRowSelectionInterval(0, 0);
			}
			//AutomobileInfo end
		}
		catch (SQLException e)
		{
			System.out.println("SQLException2" +  e.getStackTrace());
		}
		
		finally
		{
			closeDatabase();
		}
	}
	public void selectHomeInfo(String customerID) {
		try
		{									
			connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
			
			statement = connection.createStatement();
		
			System.out.println(customerID);
			
			resultHomeSet = statement.executeQuery("SELECT * FROM HOTXNPRM where HOTXNPRM.CUST_ID = \"" + customerID + "\" ORDER BY TIME_STAMP DESC");
	
			//AutomobileInfo				
			defaultTableModel_House_Info.setRowCount(0);			
			
			while (resultHomeSet.next()) {
				String customerId = resultHomeSet.getString(1);
				String timeStamp = resultHomeSet.getString(2);
				String expDate = resultHomeSet.getString(3);
				String newExpDate = resultHomeSet.getString(4);
				String txnType = resultHomeSet.getString(5);
				String procType = resultHomeSet.getString(6);
				String sigxpNo = resultHomeSet.getString(7);
				String premium = resultHomeSet.getString(8);
				String completeDate = resultHomeSet.getString(12);
				String companyName = resultHomeSet.getString(13);
				String owner = resultHomeSet.getString(14);
				String memo = resultHomeSet.getString(15);

			    Object[] row = { customerId, timeStamp, expDate, newExpDate, txnType, procType, sigxpNo, premium, completeDate, companyName, owner, memo};
			    
				defaultTableModel_House_Info.addRow(row);
			}
			String rs = String.valueOf(defaultTableModel_House_Info.getRowCount());
			HouseTextField.setText(rs);
			
			if (defaultTableModel_House_Info.getRowCount() > 0) {
				jTable_House_Info.setRowSelectionInterval(0, 0);
			}
			//AutomobileInfo end
		}
		catch (SQLException e) {
			System.out.println("SQLException2" +  e.getStackTrace());
		}
		
		finally {
			closeDatabase();
		}
	}

	public void selectDetailedInfo(String customerID) {
		try
		{									
			connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
			
			statement = connection.createStatement();
		
			resultDetailedInfoSet = statement.executeQuery("SELECT * FROM CCCUSTOM where CCCUSTOM.CUST_ID = \"" + customerID + "\"");
	
			//DetailedInfo				
			idTextField.removeAll();			
			firstNameTextField.removeAll();			
			LastNameTextField.removeAll();			
			phoneNumField.removeAll();			
			birthDateField.removeAll();			
			emailField.removeAll();			
			postalCDTextField.removeAll();			
			priCustIDField.removeAll();			
			memoField.removeAll();					
			addrStrtField.removeAll();					
			addrPvField.removeAll();					
	
			while (resultDetailedInfoSet.next()) {
				String id = resultDetailedInfoSet.getString(1);
				String lastName = resultDetailedInfoSet.getString(2);
				String firstName = resultDetailedInfoSet.getString(3);
				String phoneNum = resultDetailedInfoSet.getString(4);
				String birthDate = resultDetailedInfoSet.getString(5);
				String email = resultDetailedInfoSet.getString(6);
				String priCustID = resultDetailedInfoSet.getString(7);
				String memo = resultDetailedInfoSet.getString(8);
				String postalCd = resultDetailedInfoSet.getString(9);
				String addrStrtNum = resultDetailedInfoSet.getString(10);
				String addrPvNum = resultDetailedInfoSet.getString(11);
				
				idTextField.setText(id);
				firstNameTextField.setText(firstName);
				LastNameTextField.setText(lastName);
				phoneNumField.setText(phoneNum);
				birthDateField.setText(birthDate);
				emailField.setText(email);
				postalCDTextField.setText(postalCd);
				priCustIDField.setText(priCustID);
				memoField.setText(memo);
				addrStrtField.setText(addrStrtNum);	
				addrPvField.setText(addrPvNum);	
			}
			
			//AutomobileInfo end
		}
		catch (SQLException e) {
			System.out.println("SQLException2" +  e.getStackTrace());
		}
		
		finally {
			closeDatabase();
		}
	}
	
	public void selectFamilyInfo(String customerID, String primaryCustID) {
		try
		{									
			connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
			
			statement = connection.createStatement();
			
			resultFamilyInfoSet = statement.executeQuery("SELECT * FROM CCCUSTOM A WHERE A.CUST_ID = \"" + customerID + "\" OR A.PRI_CUST_ID = \"" + customerID + "\" UNION SELECT * FROM CCCUSTOM A WHERE A.CUST_ID IN (SELECT B.PRI_CUST_ID FROM CCCUSTOM B WHERE B.CUST_ID = \"" + customerID + "\") UNION SELECT * FROM CCCUSTOM A WHERE A.PRI_CUST_ID IN (SELECT B.PRI_CUST_ID FROM CCCUSTOM B WHERE B.CUST_ID = \"" + customerID + "\") ORDER BY 1;");
			
			defaultTableModel_Family_Info.setRowCount(0);			

			while (resultFamilyInfoSet.next())
			{				
				String id = resultFamilyInfoSet.getString(1);
				String lastName = resultFamilyInfoSet.getString(2);
				String firstName = resultFamilyInfoSet.getString(3);
				String birthDate = resultFamilyInfoSet.getString(5);
				
			    Object[] row = { id, lastName, firstName, birthDate};
				
				defaultTableModel_Family_Info.addRow(row);
			}
			
			if (defaultTableModel_Family_Info.getRowCount() > 0) {
				jTable_Family_Info.setRowSelectionInterval(0, 0);
			}
			//AutomobileInfo end
		}
		catch (SQLException e) {
			System.out.println("SQLException4" +  e.getStackTrace());
		}
		
		finally {
			closeDatabase();
		}
	}
	
	public void selectCommercialInfo(String customerID) {
		
		try
		{									
			connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
			
			statement = connection.createStatement();
			
			resultCommercialInfoSet = statement.executeQuery("SELECT * FROM COTXNPRM where COTXNPRM.CUST_ID = \"" + customerID + "\"ORDER BY TIME_STAMP DESC");
			
			defaultTableModel_Commercial_Info.setRowCount(0);			

			while (resultCommercialInfoSet.next())
			{				
				String customerId = resultCommercialInfoSet.getString(1);
				String timeStamp = resultCommercialInfoSet.getString(2);
				String expDate = resultCommercialInfoSet.getString(3);
				String newExpDate = resultCommercialInfoSet.getString(4);
				String txnType = resultCommercialInfoSet.getString(5);
				String procType = resultCommercialInfoSet.getString(6);
				String premium = resultCommercialInfoSet.getString(7);
				String completeDate = resultCommercialInfoSet.getString(11);
				String companyName = resultCommercialInfoSet.getString(12);
				String owner = resultCommercialInfoSet.getString(13);
				String memo = resultCommercialInfoSet.getString(14);

			    Object[] row = { customerId, timeStamp, expDate, newExpDate, txnType, procType, premium, completeDate, companyName, owner, memo};
				
				defaultTableModel_Commercial_Info.addRow(row);			
			}
			String rs = String.valueOf(defaultTableModel_Commercial_Info.getRowCount());
			CommercialTextField.setText(rs);
			
			if (defaultTableModel_Commercial_Info.getRowCount() > 0) {
				jTable_Commercial_Info.setRowSelectionInterval(0, 0);
			}
			//AutomobileInfo end
		}
		catch (SQLException e) {
			System.out.println("SQLException4" +  e.getStackTrace());
		}
		
		finally {
			closeDatabase();
		}
	}
	
	public boolean submitMember(int dialogMode, String tempID, String LastName, String FirstName, String cellNum, String birthDate, String email, String priCustID, String memo, String postalCd, String addrStNum, String addrPvNum)
	{
		
		int result = 0;
		
		try
		{
			connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
 
			if (dialogMode == NEW_MODE)
			{	
				String id = String.format("%010d", Integer.parseInt(tempID));
			    
				preparedStatement = connection.prepareStatement("INSERT INTO cccustom (CUST_ID, LAST_NAME, FIRST_NAME, CELL_NO, BIRTH_DATE, EMAIL, PRI_CUST_ID, MEMO, POSTAL_CD, ADDR_ST_NM, ADDR_PV_NM)" + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
			    
				preparedStatement.setString(1, id);
				preparedStatement.setString(2, LastName);
				preparedStatement.setString(3, FirstName);
				preparedStatement.setString(4, cellNum);
				preparedStatement.setString(5, birthDate);
				preparedStatement.setString(6, email);
				preparedStatement.setString(7, priCustID);
				preparedStatement.setString(8, memo);
				preparedStatement.setString(9, postalCd);
				preparedStatement.setString(10, addrStNum);
				preparedStatement.setString(11, addrPvNum);
	//			       the mysql insert statement
			}
			else if (dialogMode == EDIT_MODE)
			{
				preparedStatement = connection.prepareStatement("UPDATE cccustom SET LAST_NAME=?, FIRST_NAME=?, CELL_NO=?, BIRTH_DATE=?, EMAIL=?, PRI_CUST_ID = ?, MEMO = ?, POSTAL_CD = ?, ADDR_ST_NM = ?, ADDR_PV_NM = ? WHERE CUST_ID=?");
				preparedStatement.setString(1, LastName);
				preparedStatement.setString(2, FirstName);
				preparedStatement.setString(3, cellNum);
				preparedStatement.setString(4, birthDate);
				preparedStatement.setString(5, email);
				preparedStatement.setString(6, priCustID);
				preparedStatement.setString(7, memo);
				preparedStatement.setString(8, postalCd);
				preparedStatement.setString(9, addrStNum);
				preparedStatement.setString(10, addrPvNum);
				preparedStatement.setString(11, tempID);
			}
			result = preparedStatement.executeUpdate();
		}
		catch (SQLException e)
		{
			System.out.println("submitMember" +  e.getStackTrace());
			JOptionPane.showMessageDialog(jFrame, "customer submit error");
		}
		
		finally
		{
			closeDatabase();
		}
		
		System.out.println("SearchMember::submitMember");
		
		return (result > 0) ? true : false;
	}
	
	public boolean submitMemberForAuto(int dialogMode, String tempID, String time_stamp, String txnType, String plateNo, String docNo, 
									  String expDate, String newExpDate, String procType, String premium, String textDateTime, String callDateTime, 
									  String visitDateTime, String completeDate, String companyName, String ownerShip, String memo, String postalCD, 
									  String addrStNum, String addrPvNum)
	{
		
		int result = 0;
		
		try
		{
			connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
 
			if (dialogMode == NEW_MODE)
			{
					System.out.println("submitMember new");
					
					String expDate1 = expDate.replace("/", "");
					String newExpDate1 = newExpDate.replace("/", "");
					String textDateTime1 = textDateTime.replace("/", "");
					String callDateTime1 = callDateTime.replace("/", "");
					String visitDateTime1 = visitDateTime.replace("/", "");
					String completeDate1 = completeDate.replace("/", "");
					
					System.out.println("expDate = " + expDate1);

					Float premiumForAuto = Float.parseFloat(premium);
					
					preparedStatement = connection.prepareStatement("INSERT INTO AUTXNPRM (CUST_ID, TIME_STAMP, TXN_TYPE, PLATE_NO, DOC_NO, EXP_DATE, NEW_EXP_DATE, PROC_TYPE, PREMIUM, TEXT_DATE_TIME, CALL_DATE_TIME, VISIT_DATE_TIME, COMPLETE_DATE, COMPANY_NAME, OWNERSHIP, MEMO, POSTAL_CD, ADDR_ST_NM, ADDR_PV_NM)" + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"); // 19
				    
					preparedStatement.setString(1, tempID);
					preparedStatement.setString(2, time_stamp);
					preparedStatement.setString(3, txnType);
					preparedStatement.setString(4, plateNo);
					preparedStatement.setString(5, docNo);
					preparedStatement.setString(6, expDate1);
					preparedStatement.setString(7, newExpDate1);
					preparedStatement.setString(8, procType);
					preparedStatement.setFloat(9, premiumForAuto);
					preparedStatement.setString(10, textDateTime1);
					preparedStatement.setString(11, callDateTime1);
					preparedStatement.setString(12, visitDateTime1);
					preparedStatement.setString(13, completeDate1);
					preparedStatement.setString(14, companyName);
					preparedStatement.setString(15, ownerShip);
					preparedStatement.setString(16, memo);
					preparedStatement.setString(17, postalCD);
					preparedStatement.setString(18, addrStNum);
					preparedStatement.setString(19, addrPvNum);

	//			       the mysql insert statement
			}
			else if (dialogMode == EDIT_MODE)
			{
				
				Float premiumForAuto = Float.parseFloat(premium);
				
				System.out.println(tempID);
								
				preparedStatement = connection.prepareStatement("UPDATE AUTXNPRM SET TXN_TYPE=?, PLATE_NO = ?, DOC_NO = ?, EXP_DATE = ?, NEW_EXP_DATE = ?, PROC_TYPE = ?, PREMIUM = ?, TEXT_DATE_TIME = ?, CALL_DATE_TIME = ?, VISIT_DATE_TIME = ?, COMPLETE_DATE = ?, COMPANY_NAME = ?, OWNERSHIP = ?, MEMO = ?, POSTAL_CD = ?, ADDR_ST_NM = ?, ADDR_PV_NM = ? WHERE TIME_STAMP = ? AND CUST_ID = ?");
				preparedStatement.setString(1, txnType);
				preparedStatement.setString(2, plateNo);
				preparedStatement.setString(3, docNo);
				preparedStatement.setString(4, expDate);
				preparedStatement.setString(5, newExpDate);
				preparedStatement.setString(6, procType);
				preparedStatement.setFloat(7, premiumForAuto);
				preparedStatement.setString(8, textDateTime);
				preparedStatement.setString(9, callDateTime);
				preparedStatement.setString(10, visitDateTime);
				preparedStatement.setString(11, completeDate);
				preparedStatement.setString(12, companyName);
				preparedStatement.setString(13, ownerShip);
				preparedStatement.setString(14, memo);
				preparedStatement.setString(15, postalCD);
				preparedStatement.setString(16, addrStNum);
				preparedStatement.setString(17, addrPvNum);
				preparedStatement.setString(18, time_stamp);
				preparedStatement.setString(19, tempID);
			}
				
			result = preparedStatement.executeUpdate();
		}
		catch (SQLException e)
		{
			System.out.println("submitMember" +  e.getStackTrace());
			JOptionPane.showMessageDialog(jFrame, "auto update error");
		}
		
		finally
		{
			closeDatabase();
		}
		
		return (result > 0) ? true : false;
	}
	
	public boolean submitMemberForHome(int dialogMode, String tempID, String time_stamp, String expDate,
									 String newExpDate, String txnType, String procType, String sigxpNo, String premium, 
									 String textDateTime, String callDateTime, String visitDateTime, String completeDate, String companyName, String ownerShip, 
									 String memo, String postalCd, String addrStNum, String addrPvNum)
	{

		int result = 0;

		try
		{
			connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);

			if (dialogMode == NEW_MODE)
			{	
				String expDate1 = expDate.replace("/", "");
				String newExpDate1 = newExpDate.replace("/", "");
				String textDateTime1 = textDateTime.replace("/", "");
				String callDateTime1 = callDateTime.replace("/", "");
				String visitDateTime1 = visitDateTime.replace("/", "");
				String completeDate1 = completeDate.replace("/", "");
				
				Float premiumForAuto = Float.parseFloat(premium);

				preparedStatement = connection.prepareStatement("INSERT INTO HOTXNPRM (CUST_ID, TIME_STAMP, EXP_DATE, NEW_EXP_DATE, TXN_TYPE, PROC_TYPE, SIGXP_NO, PREMIUM, TEXT_DATE_TIME, CALL_DATE_TIME, VISIT_DATE_TIME, COMPLETE_DATE, COMPANY_NAME, OWNERSHIP, MEMO, POSTAL_CD, ADDR_ST_NM, ADDR_PV_NM)" + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"); // 18

				preparedStatement.setString(1, tempID);
				preparedStatement.setString(2, time_stamp);
				preparedStatement.setString(3, expDate1);
				preparedStatement.setString(4, newExpDate1);
				preparedStatement.setString(5, txnType);
				preparedStatement.setString(6, procType);
				preparedStatement.setString(7, sigxpNo);
				preparedStatement.setFloat(8, premiumForAuto);
				preparedStatement.setString(9, textDateTime1);
				preparedStatement.setString(10, callDateTime1);
				preparedStatement.setString(11, visitDateTime1);
				preparedStatement.setString(12, completeDate1);
				preparedStatement.setString(13, companyName);
				preparedStatement.setString(14, ownerShip);
				preparedStatement.setString(15, memo);
				preparedStatement.setString(16, postalCd);
				preparedStatement.setString(17, addrStNum);
				preparedStatement.setString(18, addrPvNum);

//			       the mysql insert statement
			}
			else if (dialogMode == EDIT_MODE)
			{
				System.out.println("premium = " + premium);
				System.out.println("callDateTime = " + callDateTime);
				System.out.println(time_stamp);				
				System.out.println(tempID);				
				
				System.out.println("submitMember new2");
				preparedStatement = connection.prepareStatement("UPDATE HOTXNPRM SET EXP_DATE=?, NEW_EXP_DATE = ?, TXN_TYPE = ?, PROC_TYPE = ?, SIGXP_NO = ?, PREMIUM = ?, TEXT_DATE_TIME = ?, CALL_DATE_TIME = ?, VISIT_DATE_TIME = ?, COMPLETE_DATE = ?, COMPANY_NAME = ?, OWNERSHIP = ?, MEMO = ?, POSTAL_CD = ?, ADDR_ST_NM = ?, ADDR_PV_NM = ? WHERE TIME_STAMP = ? AND CUST_ID = ?");
				preparedStatement.setString(1, expDate);
				preparedStatement.setString(2, newExpDate);
				preparedStatement.setString(3, txnType);
				preparedStatement.setString(4, procType);
				preparedStatement.setString(5, sigxpNo);
				preparedStatement.setString(6, premium);
				preparedStatement.setString(7, textDateTime);
				preparedStatement.setString(8, callDateTime);
				preparedStatement.setString(9, visitDateTime);
				preparedStatement.setString(10, completeDate);
				preparedStatement.setString(11, companyName);
				preparedStatement.setString(12, ownerShip);
				preparedStatement.setString(13, memo);
				preparedStatement.setString(14, postalCd);
				preparedStatement.setString(15, addrStNum);
				preparedStatement.setString(16, addrPvNum);
				preparedStatement.setString(17, time_stamp);
				preparedStatement.setString(18, tempID);
			}
			result = preparedStatement.executeUpdate();
		}
		catch (SQLException e)
		{
			System.out.println("submitMember" +  e.getStackTrace());
			JOptionPane.showMessageDialog(jFrame, "home update error");
		}

		finally
		{
			closeDatabase();
		}

		return (result > 0) ? true : false;
	}
	
	public boolean submitMemberForTravel(int dialogMode, String tempID, String time_stamp, String effDate, 
			  String expDate, String txnType, String procType, String premium, String textDateTime, String callDateTime, 
			  String mailDateTime, String completeDate, String companyName, String ownerShip, String memo)
	{
	
		int result = 0;
	
		try
		{
			connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
		
			if (dialogMode == NEW_MODE)
			{							
				String expDate1 = expDate.replace("/", "");
				String effDate1 = effDate.replace("/", "");
				String textDateTime1 = textDateTime.replace("/", "");
				String callDateTime1 = callDateTime.replace("/", "");
				String mailDateTime1 = mailDateTime.replace("/", "");
				String completeDate1 = completeDate.replace("/", "");
				
				preparedStatement = connection.prepareStatement("INSERT INTO TRTXNPRM (CUST_ID, TIME_STAMP, EFF_DATE, EXP_DATE, TXN_TYPE, PROC_TYPE, PREMIUM, TEXT_DATE_TIME, CALL_DATE_TIME, MAIL_DATE_TIME, COMPLETE_DATE, COMPANY_NAME, OWNERSHIP, MEMO)" + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"); // 19
				
				preparedStatement.setString(1, tempID);
				preparedStatement.setString(2, time_stamp);
				preparedStatement.setString(3, effDate1);
				preparedStatement.setString(4, expDate1);
				preparedStatement.setString(5, txnType);
				preparedStatement.setString(6, procType);
				preparedStatement.setString(7, premium);
				preparedStatement.setString(8, textDateTime1);
				preparedStatement.setString(9, callDateTime1);
				preparedStatement.setString(10, mailDateTime1);
				preparedStatement.setString(11, completeDate1);
				preparedStatement.setString(12, companyName);
				preparedStatement.setString(13, ownerShip);
				preparedStatement.setString(14, memo);
		
		//			       the mysql insert statement
			}
			else if (dialogMode == EDIT_MODE)
			{				
				Float premiumForAuto = Float.parseFloat(premium);

				preparedStatement = connection.prepareStatement("UPDATE TRTXNPRM SET EFF_DATE = ?, EXP_DATE = ?, TXN_TYPE = ?, PROC_TYPE = ?, PREMIUM = ?, TEXT_DATE_TIME = ?, CALL_DATE_TIME = ?, MAIL_DATE_TIME = ?, COMPLETE_DATE = ?, COMPANY_NAME = ?, OWNERSHIP = ?, MEMO = ? WHERE TIME_STAMP =? AND CUST_ID = ?");
				preparedStatement.setString(1, effDate);
				preparedStatement.setString(2, expDate);
				preparedStatement.setString(3, txnType);
				preparedStatement.setString(4, procType);
				preparedStatement.setFloat(5, premiumForAuto);
				preparedStatement.setString(6, textDateTime);
				preparedStatement.setString(7, callDateTime);
				preparedStatement.setString(8, mailDateTime);
				preparedStatement.setString(9, completeDate);
				preparedStatement.setString(10, companyName);
				preparedStatement.setString(11, ownerShip);
				preparedStatement.setString(12, memo);
				preparedStatement.setString(13, time_stamp);
				preparedStatement.setString(14, tempID);
			}

			result = preparedStatement.executeUpdate();
		}
		catch (SQLException e)
		{
			System.out.println("submitMember" +  e.getStackTrace());
			JOptionPane.showMessageDialog(jFrame, "travel update error");
		}
	
		finally
		{
			closeDatabase();
		}
	
		return (result > 0) ? true : false;
	
	}
	
	public boolean submitMemberForCommercial(int dialogMode, String tempID, String time_stamp, String expDate, String newExpDate, String txnType, 
			  String procType, String premium, String textDateTime, String callDateTime, 
			  String visitDateTime, String completeDate, String companyName, String ownerShip, String memo)
	{
	
		int result = 0;
	
		try
		{
			connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
		
			if (dialogMode == NEW_MODE)
			{	
				
				String expDate1 = expDate.replace("/", "");
				String newExpDate1 = newExpDate.replace("/", "");
				String textDateTime1 = textDateTime.replace("/", "");
				String callDateTime1 = callDateTime.replace("/", "");
				String visitDateTime1 = visitDateTime.replace("/", "");
				String completeDate1 = completeDate.replace("/", "");
				
				Float premiumForCommercial = Float.parseFloat(premium);

				preparedStatement = connection.prepareStatement("INSERT INTO COTXNPRM (CUST_ID, TIME_STAMP, EXP_DATE, NEW_EXP_DATE, TXN_TYPE, PROC_TYPE, PREMIUM, TEXT_DATE_TIME, CALL_DATE_TIME, VISIT_DATE_TIME, COMPLETE_DATE, COMPANY_NAME, OWNERSHIP, MEMO)"+ "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"); // 14
				
				System.out.println(tempID);
				
				preparedStatement.setString(1, tempID);
				preparedStatement.setString(2, time_stamp);
				preparedStatement.setString(3, expDate1);
				preparedStatement.setString(4, newExpDate1);
				preparedStatement.setString(5, txnType);
				preparedStatement.setString(6, procType);
				preparedStatement.setFloat(7, premiumForCommercial);
				preparedStatement.setString(8, textDateTime1);
				preparedStatement.setString(9, callDateTime1);
				preparedStatement.setString(10, visitDateTime1);
				preparedStatement.setString(11, completeDate1);
				preparedStatement.setString(12, companyName);
				preparedStatement.setString(13, ownerShip);
				preparedStatement.setString(14, memo);
		
		//			       the mysql insert statement
			}
			else if (dialogMode == EDIT_MODE)
			{				
				Float premiumForCommercial = Float.parseFloat(premium);

				preparedStatement = connection.prepareStatement("UPDATE COTXNPRM SET EXP_DATE = ?, NEW_EXP_DATE = ?, TXN_TYPE = ?, PROC_TYPE = ?, PREMIUM = ?, TEXT_DATE_TIME = ?, CALL_DATE_TIME = ?, VISIT_DATE_TIME = ?, COMPLETE_DATE = ?, COMPANY_NAME = ?, OWNERSHIP = ?, MEMO = ? WHERE TIME_STAMP =? AND CUST_ID = ?");
				preparedStatement.setString(1, expDate);
				preparedStatement.setString(2, newExpDate);
				preparedStatement.setString(3, txnType);
				preparedStatement.setString(4, procType);
				preparedStatement.setFloat(5, premiumForCommercial);
				preparedStatement.setString(6, textDateTime);
				preparedStatement.setString(7, callDateTime);
				preparedStatement.setString(8, visitDateTime);
				preparedStatement.setString(9, completeDate);
				preparedStatement.setString(10, companyName);
				preparedStatement.setString(11, ownerShip);
				preparedStatement.setString(12, memo);
				preparedStatement.setString(13, time_stamp);
				preparedStatement.setString(14, tempID);
			}

			result = preparedStatement.executeUpdate();
		}
		catch (SQLException e)
		{
			System.out.println("submitMemberForCommercial" +  e.getStackTrace());
			JOptionPane.showMessageDialog(jFrame, "commercial update error");
		}
	
		finally
		{
			closeDatabase();
		}
	
		return (result > 0) ? true : false;
	
	}
	
	public boolean insertMemberForOther(int dialogMode, String tempID, String time_stamp)
	{
	
		int result = 0;
	
		try
		{
			connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
			
			if (dialogMode == AUTOMOBILE_MODE) { 
				preparedStatement = connection.prepareStatement("INSERT INTO AUTXNPRM (CUST_ID, TIME_STAMP, PLATE_NO, EXP_DATE, TXN_TYPE, PROC_TYPE, COMPANY_NAME, OWNERSHIP) SELECT CUST_ID, DATE_FORMAT(now(),'%Y%m%d%H%i%s'), PLATE_NO, NEW_EXP_DATE, 'RENEWAL', 'READY', COMPANY_NAME, OWNERSHIP FROM AUTXNPRM WHERE CUST_ID = ? AND TIME_STAMP = ?;");
												
				preparedStatement.setString(1, tempID);
				preparedStatement.setString(2, time_stamp);
			}
			else if (dialogMode == HOME_MODE) { 
				preparedStatement = connection.prepareStatement("INSERT INTO HOTXNPRM (CUST_ID, TIME_STAMP, SIGXP_NO, EXP_DATE, TXN_TYPE, PROC_TYPE, COMPANY_NAME, OWNERSHIP) SELECT CUST_ID, DATE_FORMAT(now(),'%Y%m%d%H%i%s'), SIGXP_NO, NEW_EXP_DATE, 'RENEWAL', 'READY', COMPANY_NAME, OWNERSHIP FROM HOTXNPRM WHERE CUST_ID = ? AND TIME_STAMP = ?;");
								
				preparedStatement.setString(1, tempID);
				preparedStatement.setString(2, time_stamp);
			}
			else if (dialogMode == COMMERCIAL_MODE) { 
				preparedStatement = connection.prepareStatement("INSERT INTO COTXNPRM (CUST_ID, TIME_STAMP, EXP_DATE, TXN_TYPE, PROC_TYPE, COMPANY_NAME, OWNERSHIP) SELECT CUST_ID, DATE_FORMAT(now(),'%Y%m%d%H%i%s'), NEW_EXP_DATE, 'RENEWAL', 'READY', COMPANY_NAME, OWNERSHIP FROM COTXNPRM WHERE CUST_ID = ? AND TIME_STAMP = ?;"); // 14
								
				preparedStatement.setString(1, tempID);
				preparedStatement.setString(2, time_stamp);
			}
		//			       the mysql insert statement
			result = preparedStatement.executeUpdate();
		}
		catch (SQLException e)
		{
			System.out.println("insertMember" +  e.getStackTrace());
			JOptionPane.showMessageDialog(jFrame, "insert member error");
		}
	
		finally
		{
			closeDatabase();
		}
	
		return (result > 0) ? true : false;
	}
	
	public static void main (String[] args) {
		new CustomerCare();
	}
	
	class MemberDialog {		
		
		Calendar calendar = Calendar.getInstance();
		
		JDialog jDialog = new JDialog(jFrame, "Customer Info Input");
		JDialog jDialogForAuto = new JDialog(jFrame, "Automobile Info Input");
		JDialog jDialogForHome = new JDialog(jFrame, "Home Info Input");
		JDialog jDialogForTravel = new JDialog(jFrame, "Travel Info Input");
		JDialog jDialogForCommercial = new JDialog(jFrame, "Commercial Info Input");
		JDialog jDialogUpdate = new JDialog(jFrame, "Update");

		JButton submitButton = new JButton("Register");
		JButton cancelButton = new JButton("Cancel");
		
		JPanel fieldNamePanel = new JPanel(new GridLayout(0,1));
		JPanel fieldValuePanel = new JPanel(new GridLayout(0,1));
		JPanel buttonPanel = new JPanel(new FlowLayout());
		JPanel buttonPanelForAuto = new JPanel(new FlowLayout());
		JPanel idPanel = new JPanel(new BorderLayout());
		JPanel idPanelForAuto = new JPanel(new BorderLayout());
		JPanel timeStampPanelForAuto = new JPanel(new BorderLayout());
		JPanel premiumPanelForAuto = new JPanel(new BorderLayout());

		JLabel idLabel = new JLabel("ID");
		JLabel lastNameLabel = new JLabel("Last Name");
		JLabel firstNameLabel = new JLabel("First Name");
		JLabel cellLabel= new JLabel("Phone #");
		JLabel birthDateLabel= new JLabel("Birth Date");
		JLabel emailLabel = new JLabel("Email");
		JLabel priCustIDLabel = new JLabel("Primary ID");
		JLabel memoLabel = new JLabel("Memo");
		JLabel postalCdLabel = new JLabel("Postal Code");
		JLabel addrStNumLabel = new JLabel("Address");
		JLabel addrPvNumLabel = new JLabel("City/Prov.");
		
		JLabel idLabelForAuto = new JLabel("ID");
		JLabel timeStampLabel = new JLabel("Time Stamp");
		JLabel txnTypeLabel = new JLabel("Txn Type");
		JLabel plateNoLabel = new JLabel("Plate Number");
		JLabel docNoLabel = new JLabel("Doc Number");
		JLabel expDatelabel = new JLabel("Expiry Date");
		JLabel newExpDatelabel = new JLabel("New Expiry Date");
		JLabel procTypeLabel = new JLabel("Proc Type");
		JLabel premiumLabel = new JLabel("Premium");
		JLabel textDateTime = new JLabel("Text Date");
		JLabel callDateTime = new JLabel("Call Date");
		JLabel visitDateTime = new JLabel("Visit Date");
		JLabel completeDateLabel = new JLabel("Complete Date");
		JLabel companyNameLabel = new JLabel("Company Name");
		JLabel onwerLabel = new JLabel("Owner");
		
		JLabel effDateLabel = new JLabel("Eff Date");
		JLabel sigxpNoLabel = new JLabel("Sigxp No");
		JLabel mailDateTimeLabel = new JLabel("Mail Date");
		JLabel crtDateTimeLabel = new JLabel("Crt Date Time");
		
		JTextField idField = new JTextField(20);
		JTextField lastNameField = new JTextField(20);
		JTextField firstNameField = new JTextField(20);
		JTextField cellField = new JTextField(20);
		JComboBox birthDateTextField = new JComboBox();
		JTextField emailTextField = new JTextField(20);
		JTextField priCustIDTextField = new JTextField(20);
		JTextArea memoTextField = new JTextArea();
		JScrollPane memoTextFieldArea = new JScrollPane(memoTextField);
		JTextField postalCdField = new JTextField(20);
		JTextField addrStrtNumTextField = new JTextField(20);
		JTextField addrPvNumTextField = new JTextField(20);

		JTextField idFieldForAuto = new JTextField(20);
		JTextField idFieldForHome = new JTextField(20);
		JTextField idFieldForTravel = new JTextField(20);
		JTextField idFieldForCommercial = new JTextField(20);		
		JTextField timeStampField = new JTextField(20);
		String[] txnTypeStrings = {"NEW BIZ", "RENEWAL", "CHANGE", "CANCEL"};
		String[] txnTypeStringsForAutomobile = {"NEW PLATE", "RENEWAL", "TRANSFER", "CHANGE", "FINANC", "CANCEL"};
		JComboBox txnTypeField = new JComboBox(txnTypeStrings);
		JComboBox txnTypeFieldForAuto = new JComboBox(txnTypeStringsForAutomobile);
		JTextField plateNoField = new JTextField(20);
		JTextField docNoField = new JTextField(20);
		JComboBox<DateItem> expDateField = new JComboBox<DateItem>();
		JComboBox newExpDateField = new JComboBox();
		String[] procTypeStrings = { "READY", "ONGOING", "WAITING", "RESERVED", "COMPLETE", "SUCCESS", "FAIL", "NEXT", "AMEND", "CHANGE" };
		JComboBox procTypeField = new JComboBox(procTypeStrings);
		JTextField premiumField = new JTextField(20);
		JTextField premiumFieldForAuto = new JTextField(20);
		JTextField premiumFieldForHome = new JTextField(20);
		JTextField premiumFieldForTravel = new JTextField(20);
		JTextField premiumFieldForCommercial = new JTextField(20);
		JComboBox textDateTimeField = new JComboBox();
		JComboBox callDateTimeField = new JComboBox();
		JComboBox visitDateTimeField = new JComboBox();
		JComboBox completeDateField = new JComboBox();
		JTextField companyNameField = new JTextField();
		JTextField ownerField = new JTextField(20);
		
		JComboBox effDateField = new JComboBox();
		JComboBox mailDateTimeField = new JComboBox();
		JTextField sigxpNoField = new JTextField(20);
		JComboBox crtDateTimeField = new JComboBox();

		int dialogMode = NEW_MODE;

		MemberDialog(int newInfo, int dialogMode) {			
			
			if (dialogMode == NEW_MODE) {
				if (newInfo == CUSTOMER_MODE) {
					fieldNamePanel.add(idLabel);
					fieldNamePanel.add(lastNameLabel);
					fieldNamePanel.add(firstNameLabel);
					fieldNamePanel.add(cellLabel);
					fieldNamePanel.add(birthDateLabel);
					fieldNamePanel.add(emailLabel);
					fieldNamePanel.add(priCustIDLabel);
					fieldNamePanel.add(postalCdLabel);
					fieldNamePanel.add(addrStNumLabel);
					fieldNamePanel.add(addrPvNumLabel);
					fieldNamePanel.add(memoLabel);
	
					fieldValuePanel.add(idPanel);
					fieldValuePanel.add(lastNameField);
					fieldValuePanel.add(firstNameField);
					fieldValuePanel.add(cellField);
					fieldValuePanel.add(birthDateTextField);
					fieldValuePanel.add(emailField);		
					fieldValuePanel.add(priCustIDTextField);
					fieldValuePanel.add(postalCdField);
					fieldValuePanel.add(addrStrtNumTextField);
					fieldValuePanel.add(addrPvNumTextField);
					fieldValuePanel.add(memoTextFieldArea);
					memoTextField.setLineWrap(true);
					memoTextField.setWrapStyleWord(true);
					
					for (int i = 0; i < 28; ++i) {
						birthDateTextField.addItem(new DateItem(calendar.getTime()));
					    calendar.add(Calendar.DATE, 1);
					}
					
					idPanel.add(idField);
					idField.setEnabled(false);//to disable further editing of ID when creating a new profile
					idField.setText(CustomerCare.this.idCheck());
					
					buttonPanel.add(submitButton);
					buttonPanel.add(cancelButton);
	
					jDialog.getContentPane().add(fieldValuePanel, "Center");
					jDialog.getContentPane().add(fieldNamePanel, "West");
					jDialog.getContentPane().add(buttonPanel, "South");
					
					jDialog.setVisible(true);
					jDialog.setSize(286, 456);
					jDialog.setLocationRelativeTo(jFrame);
					jDialog.setResizable(false);
				}		
				else if (newInfo == AUTOMOBILE_MODE) {
					fieldNamePanel.add(idLabel);
					fieldNamePanel.add(timeStampLabel);
					fieldNamePanel.add(txnTypeLabel);
					fieldNamePanel.add(plateNoLabel);
					fieldNamePanel.add(docNoLabel);
					fieldNamePanel.add(expDatelabel);
					fieldNamePanel.add(newExpDatelabel);
					fieldNamePanel.add(procTypeLabel);
					fieldNamePanel.add(premiumLabel);
					fieldNamePanel.add(textDateTime);
					fieldNamePanel.add(callDateTime);
					fieldNamePanel.add(visitDateTime);
					fieldNamePanel.add(completeDateLabel);
					fieldNamePanel.add(companyNameLabel);
					fieldNamePanel.add(onwerLabel);
					fieldNamePanel.add(postalCdLabel);
					fieldNamePanel.add(addrStNumLabel);
					fieldNamePanel.add(addrPvNumLabel);
					fieldNamePanel.add(memoLabel);

					fieldValuePanel.add(idPanelForAuto);
					fieldValuePanel.add(timeStampPanelForAuto);
					fieldValuePanel.add(txnTypeField);
					fieldValuePanel.add(plateNoField);
					fieldValuePanel.add(docNoField);
					fieldValuePanel.add(expDateField);
					fieldValuePanel.add(newExpDateField);	
					fieldValuePanel.add(procTypeField);
					fieldValuePanel.add(premiumPanelForAuto);
					fieldValuePanel.add(textDateTimeField);
					fieldValuePanel.add(callDateTimeField);
					fieldValuePanel.add(visitDateTimeField);
					fieldValuePanel.add(completeDateField);	
					fieldValuePanel.add(companyNameField);	
					fieldValuePanel.add(ownerField);	
					fieldValuePanel.add(postalCdField);
					fieldValuePanel.add(addrStrtNumTextField);
					fieldValuePanel.add(addrPvNumTextField);
					fieldValuePanel.add(memoTextFieldArea);
					memoTextField.setLineWrap(true);
					memoTextField.setWrapStyleWord(true);
					
					for (int i = 0; i < 28; ++i) {
						expDateField.addItem(new DateItem(calendar.getTime()));
						textDateTimeField.addItem(new DateItem(calendar.getTime()));
						visitDateTimeField.addItem(new DateItem(calendar.getTime()));
						callDateTimeField.addItem(new DateItem(calendar.getTime()));
						newExpDateField.addItem(new DateItem(calendar.getTime()));
						completeDateField.addItem(new DateItem(calendar.getTime()));
					    calendar.add(Calendar.DATE, 1);
					}
					
					timeStampPanelForAuto.add(timeStampField);
					timeStampField.setEnabled(false);
					timeStampField.setText(CustomerCare.this.timeStampCheck());
																	
					idPanelForAuto.add(idFieldForAuto);
					idFieldForAuto.setEnabled(false);//to disable further editing of ID when creating a new profile
					idFieldForAuto.setText(idTextField.getText().trim());
					
					premiumPanelForAuto.add(premiumFieldForAuto);
					premiumFieldForAuto.setEnabled(true);//to disable further editing of ID when creating a new profile
					premiumFieldForAuto.setText("0");
					
					buttonPanelForAuto.add(submitButton);
					buttonPanelForAuto.add(cancelButton);
					
					jDialogForAuto.getContentPane().add(fieldValuePanel, "Center");
					jDialogForAuto.getContentPane().add(fieldNamePanel, "West");
					jDialogForAuto.getContentPane().add(buttonPanelForAuto, "South");
	
					jDialogForAuto.pack();
					jDialogForAuto.setVisible(true);
					jDialogForAuto.setSize(301, 514);
					jDialogForAuto.setLocationRelativeTo(jFrame);
					jDialogForAuto.setResizable(false);
				}
				else if (newInfo == HOME_MODE) {
					
					fieldNamePanel.add(idLabel);
					fieldNamePanel.add(timeStampLabel);
					fieldNamePanel.add(expDatelabel);
					fieldNamePanel.add(newExpDatelabel);					
					fieldNamePanel.add(txnTypeLabel);
					fieldNamePanel.add(procTypeLabel);
					fieldNamePanel.add(sigxpNoLabel);					
					fieldNamePanel.add(premiumLabel);
					fieldNamePanel.add(textDateTime);
					fieldNamePanel.add(callDateTime);
					fieldNamePanel.add(visitDateTime);
					fieldNamePanel.add(completeDateLabel);
					fieldNamePanel.add(companyNameLabel);
					fieldNamePanel.add(onwerLabel);
					fieldNamePanel.add(postalCdLabel);
					fieldNamePanel.add(addrStNumLabel);
					fieldNamePanel.add(addrPvNumLabel);
					fieldNamePanel.add(memoLabel);

					fieldValuePanel.add(idPanelForAuto);
					fieldValuePanel.add(timeStampPanelForAuto);
					fieldValuePanel.add(expDateField);
					fieldValuePanel.add(newExpDateField);					
					fieldValuePanel.add(txnTypeField);
					fieldValuePanel.add(procTypeField);
					fieldValuePanel.add(sigxpNoField);					
					fieldValuePanel.add(premiumPanelForAuto);
					fieldValuePanel.add(textDateTimeField);
					fieldValuePanel.add(callDateTimeField);
					fieldValuePanel.add(visitDateTimeField);
					fieldValuePanel.add(completeDateField);	
					fieldValuePanel.add(companyNameField);	
					fieldValuePanel.add(ownerField);	
					fieldValuePanel.add(postalCdField);
					fieldValuePanel.add(addrStrtNumTextField);
					fieldValuePanel.add(addrPvNumTextField);											
					fieldValuePanel.add(memoTextFieldArea);
					memoTextField.setLineWrap(true);
					memoTextField.setWrapStyleWord(true);
					
					for (int i = 0; i < 28; ++i) {
						expDateField.addItem(new DateItem(calendar.getTime()));
						textDateTimeField.addItem(new DateItem(calendar.getTime()));
						visitDateTimeField.addItem(new DateItem(calendar.getTime()));
						callDateTimeField.addItem(new DateItem(calendar.getTime()));
						newExpDateField.addItem(new DateItem(calendar.getTime()));
						completeDateField.addItem(new DateItem(calendar.getTime()));
					    calendar.add(Calendar.DATE, 1);
					}
					
					idPanelForAuto.add(idFieldForHome);
					idFieldForHome.setEnabled(false);//to disable further editing of ID when creating a new profile
					idFieldForHome.setText(idTextField.getText().trim());
					
					premiumPanelForAuto.add(premiumFieldForHome);
					premiumFieldForHome.setEnabled(true);//to disable further editing of ID when creating a new profile
					premiumFieldForHome.setText("0");

					timeStampPanelForAuto.add(timeStampField);
					timeStampField.setEnabled(false);
					timeStampField.setText(CustomerCare.this.timeStampCheck());
					
					buttonPanelForAuto.add(submitButton);
					buttonPanelForAuto.add(cancelButton);
					
					jDialogForHome.getContentPane().add(fieldValuePanel, "Center");
					jDialogForHome.getContentPane().add(fieldNamePanel, "West");
					jDialogForHome.getContentPane().add(buttonPanelForAuto, "South");
	
					jDialogForHome.pack();
					jDialogForHome.setVisible(true);
					jDialogForHome.setSize(301, 514);
					jDialogForHome.setLocationRelativeTo(jFrame);
					jDialogForHome.setResizable(false);
				}
				else if (newInfo == TRAVEL_MODE){
					fieldNamePanel.add(idLabel);
					fieldNamePanel.add(timeStampLabel);
					fieldNamePanel.add(effDateLabel);
					fieldNamePanel.add(expDatelabel);
					fieldNamePanel.add(txnTypeLabel);
					fieldNamePanel.add(procTypeLabel);
					fieldNamePanel.add(premiumLabel);
					fieldNamePanel.add(textDateTime);
					fieldNamePanel.add(callDateTime);
					fieldNamePanel.add(mailDateTimeLabel);
					fieldNamePanel.add(completeDateLabel);
					fieldNamePanel.add(companyNameLabel);
					fieldNamePanel.add(onwerLabel);
					fieldNamePanel.add(memoLabel);

					fieldValuePanel.add(idPanelForAuto);
					fieldValuePanel.add(timeStampPanelForAuto);					
					fieldValuePanel.add(effDateField);
					fieldValuePanel.add(expDateField);
					fieldValuePanel.add(txnTypeField);
					fieldValuePanel.add(procTypeField);
					fieldValuePanel.add(premiumPanelForAuto);
					fieldValuePanel.add(textDateTimeField);
					fieldValuePanel.add(callDateTimeField);
					fieldValuePanel.add(mailDateTimeField);
					fieldValuePanel.add(completeDateField);	
					fieldValuePanel.add(companyNameField);	
					fieldValuePanel.add(ownerField);	
					fieldValuePanel.add(memoTextFieldArea);
					memoTextField.setLineWrap(true);
					memoTextField.setWrapStyleWord(true);
					
					for (int i = 0; i < 28; ++i) {
						effDateField.addItem(new DateItem(calendar.getTime()));
						expDateField.addItem(new DateItem(calendar.getTime()));
						textDateTimeField.addItem(new DateItem(calendar.getTime()));
						callDateTimeField.addItem(new DateItem(calendar.getTime()));
						mailDateTimeField.addItem(new DateItem(calendar.getTime()));
						completeDateField.addItem(new DateItem(calendar.getTime()));
					    calendar.add(Calendar.DATE, 1);
					}
																	
					idPanelForAuto.add(idFieldForTravel);
					idFieldForTravel.setEnabled(false);//to disable further editing of ID when creating a new profile
					idFieldForTravel.setText(idTextField.getText().trim());
					
					premiumPanelForAuto.add(premiumFieldForTravel);
					premiumFieldForTravel.setEnabled(true);//to disable further editing of ID when creating a new profile
					premiumFieldForTravel.setText("0");
					
					timeStampPanelForAuto.add(timeStampField);
					timeStampField.setEnabled(false);
					timeStampField.setText(CustomerCare.this.timeStampCheck());
					
					buttonPanelForAuto.add(submitButton);
					buttonPanelForAuto.add(cancelButton);
					
					jDialogForTravel.getContentPane().add(fieldValuePanel, "Center");
					jDialogForTravel.getContentPane().add(fieldNamePanel, "West");
					jDialogForTravel.getContentPane().add(buttonPanelForAuto, "South");
	
					jDialogForTravel.pack();
					jDialogForTravel.setVisible(true);
					jDialogForTravel.setSize(301, 514);
					jDialogForTravel.setLocationRelativeTo(jFrame);
					jDialogForTravel.setResizable(false);
				}
				else if (newInfo == COMMERCIAL_MODE){
					System.out.println("CommercialMode");
					fieldNamePanel.add(idLabel);
					fieldNamePanel.add(timeStampLabel);
					fieldNamePanel.add(expDatelabel);
					fieldNamePanel.add(newExpDatelabel);
					fieldNamePanel.add(txnTypeLabel);
					fieldNamePanel.add(procTypeLabel);
					fieldNamePanel.add(premiumLabel);
					fieldNamePanel.add(textDateTime);
					fieldNamePanel.add(callDateTime);
					fieldNamePanel.add(visitDateTime);
					fieldNamePanel.add(completeDateLabel);
					fieldNamePanel.add(companyNameLabel);
					fieldNamePanel.add(onwerLabel);
					fieldNamePanel.add(memoLabel);

					fieldValuePanel.add(idPanelForAuto);
					fieldValuePanel.add(timeStampPanelForAuto);					
					fieldValuePanel.add(expDateField);
					fieldValuePanel.add(newExpDateField);
					fieldValuePanel.add(txnTypeField);
					fieldValuePanel.add(procTypeField);
					fieldValuePanel.add(premiumPanelForAuto);
					fieldValuePanel.add(textDateTimeField);
					fieldValuePanel.add(callDateTimeField);
					fieldValuePanel.add(visitDateTimeField);
					fieldValuePanel.add(completeDateField);	
					fieldValuePanel.add(companyNameField);	
					fieldValuePanel.add(ownerField);	
					fieldValuePanel.add(memoTextFieldArea);
					memoTextField.setLineWrap(true);
					memoTextField.setWrapStyleWord(true);
																
					for (int i = 0; i < 28; ++i) {
						expDateField.addItem(new DateItem(calendar.getTime()));
						textDateTimeField.addItem(new DateItem(calendar.getTime()));
						visitDateTimeField.addItem(new DateItem(calendar.getTime()));
						callDateTimeField.addItem(new DateItem(calendar.getTime()));
						newExpDateField.addItem(new DateItem(calendar.getTime()));
						completeDateField.addItem(new DateItem(calendar.getTime()));
					    calendar.add(Calendar.DATE, 1);
					}
					
					idPanelForAuto.add(idFieldForCommercial);
					idFieldForCommercial.setEnabled(false);//to disable further editing of ID when creating a new profile
					idFieldForCommercial.setText(idTextField.getText().trim());
					
					premiumPanelForAuto.add(premiumFieldForCommercial);
					premiumFieldForCommercial.setEnabled(true);//to disable further editing of ID when creating a new profile
					premiumFieldForCommercial.setText("0.00");
					
					timeStampPanelForAuto.add(timeStampField);
					timeStampField.setEnabled(false);
					timeStampField.setText(CustomerCare.this.timeStampCheck());
					
					buttonPanelForAuto.add(submitButton);
					buttonPanelForAuto.add(cancelButton);
					
					jDialogForCommercial.getContentPane().add(fieldValuePanel, "Center");
					jDialogForCommercial.getContentPane().add(fieldNamePanel, "West");
					jDialogForCommercial.getContentPane().add(buttonPanelForAuto, "South");
	
					jDialogForCommercial.pack();
					jDialogForCommercial.setVisible(true);
					jDialogForCommercial.setSize(301, 514);
					jDialogForCommercial.setLocationRelativeTo(jFrame);
					jDialogForCommercial.setResizable(false);
				}
			}
			else if (dialogMode == EDIT_MODE) {
				if (newInfo == CUSTOMER_MODE) {
					fieldNamePanel.add(idLabel);
					fieldNamePanel.add(lastNameLabel);
					fieldNamePanel.add(firstNameLabel);
					fieldNamePanel.add(cellLabel);
					fieldNamePanel.add(birthDateLabel);
					fieldNamePanel.add(emailLabel);
					fieldNamePanel.add(priCustIDLabel);
					fieldNamePanel.add(postalCdLabel);
					fieldNamePanel.add(addrStNumLabel);
					fieldNamePanel.add(addrPvNumLabel);
					fieldNamePanel.add(memoLabel);
	
					fieldValuePanel.add(idPanel);
					fieldValuePanel.add(lastNameField);
					fieldValuePanel.add(firstNameField);
					fieldValuePanel.add(cellField);
					fieldValuePanel.add(birthDateTextField);
					fieldValuePanel.add(emailTextField);		
					fieldValuePanel.add(priCustIDTextField);
					fieldValuePanel.add(postalCdField);
					fieldValuePanel.add(addrStrtNumTextField);
					fieldValuePanel.add(addrPvNumTextField);
					fieldValuePanel.add(memoTextFieldArea);
					memoTextField.setLineWrap(true);
					memoTextField.setWrapStyleWord(true);
					
					idPanel.add(idField);
					idField.setEnabled(false);//to disable further editing of ID when creating a new profile
					idField.setText(String.valueOf(defaultTableModel_Personal_Info.getValueAt(jTable_Personal_Info.getSelectedRow(), 0)));
					
					try {
						
						connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
						
						statement = connection.createStatement();
					
						System.out.println("time stamp = " +  String.valueOf(defaultTableModel_Personal_Info.getValueAt(jTable_Personal_Info.getSelectedRow(), 0)));
						
						resultSet = statement.executeQuery("SELECT * FROM CCCUSTOM where CCCUSTOM.CUST_ID = \"" + String.valueOf(defaultTableModel_Personal_Info.getValueAt(jTable_Personal_Info.getSelectedRow(), 0)) + "\"");
												
						while (resultSet.next()) {
							String lastName = resultSet.getString(2);
							String firstName = resultSet.getString(3);
							String cellNo = resultSet.getString(4);
							String birthDate = resultSet.getString(5);
							String email = resultSet.getString(6);
							String primaryID = resultSet.getString(7);
							String memo = resultSet.getString(8);
							String postalCD = resultSet.getString(9);
							String addrStrt = resultSet.getString(10);
							String addrPv = resultSet.getString(11);

							lastNameField.setText(lastName);
							firstNameField.setText(firstName);
							cellField.setText(cellNo);
													
							StringBuilder str = new StringBuilder(birthDate);
							System.out.println("birthDate = " + str);

							str.insert(4, '/');
							str.insert(7, '/');
						    String myString2 = str.toString();
							
							DateFormat df = new SimpleDateFormat("yyyy/MM/dd"); 
							Date startDate;
							try {	
								startDate = df.parse(myString2);
								for (int i = 0; i < 28; ++i) {
									birthDateTextField.addItem(new DateItem(startDate)); 
									calendar.setTime(startDate);
									calendar.add(Calendar.DATE, 1);
								}
								
							} catch (ParseException e1) {
								// TODO Auto-generated catch block
								e1.printStackTrace();
							}
							
							emailTextField.setText(email);	
							priCustIDTextField.setText(primaryID);
							memoTextField.setText(memo);
							postalCdField.setText(postalCD);
							addrStrtNumTextField.setText(addrStrt);
							addrPvNumTextField.setText(addrPv);	
						}
						
						if (defaultTableModel_House_Info.getRowCount() > 0) {
							jTable_House_Info.setRowSelectionInterval(0, 0);
						}
						
					} catch (SQLException e) {
						System.out.println("submitMember" +  e.getStackTrace());
					}
					
					buttonPanel.add(submitButton);
					buttonPanel.add(cancelButton);
	
					jDialogUpdate.getContentPane().add(fieldValuePanel, "Center");
					jDialogUpdate.getContentPane().add(fieldNamePanel, "West");
					jDialogUpdate.getContentPane().add(buttonPanel, "South");
					
					jDialogUpdate.setVisible(true);
					jDialogUpdate.setSize(286, 456);
					jDialogUpdate.setLocationRelativeTo(jFrame);
					jDialogUpdate.setResizable(false);
				}
				else if (newInfo == AUTOMOBILE_MODE) {
					fieldNamePanel.add(idLabel);
					fieldNamePanel.add(timeStampLabel);
					fieldNamePanel.add(txnTypeLabel);
					fieldNamePanel.add(plateNoLabel);
					fieldNamePanel.add(docNoLabel);
					fieldNamePanel.add(expDatelabel);
					fieldNamePanel.add(newExpDatelabel);
					fieldNamePanel.add(procTypeLabel);
					fieldNamePanel.add(premiumLabel);
					fieldNamePanel.add(textDateTime);
					fieldNamePanel.add(callDateTime);
					fieldNamePanel.add(visitDateTime);
					fieldNamePanel.add(completeDateLabel);
					fieldNamePanel.add(companyNameLabel);
					fieldNamePanel.add(onwerLabel);
					fieldNamePanel.add(postalCdLabel);
					fieldNamePanel.add(addrStNumLabel);
					fieldNamePanel.add(addrPvNumLabel);
					fieldNamePanel.add(memoLabel);
					
					fieldValuePanel.add(idPanelForAuto);
					fieldValuePanel.add(timeStampField);
					fieldValuePanel.add(txnTypeFieldForAuto);
					fieldValuePanel.add(plateNoField);
					fieldValuePanel.add(docNoField);
					fieldValuePanel.add(expDateField);
					fieldValuePanel.add(newExpDateField);	
					fieldValuePanel.add(procTypeField);
					fieldValuePanel.add(premiumFieldForAuto);
					fieldValuePanel.add(textDateTimeField);
					fieldValuePanel.add(callDateTimeField);
					fieldValuePanel.add(visitDateTimeField);
					fieldValuePanel.add(completeDateField);	
					fieldValuePanel.add(companyNameField);	
					fieldValuePanel.add(ownerField);	
					fieldValuePanel.add(postalCdField);
					fieldValuePanel.add(addrStrtNumTextField);
					fieldValuePanel.add(addrPvNumTextField);
					fieldValuePanel.add(memoTextFieldArea);
					memoTextField.setLineWrap(true);
					memoTextField.setWrapStyleWord(true);
					
					idPanelForAuto.add(idFieldForAuto);
					idFieldForAuto.setEnabled(false);//to disable further editing of ID when creating a new profile
					idFieldForAuto.setText(String.valueOf(defaultTableModel_Personal_Info.getValueAt(jTable_Personal_Info.getSelectedRow(), 0)));
					
					timeStampField.setText(String.valueOf(defaultTableModel_Automobile_Info.getValueAt(jTable_Automobile_Info.getSelectedRow(), 1)));
					timeStampField.setEnabled(false);//to disable further editing of ID when creating a new profile
	
					try {
					
						connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
						
						statement = connection.createStatement();
					
						System.out.println("time stamp = " + timeStampField.getText().trim() + "id = " + idFieldForHome.getText().trim());
						
						resultAutomobileSet = statement.executeQuery("SELECT * FROM AUTXNPRM where AUTXNPRM.CUST_ID = \"" + idTextField.getText().trim() + "\" AND TIME_STAMP = \"" + timeStampField.getText().trim() + "\"");
												
						while (resultAutomobileSet.next()) {
							String txnType = resultAutomobileSet.getString(3);
							String plateNo = resultAutomobileSet.getString(4);
							String docNo = resultAutomobileSet.getString(5);
							String expDate = resultAutomobileSet.getString(6);
							String newExpDate = resultAutomobileSet.getString(7);
							String procType = resultAutomobileSet.getString(8);
							String premiumForAuto = resultAutomobileSet.getString(9);
							String textDateTime = resultAutomobileSet.getString(10);
							String callDateTime = resultAutomobileSet.getString(11);
							String visitDateTime = resultAutomobileSet.getString(12);
							String completeDate = resultAutomobileSet.getString(13);
							String companyName = resultAutomobileSet.getString(14);
							String owner = resultAutomobileSet.getString(15);
							String memoText = resultAutomobileSet.getString(16);
							String postalCd = resultAutomobileSet.getString(17);
							String addrStrtNumText = resultAutomobileSet.getString(18);
							String addrPvNumText = resultAutomobileSet.getString(19);

							txnTypeFieldForAuto.setSelectedItem(txnType);
							plateNoField.setText(plateNo);
							docNoField.setText(docNo);
							expDateField.setSelectedItem(expDate);
							newExpDateField.setSelectedItem(newExpDate);	
							procTypeField.setSelectedItem(procType);
							premiumFieldForAuto.setText(premiumForAuto);
							textDateTimeField.setSelectedItem(textDateTime);
							callDateTimeField.setSelectedItem(callDateTime);
							visitDateTimeField.setSelectedItem(visitDateTime);	
							completeDateField.setSelectedItem(completeDate);
							companyNameField.setText(companyName);	
							ownerField.setText(owner);
							memoTextField.setText(memoText);
							postalCdField.setText(postalCd);
							addrStrtNumTextField.setText(addrStrtNumText);
							addrPvNumTextField.setText(addrPvNumText);	
						}
						
						if (defaultTableModel_House_Info.getRowCount() > 0) {
							jTable_House_Info.setRowSelectionInterval(0, 0);
						}
						
					} catch (SQLException e) {
						System.out.println("submitMember" +  e.getStackTrace());
					}
					
					buttonPanel.add(submitButton);
					buttonPanel.add(cancelButton);
	
					jDialogUpdate.getContentPane().add(fieldValuePanel, "Center");
					jDialogUpdate.getContentPane().add(fieldNamePanel, "West");
					jDialogUpdate.getContentPane().add(buttonPanel, "South");
					
					jDialogUpdate.setVisible(true);
					jDialogUpdate.setSize(286, 456);
					jDialogUpdate.setLocationRelativeTo(jFrame);
					jDialogUpdate.setResizable(false);
				}
				else if (newInfo == HOME_MODE) {
					
					fieldNamePanel.add(idLabel);
					fieldNamePanel.add(timeStampLabel);
					fieldNamePanel.add(expDatelabel);
					fieldNamePanel.add(newExpDatelabel);					
					fieldNamePanel.add(txnTypeLabel);
					fieldNamePanel.add(procTypeLabel);
					fieldNamePanel.add(sigxpNoLabel);					
					fieldNamePanel.add(premiumLabel);
					fieldNamePanel.add(textDateTime);
					fieldNamePanel.add(callDateTime);
					fieldNamePanel.add(visitDateTime);
					fieldNamePanel.add(completeDateLabel);
					fieldNamePanel.add(companyNameLabel);
					fieldNamePanel.add(onwerLabel);
					fieldNamePanel.add(postalCdLabel);
					fieldNamePanel.add(addrStNumLabel);
					fieldNamePanel.add(addrPvNumLabel);
					fieldNamePanel.add(memoLabel);

					fieldValuePanel.add(idPanel);
					fieldValuePanel.add(timeStampField);
					fieldValuePanel.add(expDateField);
					fieldValuePanel.add(newExpDateField);					
					fieldValuePanel.add(txnTypeField);
					fieldValuePanel.add(procTypeField);
					fieldValuePanel.add(sigxpNoField);					
					fieldValuePanel.add(premiumFieldForHome);
					fieldValuePanel.add(textDateTimeField);
					fieldValuePanel.add(callDateTimeField);
					fieldValuePanel.add(visitDateTimeField);
					fieldValuePanel.add(completeDateField);	
					fieldValuePanel.add(companyNameField);	
					fieldValuePanel.add(ownerField);	
					fieldValuePanel.add(postalCdField);
					fieldValuePanel.add(addrStrtNumTextField);
					fieldValuePanel.add(addrPvNumTextField);		
					fieldValuePanel.add(memoTextFieldArea);
					memoTextField.setLineWrap(true);
					memoTextField.setWrapStyleWord(true);
					
					idPanel.add(idFieldForHome);
					idFieldForHome.setEnabled(false);//to disable further editing of ID when creating a new profile
					idFieldForHome.setText(String.valueOf(defaultTableModel_Personal_Info.getValueAt(jTable_Personal_Info.getSelectedRow(), 0)));
					
					timeStampField.setText(String.valueOf(defaultTableModel_House_Info.getValueAt(jTable_House_Info.getSelectedRow(), 1)));
					timeStampField.setEnabled(false);
					
					try {
					
						connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
						
						statement = connection.createStatement();
					
						System.out.println("time stamp = " + timeStampField.getText().trim() + "id = " + idFieldForHome.getText().trim());
						
						resultHomeSet = statement.executeQuery("SELECT * FROM HOTXNPRM where HOTXNPRM.CUST_ID = \"" + idFieldForHome.getText().trim() + "\" AND TIME_STAMP = \"" + timeStampField.getText().trim() + "\"");
												
						while (resultHomeSet.next()) {
							String expDate = resultHomeSet.getString(3);
							String newExpDate = resultHomeSet.getString(4);
							String txnType = resultHomeSet.getString(5);
							String procType = resultHomeSet.getString(6);
							String sigxpNo = resultHomeSet.getString(7);
							String premium = resultHomeSet.getString(8);
							String textDateTime = resultHomeSet.getString(9);
							String callDateTime = resultHomeSet.getString(10);
							String visitDateTime = resultHomeSet.getString(11);
							String completeDate = resultHomeSet.getString(12);
							String companyName = resultHomeSet.getString(13);
							String owner = resultHomeSet.getString(14);
							String memo = resultHomeSet.getString(15);
							String postalCD = resultHomeSet.getString(16);
							String addrStNm = resultHomeSet.getString(17);
							String addrPvNm = resultHomeSet.getString(18);

							expDateField.setSelectedItem(expDate);
							newExpDateField.setSelectedItem(newExpDate);
							txnTypeField.setSelectedItem(txnType);
							procTypeField.setSelectedItem(procType);
							sigxpNoField.setText(sigxpNo);
							premiumFieldForHome.setText(premium);
							completeDateField.setSelectedItem(completeDate);	
							companyNameField.setText(companyName);
							ownerField.setText(owner);
							memoTextField.setText(memo);
							
							textDateTimeField.setSelectedItem(textDateTime);
							callDateTimeField.setSelectedItem(callDateTime);
							visitDateTimeField.setSelectedItem(visitDateTime);	
							
							postalCdField.setText(postalCD);
							addrStrtNumTextField.setText(addrStNm);	
							addrPvNumTextField.setText(addrPvNm);
						}
						
						if (defaultTableModel_House_Info.getRowCount() > 0) {
							jTable_House_Info.setRowSelectionInterval(0, 0);
						}
						
					} catch (SQLException e) {
						System.out.println("submitMember" +  e.getStackTrace());
					}
					
					buttonPanel.add(submitButton);
					buttonPanel.add(cancelButton);
	
					jDialogUpdate.getContentPane().add(fieldValuePanel, "Center");
					jDialogUpdate.getContentPane().add(fieldNamePanel, "West");
					jDialogUpdate.getContentPane().add(buttonPanel, "South");
					
					jDialogUpdate.setVisible(true);
					jDialogUpdate.setSize(286, 456);
					jDialogUpdate.setLocationRelativeTo(jFrame);
					jDialogUpdate.setResizable(false);
				}
				else if (newInfo == TRAVEL_MODE) {
					fieldNamePanel.add(idLabel);
					fieldNamePanel.add(timeStampLabel);
					fieldNamePanel.add(effDateLabel);
					fieldNamePanel.add(expDatelabel);
					fieldNamePanel.add(txnTypeLabel);
					fieldNamePanel.add(procTypeLabel);
					fieldNamePanel.add(premiumLabel);
					fieldNamePanel.add(textDateTime);
					fieldNamePanel.add(callDateTime);
					fieldNamePanel.add(mailDateTimeLabel);
					fieldNamePanel.add(completeDateLabel);
					fieldNamePanel.add(companyNameLabel);
					fieldNamePanel.add(onwerLabel);
					fieldNamePanel.add(memoLabel);

					fieldValuePanel.add(idPanel);
					fieldValuePanel.add(timeStampField);					
					fieldValuePanel.add(effDateField);
					fieldValuePanel.add(expDateField);
					fieldValuePanel.add(txnTypeField);
					fieldValuePanel.add(procTypeField);
					fieldValuePanel.add(premiumFieldForTravel);
					fieldValuePanel.add(textDateTimeField);
					fieldValuePanel.add(callDateTimeField);
					fieldValuePanel.add(mailDateTimeField);
					fieldValuePanel.add(completeDateField);	
					fieldValuePanel.add(companyNameField);	
					fieldValuePanel.add(ownerField);	
					fieldValuePanel.add(memoTextFieldArea);
					memoTextField.setLineWrap(true);
					memoTextField.setWrapStyleWord(true);
					
					idPanel.add(idFieldForTravel);
					idFieldForTravel.setEnabled(false);//to disable further editing of ID when creating a new profile
					idFieldForTravel.setText(String.valueOf(defaultTableModel_Personal_Info.getValueAt(jTable_Personal_Info.getSelectedRow(), 0)));
					
					timeStampField.setText(String.valueOf(defaultTableModel_Traveler_Info.getValueAt(jTable_Traveler_Info.getSelectedRow(), 1)));
					timeStampField.setEnabled(false);//to disable further editing of ID when creating a new profile

					try {
						
						connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
						
						statement = connection.createStatement();
					
						System.out.println("time stamp = " + timeStampField.getText().trim() + "id = " + idFieldForHome.getText().trim());
						
						resultTravelSet = statement.executeQuery("SELECT * FROM TRTXNPRM where TRTXNPRM.CUST_ID = \"" + idFieldForTravel.getText().trim() + "\" AND TIME_STAMP = \"" + timeStampField.getText().trim() + "\"");
												
						while (resultTravelSet.next()) {
							String effDate = resultTravelSet.getString(3);
							String expDate = resultTravelSet.getString(4);
							String txnType = resultTravelSet.getString(5);
							String procType = resultTravelSet.getString(6);
							String premium = resultTravelSet.getString(7);
							String textDateTime = resultTravelSet.getString(8);
							String callDateTime = resultTravelSet.getString(9);
							String mailDateTime = resultTravelSet.getString(10);
							String completeDate = resultTravelSet.getString(11);
							String companyName = resultTravelSet.getString(12);
							String owner = resultTravelSet.getString(13);
							String memo = resultTravelSet.getString(14);

							effDateField.setSelectedItem(effDate);
							expDateField.setSelectedItem(expDate);
							txnTypeField.setSelectedItem(txnType);
							procTypeField.setSelectedItem(procType);
							premiumFieldForTravel.setText(premium);	
							textDateTimeField.setSelectedItem(textDateTime);
							callDateTimeField.setSelectedItem(callDateTime);
							mailDateTimeField.setSelectedItem(mailDateTime);	
							completeDateField.setSelectedItem(completeDate);	
							companyNameField.setText(companyName);	
							ownerField.setText(owner);	
							memoTextField.setText(memo);	
						}
						
						if (defaultTableModel_Traveler_Info.getRowCount() > 0) {
							jTable_Traveler_Info.setRowSelectionInterval(0, 0);
						}
						
					} catch (SQLException e) {
						System.out.println("submitMember" +  e.getStackTrace());
					}

					buttonPanel.add(submitButton);
					buttonPanel.add(cancelButton);
	
					jDialogUpdate.getContentPane().add(fieldValuePanel, "Center");
					jDialogUpdate.getContentPane().add(fieldNamePanel, "West");
					jDialogUpdate.getContentPane().add(buttonPanel, "South");
					
					jDialogUpdate.setVisible(true);
					jDialogUpdate.setSize(286, 456);
					jDialogUpdate.setLocationRelativeTo(jFrame);
					jDialogUpdate.setResizable(false);
				}
				else if (newInfo == COMMERCIAL_MODE){
					System.out.println("CommercialMode");
					fieldNamePanel.add(idLabel);
					fieldNamePanel.add(timeStampLabel);
					fieldNamePanel.add(expDatelabel);
					fieldNamePanel.add(newExpDatelabel);
					fieldNamePanel.add(txnTypeLabel);
					fieldNamePanel.add(procTypeLabel);
					fieldNamePanel.add(premiumLabel);
					fieldNamePanel.add(textDateTime);
					fieldNamePanel.add(callDateTime);
					fieldNamePanel.add(visitDateTime);
					fieldNamePanel.add(completeDateLabel);
					fieldNamePanel.add(companyNameLabel);
					fieldNamePanel.add(onwerLabel);
					fieldNamePanel.add(memoLabel);

					fieldValuePanel.add(idPanelForAuto);
					fieldValuePanel.add(timeStampField);					
					fieldValuePanel.add(expDateField);
					fieldValuePanel.add(newExpDateField);
					fieldValuePanel.add(txnTypeField);
					fieldValuePanel.add(procTypeField);
					fieldValuePanel.add(premiumPanelForAuto);
					fieldValuePanel.add(textDateTimeField);
					fieldValuePanel.add(callDateTimeField);
					fieldValuePanel.add(visitDateTimeField);
					fieldValuePanel.add(completeDateField);	
					fieldValuePanel.add(companyNameField);	
					fieldValuePanel.add(ownerField);	
					fieldValuePanel.add(memoTextFieldArea);
					memoTextField.setLineWrap(true);
					memoTextField.setWrapStyleWord(true);
																	
					idPanelForAuto.add(idFieldForCommercial);
					idFieldForCommercial.setEnabled(false);//to disable further editing of ID when creating a new profile
					idFieldForCommercial.setText(customerID);
					
					premiumPanelForAuto.add(premiumFieldForCommercial);
					premiumFieldForCommercial.setEnabled(true);//to disable further editing of ID when creating a new profile
					premiumFieldForCommercial.setText("0");

					timeStampField.setText(String.valueOf(defaultTableModel_Commercial_Info.getValueAt(jTable_Commercial_Info.getSelectedRow(), 1)));
					timeStampField.setEnabled(false);
					
					try {
						
						connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
						
						statement = connection.createStatement();
					
						System.out.println("time stamp = " + timeStampField.getText().trim() + "id = " + idFieldForCommercial.getText().trim());
						
						resultCommercialInfoSet = statement.executeQuery("SELECT * FROM COTXNPRM where CUST_ID = \"" + idFieldForCommercial.getText().trim() + "\" AND TIME_STAMP = \"" + timeStampField.getText().trim() + "\"");
												
						while (resultCommercialInfoSet.next()) {
							String expDate = resultCommercialInfoSet.getString(3);
							String newExpDate = resultCommercialInfoSet.getString(4);
							String txnType = resultCommercialInfoSet.getString(5);
							String procType = resultCommercialInfoSet.getString(6);
							String premium = resultCommercialInfoSet.getString(7);
							String textDateTime = resultCommercialInfoSet.getString(8);
							String callDateTime = resultCommercialInfoSet.getString(9);
							String visitDateTime = resultCommercialInfoSet.getString(10);
							String completeDate = resultCommercialInfoSet.getString(11);
							String companyName = resultCommercialInfoSet.getString(12);
							String owner = resultCommercialInfoSet.getString(13);
							String memo = resultCommercialInfoSet.getString(14);

							expDateField.setSelectedItem(expDate);
							newExpDateField.setSelectedItem(newExpDate);
							txnTypeField.setSelectedItem(txnType);
							procTypeField.setSelectedItem(procType);
							premiumFieldForCommercial.setText(premium);
							textDateTimeField.setSelectedItem(textDateTime);
							callDateTimeField.setSelectedItem(callDateTime);
							visitDateTimeField.setSelectedItem(visitDateTime);
							completeDateField.setSelectedItem(completeDate);	
							companyNameField.setText(companyName);
							ownerField.setText(owner);
							memoTextField.setText(memo);
						}
						
						if (defaultTableModel_House_Info.getRowCount() > 0) {
							jTable_House_Info.setRowSelectionInterval(0, 0);
						}
						
					} catch (SQLException e) {
						System.out.println("submitMember11" +  e.getStackTrace());
					}
					
					buttonPanelForAuto.add(submitButton);
					buttonPanelForAuto.add(cancelButton);
					
					jDialogForCommercial.getContentPane().add(fieldValuePanel, "Center");
					jDialogForCommercial.getContentPane().add(fieldNamePanel, "West");
					jDialogForCommercial.getContentPane().add(buttonPanelForAuto, "South");
	
					jDialogForCommercial.pack();
					jDialogForCommercial.setVisible(true);
					jDialogForCommercial.setSize(301, 514);
					jDialogForCommercial.setLocationRelativeTo(jFrame);
					jDialogForCommercial.setResizable(false);
				}
				submitButton.setText("Update");	
				
			}
			else if (dialogMode == INSERT_MODE) {
				if (newInfo == AUTOMOBILE_MODE) {
					if (CustomerCare.this.insertMemberForOther(AUTOMOBILE_MODE, String.valueOf(defaultTableModel_Automobile_Info.getValueAt(jTable_Automobile_Info.getSelectedRow(), 0)), String.valueOf(defaultTableModel_Automobile_Info.getValueAt(jTable_Automobile_Info.getSelectedRow(), 1)))) {
						JOptionPane.showMessageDialog(jDialogUpdate, "Succesfully Created!");
						selectAutomobileInfo(String.valueOf(defaultTableModel_Personal_Info.getValueAt(jTable_Personal_Info.getSelectedRow(), 0)));
					}
				}
				else if (newInfo == HOME_MODE) {
					if (CustomerCare.this.insertMemberForOther(HOME_MODE, String.valueOf(defaultTableModel_House_Info.getValueAt(jTable_House_Info.getSelectedRow(), 0)), String.valueOf(defaultTableModel_House_Info.getValueAt(jTable_House_Info.getSelectedRow(), 1)))) {
						JOptionPane.showMessageDialog(jDialogUpdate, "Succesfully Created!");
						selectHomeInfo(String.valueOf(defaultTableModel_Personal_Info.getValueAt(jTable_Personal_Info.getSelectedRow(), 0)));
					}
				}
				else if (newInfo == COMMERCIAL_MODE) {
					if (CustomerCare.this.insertMemberForOther(COMMERCIAL_MODE, String.valueOf(defaultTableModel_Commercial_Info.getValueAt(jTable_Commercial_Info.getSelectedRow(), 0)), String.valueOf(defaultTableModel_Commercial_Info.getValueAt(jTable_Commercial_Info.getSelectedRow(), 1)))) {
						JOptionPane.showMessageDialog(jDialogUpdate, "Succesfully Created!");
						selectCommercialInfo(String.valueOf(defaultTableModel_Personal_Info.getValueAt(jTable_Personal_Info.getSelectedRow(), 0)));
					}
				}
				jDialogUpdate.dispose();
			}
			
			// 301 514
			submitButton.addActionListener(new ActionListener()
			{
				@Override
				public void actionPerformed(ActionEvent e) {
					if (newInfo == CUSTOMER_MODE) {
						if (lastNameField.getText().trim().length() == 0 ) {
							JOptionPane.showMessageDialog(jDialog, "Please input last name!");
							lastNameField.requestFocus();
						}
						else if (firstNameField.getText().trim().length() == 0) {
							JOptionPane.showMessageDialog(jDialog, "Please input first name!");
							firstNameField.requestFocus();
						}
						else { // No Error						
							System.out.println(memoTextField.getText().trim());
							
							if (CustomerCare.this.submitMember(dialogMode, idTextField.getText().trim(), lastNameField.getText().trim(), 
															  firstNameField.getText().trim(), cellField.getText().trim(), (String)birthDateTextField.getSelectedItem(),
															  emailTextField.getText().trim(), priCustIDTextField.getText().trim(), memoTextField.getText().trim(), 
															  postalCdField.getText().trim(), addrStrtNumTextField.getText().trim(), addrPvNumTextField.getText().trim())) {
								if (dialogMode == NEW_MODE) {
									JOptionPane.showMessageDialog(jDialog, "Register Completed!");
								}
								else if (dialogMode == EDIT_MODE){
									JOptionPane.showMessageDialog(jDialogUpdate, "Succesfully Updated!");
									selectDetailedInfo(idField.getText().trim());
								}
								
								jDialogUpdate.dispose();
								jDialog.dispose();
							}						
						}
					// submit button을 누를때, automobile이 
					}
					else if (newInfo == AUTOMOBILE_MODE) {
						System.out.println("hello1");
						if (plateNoField.getText().trim().length() == 0 ) {
							JOptionPane.showMessageDialog(jDialog, "Please input plate number!");
							plateNoField.requestFocus();
						}
						else if (expDateField.getSelectedItem().toString().length() == 0) {
							JOptionPane.showMessageDialog(jDialog, "Please input expiry date!");
							expDateField.requestFocus();
						}
						else { // No Error			
							System.out.println("asdfasdf" + (String)txnTypeFieldForAuto.getSelectedItem());
							if (CustomerCare.this.submitMemberForAuto(dialogMode, idFieldForAuto.getText().trim(), timeStampField.getText().trim(), (String)txnTypeFieldForAuto.getSelectedItem(),
																	 plateNoField.getText().trim(), docNoField.getText().trim(), expDateField.getSelectedItem().toString(), newExpDateField.getSelectedItem().toString(), 
																	 (String)procTypeField.getSelectedItem(), premiumFieldForAuto.getText().trim(), expDateField.getSelectedItem().toString(), expDateField.getSelectedItem().toString(), 
																	 expDateField.getSelectedItem().toString(), expDateField.getSelectedItem().toString(), companyNameField.getText().trim(), ownerField.getText().trim(), 
																	 memoTextField.getText().trim(), postalCdField.getText().trim(), addrStrtNumTextField.getText().trim(), addrPvNumTextField.getText().trim())) {
								if (dialogMode == NEW_MODE) {
									JOptionPane.showMessageDialog(jDialogForAuto, "Register Completed!");
								}
								else if (dialogMode == EDIT_MODE){
									JOptionPane.showMessageDialog(jDialogUpdate, "Succesfully Updated!");
									selectAutomobileInfo(idFieldForAuto.getText().trim());
								}
								
								jDialogForAuto.dispose();
								jDialogUpdate.dispose();
							}						
						}
					}
					else if (newInfo 	== HOME_MODE) {
						if (expDateField.getSelectedItem().toString().length() == 0 ) {
							JOptionPane.showMessageDialog(jDialog, "Please input expiry date!");
							expDateField.requestFocus();
						}
						else if (txnTypeFieldForAuto.getSelectedItem().toString().length() == 0) {
							JOptionPane.showMessageDialog(jDialog, "Please input txn type!");
							txnTypeField.requestFocus();
						}
						else { // No Error	
							if (CustomerCare.this.submitMemberForHome(dialogMode, idFieldForHome.getText().trim(), timeStampField.getText().trim(), expDateField.getSelectedItem().toString(), newExpDateField.getSelectedItem().toString(), 
																	(String)txnTypeField.getSelectedItem(), (String)procTypeField.getSelectedItem(), sigxpNoField.getText().trim(), premiumFieldForHome.getText().trim(), textDateTimeField.getSelectedItem().toString(), 
																	callDateTimeField.getSelectedItem().toString(), visitDateTimeField.getSelectedItem().toString(), completeDateField.getSelectedItem().toString(), companyNameField.getText().trim(), 
																	ownerField.getText().trim(), memoTextField.getText().trim(), postalCdField.getText().trim(), addrStrtNumTextField.getText().trim(), addrPvNumTextField.getText().trim())) {								
								if (dialogMode == NEW_MODE) {
									JOptionPane.showMessageDialog(jDialogForHome, "Register Completed!");
								}
								else {
									JOptionPane.showMessageDialog(jDialogUpdate, "Succesfully Updated!");
									selectHomeInfo(idFieldForHome.getText().trim());
								}
								
								jDialogUpdate.dispose();
								jDialogForHome.dispose();
							}						
						}
					}
					else if (newInfo == TRAVEL_MODE) {
						if (txnTypeField.getSelectedItem().toString().length() == 0 ) {
							JOptionPane.showMessageDialog(jDialog, "Please input Txn Type!");
							txnTypeField.requestFocus();
						}
						else if (expDateField.getSelectedItem().toString().length() == 0) {
							JOptionPane.showMessageDialog(jDialog, "Please input expiry date!");
							expDateField.requestFocus();
						}
						else { // No Error			
							System.out.println("premiumField = " + premiumField.getText().trim());
							if (CustomerCare.this.submitMemberForTravel(dialogMode, idFieldForTravel.getText().trim(), timeStampField.getText().trim(), effDateField.getSelectedItem().toString(), 
																	 expDateField.getSelectedItem().toString(), (String)txnTypeField.getSelectedItem(), (String)procTypeField.getSelectedItem(), premiumFieldForTravel.getText().trim(), textDateTimeField.getSelectedItem().toString(),
																	 callDateTimeField.getSelectedItem().toString(), mailDateTimeField.getSelectedItem().toString(), completeDateField.getSelectedItem().toString(), companyNameField.getText().trim(), ownerField.getText().trim(), 
																	 memoTextField.getText().trim())) {								
								if (dialogMode == NEW_MODE) {
									JOptionPane.showMessageDialog(jDialogForTravel, "Register Completed!");
								}
								else {
									JOptionPane.showMessageDialog(jDialogUpdate, "Succesfully Updated!");
									selectTravelInfo(idFieldForTravel.getText().trim());
								}
								jDialogUpdate.dispose();
								jDialogForTravel.dispose();
							}						
						}
					}
					else if (newInfo == COMMERCIAL_MODE) {
						if (txnTypeField.getSelectedItem().toString().length() == 0 ) {
							JOptionPane.showMessageDialog(jDialog, "Please input Txn Type!");
							txnTypeField.requestFocus();
						}
						else if (expDateField.getSelectedItem().toString().length() == 0) {
							JOptionPane.showMessageDialog(jDialog, "Please input expiry date!");
							expDateField.requestFocus();
						}
						else { // No Error			
							System.out.println("premiumField = " + premiumField.getText().trim());
							if (CustomerCare.this.submitMemberForCommercial(dialogMode, idFieldForCommercial.getText().trim(), timeStampField.getText().trim(), expDateField.getSelectedItem().toString(), newExpDateField.getSelectedItem().toString(),  
																	(String)txnTypeField.getSelectedItem(), (String)procTypeField.getSelectedItem(), premiumFieldForCommercial.getText().trim(), textDateTimeField.getSelectedItem().toString(),
																	 callDateTimeField.getSelectedItem().toString(), visitDateTimeField.getSelectedItem().toString(), completeDateField.getSelectedItem().toString(), companyNameField.getText().trim(), ownerField.getText().trim(), 
																	 memoTextField.getText().trim())) {								
								if (dialogMode == NEW_MODE) {
									JOptionPane.showMessageDialog(jDialogForCommercial, "Register Completed!");
								}
								else {
									JOptionPane.showMessageDialog(jDialogUpdate, "Succesfully Updated!");
									selectCommercialInfo(idFieldForCommercial.getText().trim());
								}
								jDialogForCommercial.dispose();
								jDialogUpdate.dispose();
							}						
						}
					}
				}			
			});

			cancelButton.addActionListener(new ActionListener()
			{
				@Override
				public void actionPerformed(ActionEvent e)
				{
					jDialog.dispose();
					jDialogForAuto.dispose();
					jDialogUpdate.dispose();
					jDialogForTravel.dispose();
					jDialogForHome.dispose();
					jDialogForCommercial.dispose();

				}			
			});
		}

		public boolean isNumber(String s)
		{
			
			try
			{
				Integer.valueOf(s);
				return true;
			}
			catch(NumberFormatException e)
			{
				return false;
			}
		}
	}
	public class DateItem {

	    private Date mDate;

	    public DateItem(Date date) {
	        mDate = date;
	    }

	    public Date getDate() {
	        return mDate;
	    }

	    @Override
	    public String toString() {

	        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");

	        return sdf.format(mDate);
	    }
	}
}