package customerCare;

import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Scanner;

import javax.swing.AbstractButton;
import javax.swing.JOptionPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

public class CustomerCare {	
	
	public DatabaseConstant databaseConstant = new DatabaseConstant();
	
	public String customerID;
	public String priCustID;
	
	public CustomerCare() {
		 				
		GUIForCustomerCare.jTextField.addKeyListener(new KeyAdapter() {
			public void keyPressed(KeyEvent e) {
			    if (e.getKeyCode() == KeyEvent.VK_ENTER) {
					if (GUIForCustomerCare.jTextField.getText().trim().length() > 0)
					{
						if (GUIForCustomerCare.customerButton.isSelected()) {
							searchMember(databaseConstant.SEARCH_CUSTOMER, GUIForCustomerCare.jTextField.getText().trim());
						}
						else if (GUIForCustomerCare.allButton.isSelected()) {
							searchMember(databaseConstant.SEARCH_ALL, GUIForCustomerCare.jTextField.getText().trim());
						}
						GUIForCustomerCare.jButton.setText("Search");
					}
					else
					{
						JOptionPane.showMessageDialog(GUIForCustomerCare.jFrame, "Please enter search word!");
					}
			    }
			}
		});
		
		GUIForCustomerCare.jButtonOpen.addActionListener(new ActionListener() {
						
	        	@Override
	        	public void actionPerformed(ActionEvent e)
	        	{	
	        			        		
	        		final String prefix = GUIForCustomerCare.idTextField.getText() + "_";
						        			        		
	        		if (GUIForCustomerCare.tabbedPane.getSelectedIndex() == 0) {
	        			
	        			List<String> results = new ArrayList<String>();
	        				        			        			
	    				File dir = new File("/Users/Kang/Desktop/Auto");
	    				
	    				dir.listFiles(new FileFilter() {
	    				    @Override
	    				    public boolean accept(File pathname) {
	    				    		
	    				    		int count = results.size();
	    				    	
	    						System.out.println("candidates = " + pathname.getName().startsWith(prefix));
	    						  if (pathname.getName().startsWith(prefix)) {		    								
	    							  try {
	    								  System.out.println("file name = " + pathname.getName());
	    								  Desktop.getDesktop().open(new File(dir + "/" + pathname.getName()));
	    								  results.add(pathname.getName());
	    								  System.out.println("results = " + results.subList(0, 1));
	    								  
	    								  count = results.size();
	    								  
	    								  System.out.println("count size = " + results.size());
	    							  } catch (IOException e) {
	    								  e.printStackTrace();
	    							  }
	    						  }
	    						  if (count == 0) {
	    							  try {
	    								  Runtime.getRuntime().exec("cd " + dir);
	    								  Runtime.getRuntime().exec("mkdir " + dir + "/" + prefix + GUIForCustomerCare.LastNameTextField.getText() + GUIForCustomerCare.firstNameTextField.getText());
	    								  Runtime.getRuntime().exec("open " + dir + "/" + prefix + GUIForCustomerCare.LastNameTextField.getText() + GUIForCustomerCare.firstNameTextField.getText());

	    							  } catch (IOException e) {
	    								  e.printStackTrace();
	    							  } 
	    						  }
	    						  return pathname.getName().startsWith(prefix);
	    				    } 
	    				});		    				
	        		}
	        		else if (GUIForCustomerCare.tabbedPane.getSelectedIndex() == 1) {
	        			
	    				File dir = new File("/Users/Kang/Desktop/House");
	    				Utilities.fileOpen(dir);
	        		}	        		
	        		else if (GUIForCustomerCare.tabbedPane.getSelectedIndex() == 2) {
	        			
	    				File dir = new File("/Users/Kang/Desktop/Travel");
	    				Utilities.fileOpen(dir);
	        		}	        		
	        		else if (GUIForCustomerCare.tabbedPane.getSelectedIndex() == 3) {
	        			
	    				File dir = new File("/Users/Kang/Desktop/Commercial");
	    				Utilities.fileOpen(dir);
	        		}
	        		
	        	}
	    });
		
		GUIForCustomerCare.jButtonBackUp.addActionListener(new ActionListener() {
			
			private int numClicks = 0;
			
	        	@Override
	        	public void actionPerformed(ActionEvent e)
	        	{	
	        		numClicks++;
	        		
	        		if (numClicks == 2 || numClicks == 1) {
		        		try
		        		{
		        			Utilities.connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
		        			
		        			Utilities.statement = Utilities.connection.createStatement();
		        			
		        			Utilities.resultSet = Utilities.statement.executeQuery("SELECT * FROM CCCUSTOM;");
	
	        				File file = new File("backup.csv");
	        				        				
	        			    FileWriter writer = new FileWriter(file); 
		        			
	        				writer.write("Customer ID" + "," + "Last Name" + "," + "First Name" + "," + "Phone Num" + "," + "Birth Date" + "," + "Email" +"," + "PriCustID" + "," + "Memo" + "," + "Postal Cd" + "," + "AddrStNm"+ "," + "AddrPvNm" + "," + "Chg Date Time" + "\r\n");
		    	        		        					    	        			    	        		
		        			while (Utilities.resultSet.next()) {			
		            				
		    					String customerID = Utilities.resultSet.getString(1);
		    					String lastName = Utilities.resultSet.getString(2);
		    					String firstName = Utilities.resultSet.getString(3);
		    					String phoneNum = Utilities.resultSet.getString(4);
		    					String birthDate = Utilities.resultSet.getString(5);
		    					String email = Utilities.resultSet.getString(6);
		    					String priCustID = Utilities.resultSet.getString(7);
		    					String memo = Utilities.resultSet.getString(8);
		    					String postalCD = Utilities.resultSet.getString(9);
		    					String addrStNm = Utilities.resultSet.getString(10);
		    					String addrPvNm = Utilities.resultSet.getString(11);
		    					String chgDateTime = Utilities.resultSet.getString(12);
		    					
		        				try {
		        					
		    	        			    file.createNewFile();
		    	        			      	    	        			            	        					            
		    	        				writer.write(customerID + "," + lastName + "," + firstName + "," + phoneNum + "," + birthDate + "," + email + "," + priCustID + "," + memo + "," + postalCD + "," + addrStNm + "," + addrPvNm + "," + chgDateTime + "\r\n");
		        				}
		    	        				
		        	        		catch (IOException e5)
		        	        		{
		        	        			System.out.println("SQLException - back up Button 1 " +  e5.getStackTrace());
		        	        		}
		    				}
		        			
	        			    writer.flush();
	        			    writer.close(); 
		        		}
		        		
		        		catch (SQLException | IOException e5)
		        		{
		        			System.out.println("SQLException - back up Button  - customer " +  e5.getStackTrace());
		        		}
		        		
		        		try
		        		{
		        			Utilities.connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
		        			
		        			Utilities.statement = Utilities.connection.createStatement();
		        			
		        			Utilities.resultAutomobileSet = Utilities.statement.executeQuery("SELECT * FROM AUTXNPRM ORDER BY 1,2;");
	
	        				File file = new File("backupforAuto.csv");
	        				        				
	        			    FileWriter writer = new FileWriter(file); 
		        			
	        			    writer.write("Customer ID" + "," + "Time Stamp" + "," + "Txn Type" + "," + "Plate No" + "," + "Doc No" + "," + "Exp Date" +"," + "New Exp Date" + "," + "Proc Type" + "," + "Premium" + "," + "Text Date Time"+ "," + "Call Date Time" + "," + "Visit Date Time" +  "," + "Complete Date" +  "," + "Company Name" + "," + "Ownership" + "," + "Memo" + "," + "Postal Cd" + "," + "Addr St Nm" +"," + "Addr Pv Nm" +"," + "Chg Date Time" + "\r\n");
	        					        			
		        			while (Utilities.resultAutomobileSet.next()) {			
	            				
		    					String customerID = Utilities.resultAutomobileSet.getString(1);
		    					String timeStamp = Utilities.resultAutomobileSet.getString(2);
		    					String txnType = Utilities.resultAutomobileSet.getString(3);
		    					String plateNo = Utilities.resultAutomobileSet.getString(4);
		    					String docNo = Utilities.resultAutomobileSet.getString(5);
		    					String expDate = Utilities.resultAutomobileSet.getString(6);
		    					String newExpDate = Utilities.resultAutomobileSet.getString(7);
		    					String procType = Utilities.resultAutomobileSet.getString(8);
		    					Double premium = Utilities.resultAutomobileSet.getDouble(9);
		    					String textDateTime = Utilities.resultAutomobileSet.getString(10);
		    					String callDateTime = Utilities.resultAutomobileSet.getString(11);
		    					String visitDateTime = Utilities.resultAutomobileSet.getString(12);
		    					String completeDate = Utilities.resultAutomobileSet.getString(13);
		    					String companyname = Utilities.resultAutomobileSet.getString(14);
		    					String ownership = Utilities.resultAutomobileSet.getString(15);
		    					String memo = Utilities.resultAutomobileSet.getString(16);
		    					String postalCd = Utilities.resultAutomobileSet.getString(17);
		    					String addrStNm = Utilities.resultAutomobileSet.getString(18);
		    					String addrPvNm = Utilities.resultAutomobileSet.getString(19);
		    					String chgDateTime = Utilities.resultAutomobileSet.getString(20);
		    					
		        				try {
		        					
		    	        			    file.createNewFile();
		    	        			      	    	        			            	        					            
		    	        				writer.write(customerID + "," + timeStamp + "," + txnType + "," + plateNo + "," + docNo + "," + expDate + "," + newExpDate + "," + procType + "," + premium + "," + textDateTime + "," + callDateTime + "," + visitDateTime + "," + completeDate +"," + companyname + "," + ownership + "," + memo +"," + postalCd + "," + addrStNm + "," + addrPvNm +"," + chgDateTime + "\r\n");
		        				}
		    	        				
		        	        		catch (IOException e5)
		        	        		{
		        	        			System.out.println("SQLException - back up Button  " +  e5.getStackTrace());
		        	        		}
		    				}
		        			
	        			    writer.flush();
	        			    writer.close();        			            			    
		        		}
		        		
		        		catch (SQLException | IOException e5)
		        		{
		        			System.out.println("SQLException - back up Button - AutomobileSet " +  e5.getStackTrace());
		        		}
		        		//---------------------------------------------Travel
		        		try
		        		{
		        			Utilities.connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
		        			
		        			Utilities.statement = Utilities.connection.createStatement();
	
		        			Utilities.resultTravelSet = Utilities.statement.executeQuery("SELECT * FROM TRTXNPRM ORDER BY 1,2;");
		        			
	        				File file = new File("backupForTravel.csv");
	        				        				
	        			    FileWriter writer = new FileWriter(file); 
		        			   				
	        				writer.write("Customer ID" + "," + "Time Stamp" + "," + "Eff Date" + "," + "Exp Date" + "," + "Txn Type" + "," + "Proc Type" +"," + "Premium" + "," + "Text Date Time" + "," + "Call Date Time" + "," + "Mail Date Time"+ "," + "Complete Date" + "," + "Company Name" + "," + "Ownership" +"," + "Memo" +"," + "Chg Date Time" +"," + "Policy No" + "\r\n");
	        					    	        			        			
		        			while (Utilities.resultTravelSet.next()) {			
	            				
		    					String customerID = Utilities.resultTravelSet.getString(1);
		    					String timeStamp = Utilities.resultTravelSet.getString(2);
		    					String effDate = Utilities.resultTravelSet.getString(3);
		    					String expDate = Utilities.resultTravelSet.getString(4);
		    					String txnType = Utilities.resultTravelSet.getString(5);
		    					String procType = Utilities.resultTravelSet.getString(6);
		    					Double premium = Utilities.resultTravelSet.getDouble(7);
		    					String textDateTime = Utilities.resultTravelSet.getString(8);
		    					String callDateTime = Utilities.resultTravelSet.getString(9);
		    					String mailDateTime = Utilities.resultTravelSet.getString(10);
		    					String completeDate = Utilities.resultTravelSet.getString(11);
		    					String companyname = Utilities.resultTravelSet.getString(12);
		    					String ownership = Utilities.resultTravelSet.getString(13);
		    					String memo = Utilities.resultTravelSet.getString(14);
		    					String chgDateTime = Utilities.resultTravelSet.getString(15);
		    					String policyNo = Utilities.resultTravelSet.getString(16);
		    					
		        				try {
		        					
		    	        			    file.createNewFile();
		    	        			      	    	        			            	        					            
		    	        				writer.write(customerID + "," + timeStamp + "," + effDate + "," + expDate + "," + txnType + "," + procType + "," + premium + "," + textDateTime + "," + callDateTime + "," + mailDateTime + "," + completeDate + "," + companyname + "," + ownership +"," + memo +"," + chgDateTime +"," + policyNo + "\r\n");
		        				}
		    	        				
		        	        		catch (IOException e5)
		        	        		{
		        	        			System.out.println("SQLException - back up Button  " +  e5.getStackTrace());
		        	        		}
		    				}
		        			
	        			    writer.flush();
	        			    writer.close();        			            			    
		        		}
		        		
		        		catch (SQLException | IOException e5)
		        		{
		        			System.out.println("SQLException - back up Button - Travel " +  e5.getStackTrace());
		        		}
		        		//---------------------------------------------------- Home
		        		try
		        		{
		        			Utilities.connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
		        			
		        			Utilities.statement = Utilities.connection.createStatement();
		        			
		        			Utilities.resultHomeSet = Utilities.statement.executeQuery("SELECT * FROM HOTXNPRM ORDER BY 1,2;");
	
	        				File file = new File("backupforHome.csv");
	        				        				
	        			    FileWriter writer = new FileWriter(file); 
		        			        				
	        				writer.write("Customer ID" + "," + "Time Stamp" + "," + "Exp Date" + "," + "New Exp Date" + "," + "Txn Type" + "," + "Proc Type" +"," + "Sigxp No" + "," + "Premium" + "," + "Text Date Time" + "," + "Call Date Time"+ "," + "Visit Date Time" + "," + "Complete Date" + "," + "Company Name" +"," + "Ownership" +"," + "Memo" + "," + "Postal Code" + "," + "Addr St Nm" +"," + "Addr Pv Nm" +"," + "Chg Date Time" + "\r\n");        				
		    	        			        			
		        			while (Utilities.resultHomeSet.next()) {			
	            				
		    					String customerID = Utilities.resultHomeSet.getString(1);
		    					String timeStamp = Utilities.resultHomeSet.getString(2);
		    					String expDate = Utilities.resultHomeSet.getString(3);
		    					String newExpDate = Utilities.resultHomeSet.getString(4);
		    					String txnType = Utilities.resultHomeSet.getString(5);
		    					String procType = Utilities.resultHomeSet.getString(6);
		    					String sigxpNo = Utilities.resultHomeSet.getString(7);
		    					Double premium = Utilities.resultHomeSet.getDouble(8);
		    					String textDateTime = Utilities.resultHomeSet.getString(9);
		    					String callDateTime = Utilities.resultHomeSet.getString(10);
		    					String visitDateTime = Utilities.resultHomeSet.getString(11);
		    					String completeDate = Utilities.resultHomeSet.getString(12);
		    					String companyname = Utilities.resultHomeSet.getString(13);
		    					String ownership = Utilities.resultHomeSet.getString(14);
		    					String memo = Utilities.resultHomeSet.getString(15);
		    					String postalCD = Utilities.resultHomeSet.getString(16);
		    					String addrStNm = Utilities.resultHomeSet.getString(17);
		    					String addrPvNm = Utilities.resultHomeSet.getString(18);
		    					String chgDateTime = Utilities.resultHomeSet.getString(19);
		    					
		        				try {
		        					
		    	        			    file.createNewFile();
		    	        			      	    	        			            	        					            
		    	        				writer.write(customerID + "," + timeStamp + "," + expDate + "," + newExpDate + "," + txnType + "," + procType + "," + sigxpNo + "," + premium + "," + textDateTime + "," + callDateTime + "," + visitDateTime + "," + completeDate + "," + companyname + "," + ownership + "," + memo + "," + postalCD + "," + addrStNm + "," + addrPvNm + "," + chgDateTime + "\r\n");
		        				}
		    	        				
		        	        		catch (IOException e5)
		        	        		{
		        	        			System.out.println("SQLException - back up Button  " +  e5.getStackTrace());
		        	        		}
		    				}
		        			
	        			    writer.flush();
	        			    writer.close();
	        			            			    
		        		}
		        		
		        		catch (SQLException | IOException e5)
		        		{
		        			System.out.println("SQLException - back up Button  - home" +  e5.getStackTrace());
		        		}
		        		// --------------------------------------------------------------- Commercial
		        		try
		        		{
		        			Utilities.connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
		        			
		        			Utilities.statement = Utilities.connection.createStatement();
		        			
		        			Utilities.resultCommercialInfoSet = Utilities.statement.executeQuery("SELECT * FROM COTXNPRM ORDER BY 1,2;");
	
	        				File file = new File("backupforCommercial.csv");
	        				        				
	        			    FileWriter writer = new FileWriter(file); 
		        			
	        				writer.write("Customer ID" + "," + "Time Stamp" + "," + "Exp Date" + "," + "New Exp Date" + "," + "Txn Type" + "," + "Proc Type" +"," + "Premium" + "," + "Text Date Time" + "," + "Call Date Time" + "," + "Visit Date Time"+ "," + "Complete Date" + "," + "Company Name" + "," + "Ownership" +"," + "Memo" +"," + "Chg Date Time" +"," + "Sigxp No" + "\r\n");
		    	        			        			
		        			while (Utilities.resultCommercialInfoSet.next()) {			
	            				
		    					String customerID = Utilities.resultCommercialInfoSet.getString(1);
		    					String timeStamp = Utilities.resultCommercialInfoSet.getString(2);
		    					String expDate = Utilities.resultCommercialInfoSet.getString(3);
		    					String newExpDate = Utilities.resultCommercialInfoSet.getString(4);
		    					String txnType = Utilities.resultCommercialInfoSet.getString(5);
		    					String procType = Utilities.resultCommercialInfoSet.getString(6);
		    					Double premium = Utilities.resultCommercialInfoSet.getDouble(7);
		    					String textDateTime = Utilities.resultCommercialInfoSet.getString(8);
		    					String callDateTime = Utilities.resultCommercialInfoSet.getString(9);
		    					String visitDateTime = Utilities.resultCommercialInfoSet.getString(10);
		    					String completeDate = Utilities.resultCommercialInfoSet.getString(11);
		    					String companyname = Utilities.resultCommercialInfoSet.getString(12);
		    					String ownership = Utilities.resultCommercialInfoSet.getString(13);
		    					String memo = Utilities.resultCommercialInfoSet.getString(14);
		    					String chgDateTime = Utilities.resultCommercialInfoSet.getString(15);
		    					String sigxpNo = Utilities.resultCommercialInfoSet.getString(16);
	
		        				try {
		        					
		    	        			    file.createNewFile();
		    	        			      	    	        			            	        					            
		    	        				writer.write(customerID + "," + timeStamp + "," + expDate + "," + newExpDate + "," + txnType + "," + procType + "," + premium + "," + textDateTime + "," + callDateTime + "," + visitDateTime + "," + completeDate + "," + companyname + "," + ownership + "," + memo + "," + chgDateTime + "," + sigxpNo + "\r\n");
		        				}
		    	        				
		        	        		catch (IOException e5)
		        	        		{
		        	        			System.out.println("SQLException - back up Button - Commercial " +  e5.getStackTrace());
		        	        		}
		    				}
		        			
	        			    writer.flush();
	        			    writer.close();
	        			            			    
		        			JOptionPane.showMessageDialog(GUIForCustomerCare.jFrame, "Backup Sucessfull");
		        		}
		        		
		        		catch (SQLException | IOException e5)
		        		{
		        			System.out.println("SQLException - back up Button " +  e5.getStackTrace());
		        		}
		        		
		        		finally
		        		{
		        			Utilities.closeDatabase();
		        		}
		        	}		  
	        	}
	    });
		
		GUIForCustomerCare.jButtonRestore.addActionListener(new ActionListener() {
			
	        private int numClicks = 0;

		    	@Override
		    	public void actionPerformed(ActionEvent e)
		    	{			 
		    		numClicks++;
		    		
		    		if (numClicks == 2 || numClicks == 1) {
			    		try {
			    			
				    	    FileReader in = new FileReader("backup.csv");
				    	    BufferedReader br = new BufferedReader(in);
				    	    			    	    
				    	    Scanner fileScanner = new Scanner(br);
				    	    fileScanner.nextLine();
				    	    			    	    
			    			Utilities.connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
			    									
			    		    while (fileScanner.hasNextLine()) {
			    		    			    	
			    		    		String line = fileScanner.nextLine();
			    		
			    		     	Scanner lineScanner = new Scanner(line);
			    		      
			    		     	lineScanner.useDelimiter(",");
			    		      		      		     			    		     	
			    		     	while (lineScanner.hasNext()) {
			    		        
			    		     		String custID = lineScanner.next();
			    		    			String lastName = lineScanner.next();
			    		    			String firstName = lineScanner.next();
			    		    			String phoneNum = lineScanner.next();
			    		    			String birthDate = lineScanner.next();
			    		    			String email =  lineScanner.next();
			    		    			String priCustID = lineScanner.next();
			    		    			String memo = lineScanner.next();
			    		    			String postalCD = lineScanner.next();
			    		    			String addrStNm = lineScanner.next();
			    		    			String addrPvNm = lineScanner.next();
			    		    			String chgDateTime = lineScanner.next();
			    		    				    					    			
			    					String id = String.format("%010d", Integer.parseInt(custID));
			    	    						    					
			    	    		     	Utilities.preparedStatement = Utilities.connection.prepareStatement("INSERT INTO CCCUSTOM (CUST_ID, LAST_NAME, FIRST_NAME, CELL_NO, BIRTH_DATE, EMAIL, PRI_CUST_ID, MEMO, POSTAL_CD, ADDR_ST_NM, ADDR_PV_NM, CHG_DATE_TIME) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);");
			    	    				
			    					Utilities.preparedStatement.setString(1, id);
			    					Utilities.preparedStatement.setString(2, lastName);
			    					Utilities.preparedStatement.setString(3, firstName);
			    					Utilities.preparedStatement.setString(4, phoneNum);
			    					Utilities.preparedStatement.setString(5, birthDate);
			    					Utilities.preparedStatement.setString(6, email);
			    					Utilities.preparedStatement.setString(7, priCustID);
			    					Utilities.preparedStatement.setString(8, memo);
			    					Utilities.preparedStatement.setString(9, postalCD);
			    					Utilities.preparedStatement.setString(10, addrStNm);
			    					Utilities.preparedStatement.setString(11, addrPvNm);
			    					Utilities.preparedStatement.setString(12, chgDateTime);		
			    					
			    					Utilities.preparedStatement.executeUpdate();
			    		     	}
			    		     	lineScanner.close();
			    		      
			    		     	System.out.println("\n");
			    		    }
			    		    fileScanner.close();
			    		}
			    		catch (SQLException | FileNotFoundException e4)
			    		{
			    			System.out.println("restore - customer" +  e4.getStackTrace());
			    		}
			    		// ----------------------------------------------------Automobile
			    		try {
			    			
				    	    FileReader in = new FileReader("backupforAuto.csv");
				    	    BufferedReader br = new BufferedReader(in);
				    	    
				    	    Scanner fileScanner = new Scanner(br);
				    	    fileScanner.nextLine();
			    							    	    
			    			Utilities.connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
			    									
			    		    while (fileScanner.hasNextLine()) {
			    		    			    	
			    		    		String line = fileScanner.nextLine();
			    		    					    		
			    		     	Scanner lineScanner = new Scanner(line);
			    		      
			    		     	lineScanner.useDelimiter(",");
			    		      		      		     	
			    		     	while (lineScanner.hasNext()) {
			    		        
			    					String customerID = lineScanner.next();
			    					String timeStamp = lineScanner.next();
			    					String txnType = lineScanner.next();
			    					String plateNo = lineScanner.next();
			    					String docNo = lineScanner.next();
			    					String expDate = lineScanner.next();
			    					String newExpDate = lineScanner.next();
			    					String procType = lineScanner.next();
			    					String premium = lineScanner.next();
			    					String textDateTime = lineScanner.next();
			    					String callDateTime = lineScanner.next();
			    					String visitDateTime = lineScanner.next();
			    					String completeDate = lineScanner.next();
			    					String companyname = lineScanner.next();
			    					String ownership = lineScanner.next();
			    					String memo = lineScanner.next();
			    					String postalCd = lineScanner.next();
			    					String addrStNm = lineScanner.next();
			    					String addrPvNm = lineScanner.next();
			    					String chgDateTime = lineScanner.next();
			    								    					
							    	System.out.println("customerID = " + customerID);
							    	System.out.println("premium = " + premium);
							    	
			    					String id = String.format("%010d", Integer.parseInt(customerID));
			    					Double premiumDouble = Double.parseDouble(premium);
			    					
			    					Utilities.preparedStatement = Utilities.connection.prepareStatement("INSERT INTO AUTXNPRM (CUST_ID, TIME_STAMP, TXN_TYPE, PLATE_NO, DOC_NO, EXP_DATE, NEW_EXP_DATE, PROC_TYPE, PREMIUM, TEXT_DATE_TIME, CALL_DATE_TIME, VISIT_DATE_TIME, COMPLETE_DATE, COMPANY_NAME, OWNERSHIP, MEMO, POSTAL_CD, ADDR_ST_NM, ADDR_PV_NM, CHG_DATE_TIME)" + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"); // 19
			    				    
			    					Utilities.preparedStatement.setString(1, id);
			    					Utilities.preparedStatement.setString(2, timeStamp);
			    					Utilities.preparedStatement.setString(3, txnType);
			    					Utilities.preparedStatement.setString(4, plateNo);
			    					Utilities.preparedStatement.setString(5, docNo);
			    					Utilities.preparedStatement.setString(6, expDate);
			    					Utilities.preparedStatement.setString(7, newExpDate);
			    					Utilities.preparedStatement.setString(8, procType);
			    					Utilities.preparedStatement.setDouble(9, premiumDouble);
			    					Utilities.preparedStatement.setString(10, textDateTime);
			    					Utilities.preparedStatement.setString(11, callDateTime);
			    					Utilities.preparedStatement.setString(12, visitDateTime);
			    					Utilities.preparedStatement.setString(13, completeDate);
			    					Utilities.preparedStatement.setString(14, companyname);
			    					Utilities.preparedStatement.setString(15, ownership);
			    					Utilities.preparedStatement.setString(16, memo);
			    					Utilities.preparedStatement.setString(17, postalCd);
			    					Utilities.preparedStatement.setString(18, addrStNm);
			    					Utilities.preparedStatement.setString(19, addrPvNm);	
			    					Utilities.preparedStatement.setString(20, chgDateTime);	
			    					
			    					Utilities.preparedStatement.executeUpdate();
			    					
			    		     	}
			    		     	lineScanner.close();
			    		      
			    		     	System.out.println("\n");
			    		    }
			    		    fileScanner.close();
			    		}
			    		catch (SQLException | FileNotFoundException e6)
			    		{
			    			System.out.println("restore - Automobile" +  e6.getStackTrace());
			    		}
			    		//---------------------------------------------Travel
			    		try {
			    						    			
				    	    FileReader in = new FileReader("backupforTravel.csv");
				    	    BufferedReader br = new BufferedReader(in);
				    	    
				    	    File f = new File("backupforTravel.csv");
				    	    
				    	    System.out.println(f.getAbsolutePath());
				    	    
				    	    Scanner fileScanner = new Scanner(br);
				    	    fileScanner.nextLine();
			    			
			    			Utilities.connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
			    									
			    		    while (fileScanner.hasNextLine()) {
			    		    			    	
			    		    		String line = fileScanner.nextLine();
			    		
			    		     	Scanner lineScanner = new Scanner(line);
			    		      
			    		     	lineScanner.useDelimiter(",");
			    		      		      		     	
			    		     	while (lineScanner.hasNext()) {
			    		        			    		     				    		     		
			    					String customerID = lineScanner.next();
			    					String timeStamp = lineScanner.next();
			    					String effDate = lineScanner.next();
			    					String expDate = lineScanner.next();
			    					String txnType = lineScanner.next();
			    					String procType = lineScanner.next();
			    					String premium = lineScanner.next();
			    					String textDateTime = lineScanner.next();
			    					String callDateTime = lineScanner.next();
			    					String mailDateTime = lineScanner.next();
			    					String completeDate = lineScanner.next();
			    					String companyname = lineScanner.next();
			    					String ownership = lineScanner.next();
			    					String memo = lineScanner.next();
			    					String chgDateTime = lineScanner.next();
			    					String policyNo = lineScanner.next();
			    								    				
			    					System.out.println(policyNo);
			    					
			    					String id = String.format("%010d", Integer.parseInt(customerID));
			    					Float premiumForAuto = Float.parseFloat(premium);
			    	    				
			    					Utilities.preparedStatement = Utilities.connection.prepareStatement("INSERT INTO TRTXNPRM (CUST_ID, TIME_STAMP, EFF_DATE, EXP_DATE, TXN_TYPE, PROC_TYPE, PREMIUM, TEXT_DATE_TIME, CALL_DATE_TIME, MAIL_DATE_TIME, COMPLETE_DATE, COMPANY_NAME, OWNERSHIP, MEMO, CHG_DATE_TIME, POLICY_NO)" + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"); // 19
			    					
			    					Utilities.preparedStatement.setString(1, id);
			    					Utilities.preparedStatement.setString(2, timeStamp);
			    					Utilities.preparedStatement.setString(3, effDate);
			    					Utilities.preparedStatement.setString(4, expDate);
			    					Utilities.preparedStatement.setString(5, txnType);
			    					Utilities.preparedStatement.setString(6, procType);
			    					Utilities.preparedStatement.setFloat(7, premiumForAuto);
			    					Utilities.preparedStatement.setString(8, textDateTime);
			    					Utilities.preparedStatement.setString(9, callDateTime);
			    					Utilities.preparedStatement.setString(10, mailDateTime);
			    					Utilities.preparedStatement.setString(11, completeDate);
			    					Utilities.preparedStatement.setString(12, companyname);
			    					Utilities.preparedStatement.setString(13, ownership);
			    					Utilities.preparedStatement.setString(14, memo);
			    					Utilities.preparedStatement.setString(15, chgDateTime);	
			    					Utilities.preparedStatement.setString(16, policyNo);	
			    					
			    					Utilities.preparedStatement.executeUpdate();
			    		     	}
			    		     	lineScanner.close();
			    		      
			    		     	System.out.println("\n");
			    		    }
			    		    fileScanner.close();
			    		}
			    		catch (SQLException | FileNotFoundException e6)
			    		{
			    			System.out.println("restore - travel" +  e6.getStackTrace());
			    		}
			    		//---------------------------------------------------- Home
			    		try {
			    			
				    	    FileReader in = new FileReader("backupforHome.csv");
				    	    BufferedReader br = new BufferedReader(in);
				    	    
				    	    Scanner fileScanner = new Scanner(br);
				    	    fileScanner.nextLine();
			    			
			    			Utilities.connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
			    									
			    		    while (fileScanner.hasNextLine()) {
			    		    			    	
			    		    		String line = fileScanner.nextLine();
			    		
			    		     	Scanner lineScanner = new Scanner(line);
			    		      
			    		     	lineScanner.useDelimiter(",");
			    		      		      		     	
			    		     	while (lineScanner.hasNext()) {
			    		        
			    					String customerID = lineScanner.next();
			    					String timeStamp = lineScanner.next();
			    					String expDate = lineScanner.next();
			    					String newExpDate = lineScanner.next();
			    					String txnType = lineScanner.next();
			    					String procType = lineScanner.next();
			    					String sigxpNo = lineScanner.next();
			    					String premium = lineScanner.next();
			    					String textDateTime = lineScanner.next();
			    					String callDateTime = lineScanner.next();
			    					String visitDateTime = lineScanner.next();
			    					String completeDate = lineScanner.next();
			    					String companyname = lineScanner.next();
			    					String ownership = lineScanner.next();
			    					String memo = lineScanner.next();
			    					String postalCD = lineScanner.next();
			    					String addrStNm = lineScanner.next();
			    					String addrPvNm = lineScanner.next();
			    					String chgDateTime = lineScanner.next();
			    		    				    					    			
			    					String id = String.format("%010d", Integer.parseInt(customerID));
			    					Float premiumForAuto = Float.parseFloat(premium);
			    	    				
			    					Utilities.preparedStatement = Utilities.connection.prepareStatement("INSERT INTO HOTXNPRM (CUST_ID, TIME_STAMP, EXP_DATE, NEW_EXP_DATE, TXN_TYPE, PROC_TYPE, SIGXP_NO, PREMIUM, TEXT_DATE_TIME, CALL_DATE_TIME, VISIT_DATE_TIME, COMPLETE_DATE, COMPANY_NAME, OWNERSHIP, MEMO, POSTAL_CD, ADDR_ST_NM, ADDR_PV_NM, CHG_DATE_TIME)" + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) "); // 19
	
			    					Utilities.preparedStatement.setString(1, id);
			    					Utilities.preparedStatement.setString(2, timeStamp);
			    					Utilities.preparedStatement.setString(3, expDate);
			    					Utilities.preparedStatement.setString(4, newExpDate);
			    					Utilities.preparedStatement.setString(5, txnType);
			    					Utilities.preparedStatement.setString(6, procType);
			    					Utilities.preparedStatement.setString(7, sigxpNo);
			    					Utilities.preparedStatement.setFloat(8, premiumForAuto);
			    					Utilities.preparedStatement.setString(9, textDateTime);
			    					Utilities.preparedStatement.setString(10, callDateTime);
			    					Utilities.preparedStatement.setString(11, visitDateTime);
			    					Utilities.preparedStatement.setString(12, completeDate);
			    					Utilities.preparedStatement.setString(13, companyname);
			    					Utilities.preparedStatement.setString(14, ownership);
			    					Utilities.preparedStatement.setString(15, memo);
			    					Utilities.preparedStatement.setString(16, postalCD);
			    					Utilities.preparedStatement.setString(17, addrStNm);
			    					Utilities.preparedStatement.setString(18, addrPvNm);
			    					Utilities.preparedStatement.setString(19, chgDateTime);
			    					
			    					Utilities.preparedStatement.executeUpdate();
			    		     	}
			    		     	lineScanner.close();
			    		      
			    		     	System.out.println("\n");
			    		    }
			    		    fileScanner.close();
			    		}
			    		catch (SQLException | FileNotFoundException e6)
			    		{
			    			System.out.println("restore - Home" +  e6.getStackTrace());
			    		}
		        		// --------------------------------------------------------------- Commercial
			    		try {
			    			
				    	    FileReader in = new FileReader("backupforCommercial.csv");
				    	    BufferedReader br = new BufferedReader(in);
				    	    
				    	    Scanner fileScanner = new Scanner(br);
				    	    fileScanner.nextLine();
			    			
			    			Utilities.connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
			    									
			    		    while (fileScanner.hasNextLine()) {
			    		    			    	
			    		    		String line = fileScanner.nextLine();
			    		
			    		     	Scanner lineScanner = new Scanner(line);
			    		      
			    		     	lineScanner.useDelimiter(",");
			    		      		      		     	
			    		     	while (lineScanner.hasNext()) {
			    		        
			    					String customerID = lineScanner.next();
			    					String timeStamp = lineScanner.next();
			    					String expDate = lineScanner.next();
			    					String newExpDate = lineScanner.next();
			    					String txnType = lineScanner.next();
			    					String procType = lineScanner.next();
			    					String premium = lineScanner.next();
			    					String textDateTime = lineScanner.next();
			    					String callDateTime = lineScanner.next();
			    					String visitDateTime = lineScanner.next();
			    					String completeDate = lineScanner.next();
			    					String companyname = lineScanner.next();
			    					String ownership = lineScanner.next();
			    					String memo = lineScanner.next();
			    					String chgDateTime = lineScanner.next();
			    					String sigxpNo = lineScanner.next();
			    		    				    					    			
			    					String id = String.format("%010d", Integer.parseInt(customerID));
			    					Float premiumForAuto = Float.parseFloat(premium);
			    	    				
			    					Utilities.preparedStatement = Utilities.connection.prepareStatement("INSERT INTO COTXNPRM (CUST_ID, TIME_STAMP, EXP_DATE, NEW_EXP_DATE, TXN_TYPE, PROC_TYPE, PREMIUM, TEXT_DATE_TIME, CALL_DATE_TIME, VISIT_DATE_TIME, COMPLETE_DATE, COMPANY_NAME, OWNERSHIP, MEMO, CHG_DATE_TIME, SIGXP_NO)"+ "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"); // 14
			    							    					
			    					Utilities.preparedStatement.setString(1, id);
			    					Utilities.preparedStatement.setString(2, timeStamp);
			    					Utilities.preparedStatement.setString(3, expDate);
			    					Utilities.preparedStatement.setString(4, newExpDate);
			    					Utilities.preparedStatement.setString(5, txnType);
			    					Utilities.preparedStatement.setString(6, procType);
			    					Utilities.preparedStatement.setFloat(7, premiumForAuto);
			    					Utilities.preparedStatement.setString(8, textDateTime);
			    					Utilities.preparedStatement.setString(9, callDateTime);
			    					Utilities.preparedStatement.setString(10, visitDateTime);
			    					Utilities.preparedStatement.setString(11, completeDate);
			    					Utilities.preparedStatement.setString(12, companyname);
			    					Utilities.preparedStatement.setString(13, ownership);
			    					Utilities.preparedStatement.setString(14, memo);
			    					Utilities.preparedStatement.setString(15, chgDateTime);
			    					Utilities.preparedStatement.setString(16, sigxpNo);
			    					
			    					Utilities.preparedStatement.executeUpdate();
			    		     	}
			    		     	lineScanner.close();
			    		      
			    		     	System.out.println("\n");
			    		    }
			    		    fileScanner.close();
			    		    
		        			JOptionPane.showMessageDialog(GUIForCustomerCare.jFrame, "Restore Sucessfull");
	
			    		}
			    		catch (SQLException | FileNotFoundException e6)
			    		{
			    			System.out.println("restore - Commercial" +  e6.getStackTrace());
			    		}
			    		
			    		finally
			    		{
			    			Utilities.closeDatabase();
			    		}
			    	}
		    	}
		});
		
		GUIForCustomerCare.jTable_Claim_Info.addMouseListener(new MouseAdapter(){
		    public void mouseClicked(MouseEvent evnt) {
		        if (evnt.getClickCount() == 1) {
		            if (GUIForCustomerCare.jTable_Claim_Info.getSelectedColumn() != -1) {
		            	
	            			customerID = (String) GUIForCustomerCare.jTable_Claim_Info.getValueAt(GUIForCustomerCare.jTable_Claim_Info.getSelectedRow(), 0);
	            			
	            			// click complete
			            	selectAutomobileInfo(customerID);
			            	selectHomeInfo(customerID);
			            	selectTravelInfo(customerID);
			            	selectDetailedInfo(customerID);
		    				selectFamilyInfo(customerID);
		    				selectCommercialInfo(customerID);
		    				selectCalendarInfo(customerID);
								    						    				
		    				if ((boolean)GUIForCustomerCare.jTable_Claim_Info.getValueAt(GUIForCustomerCare.jTable_Claim_Info.getSelectedRow(), 5).equals("AUTO")) {
		    					GUIForCustomerCare.tabbedPane.setSelectedIndex(0);
		    				}
		    				else if ((boolean)GUIForCustomerCare.jTable_Claim_Info.getValueAt(GUIForCustomerCare.jTable_Claim_Info.getSelectedRow(), 5).equals("HOME")) {
		    					GUIForCustomerCare.tabbedPane.setSelectedIndex(1);
		    				}
		    				else if ((boolean)GUIForCustomerCare.jTable_Claim_Info.getValueAt(GUIForCustomerCare.jTable_Claim_Info.getSelectedRow(), 5).equals("COMM")) {
		    					GUIForCustomerCare.tabbedPane.setSelectedIndex(3);
		    				}
		    				else if ((boolean)GUIForCustomerCare.jTable_Claim_Info.getValueAt(GUIForCustomerCare.jTable_Claim_Info.getSelectedRow(), 5).equals("TRAV")) {
		    					GUIForCustomerCare.tabbedPane.setSelectedIndex(2);
		    				}
	            		}
		         }
		     }
		});
		GUIForCustomerCare.jTable_Reserved_Info.addMouseListener(new MouseAdapter(){
		    public void mouseClicked(MouseEvent evnt) {
		        if (evnt.getClickCount() == 1) {
		            if (GUIForCustomerCare.jTable_Reserved_Info.getSelectedColumn() != -1) {
		            	
	            			customerID = (String) GUIForCustomerCare.jTable_Reserved_Info.getValueAt(GUIForCustomerCare.jTable_Reserved_Info.getSelectedRow(), 0);
	            			
	            			// click complete
			            	selectAutomobileInfo(customerID);
			            	selectHomeInfo(customerID);
			            	selectTravelInfo(customerID);
			            	selectDetailedInfo(customerID);
		    				selectFamilyInfo(customerID);
		    				selectCommercialInfo(customerID);
		    				selectCalendarInfo(customerID);
								    						    				
		    				if ((boolean)GUIForCustomerCare.jTable_Reserved_Info.getValueAt(GUIForCustomerCare.jTable_Reserved_Info.getSelectedRow(), 4).equals("AUTO")) {
		    					GUIForCustomerCare.tabbedPane.setSelectedIndex(0);
		    				}
		    				else if ((boolean)GUIForCustomerCare.jTable_Reserved_Info.getValueAt(GUIForCustomerCare.jTable_Reserved_Info.getSelectedRow(), 4).equals("HOME")) {
		    					GUIForCustomerCare.tabbedPane.setSelectedIndex(1);
		    				}
		    				else if ((boolean)GUIForCustomerCare.jTable_Reserved_Info.getValueAt(GUIForCustomerCare.jTable_Reserved_Info.getSelectedRow(), 4).equals("COMM")) {
		    					GUIForCustomerCare.tabbedPane.setSelectedIndex(3);
		    				}
		    				else if ((boolean)GUIForCustomerCare.jTable_Reserved_Info.getValueAt(GUIForCustomerCare.jTable_Reserved_Info.getSelectedRow(), 4).equals("TRAV")) {
		    					GUIForCustomerCare.tabbedPane.setSelectedIndex(2);
		    				}
	            		}
		         }
		     }
		});
		GUIForCustomerCare.jTable_Complete_Info.addMouseListener(new MouseAdapter(){
		    public void mouseClicked(MouseEvent evnt) {
		        if (evnt.getClickCount() == 1) {
		            if (GUIForCustomerCare.jTable_Complete_Info.getSelectedColumn() != -1) {
		            	
	            			customerID = (String) GUIForCustomerCare.jTable_Complete_Info.getValueAt(GUIForCustomerCare.jTable_Complete_Info.getSelectedRow(), 0);
	            			
	            			// click complete
			            	selectAutomobileInfo(customerID);
			            	selectHomeInfo(customerID);
			            	selectTravelInfo(customerID);
			            	selectDetailedInfo(customerID);
		    				selectFamilyInfo(customerID);
		    				selectCommercialInfo(customerID);
		    				selectCalendarInfo(customerID);
								    						    				
		    				if ((boolean)GUIForCustomerCare.jTable_Complete_Info.getValueAt(GUIForCustomerCare.jTable_Complete_Info.getSelectedRow(), 4).equals("AUTO")) {
		    					GUIForCustomerCare.tabbedPane.setSelectedIndex(0);
		    				}
		    				else if ((boolean)GUIForCustomerCare.jTable_Complete_Info.getValueAt(GUIForCustomerCare.jTable_Complete_Info.getSelectedRow(), 4).equals("HOME")) {
		    					GUIForCustomerCare.tabbedPane.setSelectedIndex(1);
		    				}
		    				else if ((boolean)GUIForCustomerCare.jTable_Complete_Info.getValueAt(GUIForCustomerCare.jTable_Complete_Info.getSelectedRow(), 4).equals("COMM")) {
		    					GUIForCustomerCare.tabbedPane.setSelectedIndex(3);
		    				}
		    				else if ((boolean)GUIForCustomerCare.jTable_Complete_Info.getValueAt(GUIForCustomerCare.jTable_Complete_Info.getSelectedRow(), 4).equals("TRAV")) {
		    					GUIForCustomerCare.tabbedPane.setSelectedIndex(2);
		    				}
	            		}
		         }
		     }
		});
		
		GUIForCustomerCare.jTable_In_Progress_Info.addMouseListener(new MouseAdapter(){
		    public void mouseClicked(MouseEvent evnt) {
		        if (evnt.getClickCount() == 1) {
		            if (GUIForCustomerCare.jTable_In_Progress_Info.getSelectedColumn() != -1) {
		            	
	            			customerID = (String) GUIForCustomerCare.jTable_In_Progress_Info.getValueAt(GUIForCustomerCare.jTable_In_Progress_Info.getSelectedRow(), 0);
	            			
	            			// click complete
			            	selectAutomobileInfo(customerID);
			            	selectHomeInfo(customerID);
			            	selectTravelInfo(customerID);
			            	selectDetailedInfo(customerID);
		    				selectFamilyInfo(customerID);
		    				selectCommercialInfo(customerID);
		    				selectCalendarInfo(customerID);
		    				
		    				if ((boolean)GUIForCustomerCare.jTable_In_Progress_Info.getValueAt(GUIForCustomerCare.jTable_In_Progress_Info.getSelectedRow(), 5).equals("AUTO")) {
		    					GUIForCustomerCare.tabbedPane.setSelectedIndex(0);
		    				}
		    				else if ((boolean)GUIForCustomerCare.jTable_In_Progress_Info.getValueAt(GUIForCustomerCare.jTable_In_Progress_Info.getSelectedRow(), 5).equals("HOME")) {
		    					GUIForCustomerCare.tabbedPane.setSelectedIndex(1);
		    				}
		    				else if ((boolean)GUIForCustomerCare.jTable_In_Progress_Info.getValueAt(GUIForCustomerCare.jTable_In_Progress_Info.getSelectedRow(), 5).equals("TRAV")) {
		    					GUIForCustomerCare.tabbedPane.setSelectedIndex(2);
		    				}
		    				else if ((boolean)GUIForCustomerCare.jTable_In_Progress_Info.getValueAt(GUIForCustomerCare.jTable_In_Progress_Info.getSelectedRow(), 5).equals("COMM")) {
		    					GUIForCustomerCare.tabbedPane.setSelectedIndex(3);
		    				}
		    			}
		         }
		     }
		});
		
		GUIForCustomerCare.jTable_Personal_Info.addMouseListener(new MouseAdapter(){
		    public void mouseClicked(MouseEvent evnt) {
		        if (evnt.getClickCount() == 1) {
		            if (GUIForCustomerCare.jTable_Personal_Info.getSelectedColumn() != -1) {
		            	
	            			customerID =  (String) GUIForCustomerCare.jTable_Personal_Info.getValueAt(GUIForCustomerCare.jTable_Personal_Info.getSelectedRow(), 0);
	            			priCustID = (String) GUIForCustomerCare.priCustIDField.getText().trim();
	            			
	            			// click complete
			            	selectAutomobileInfo(customerID);
			            	selectHomeInfo(customerID);
			            	selectTravelInfo(customerID);
			            	selectDetailedInfo(customerID);
		    				selectFamilyInfo(customerID);
		    				selectCommercialInfo(customerID);
		    				selectCalendarInfo(customerID);
		            	}
		         }
		     }
		});
		
		GUIForCustomerCare.jTable_All_Info.addMouseListener(new MouseAdapter(){
		    public void mouseClicked(MouseEvent evnt) {
		        if (evnt.getClickCount() == 1) {
		            if (GUIForCustomerCare.jTable_All_Info.getSelectedColumn() != -1) {
	            			customerID = (String) GUIForCustomerCare.jTable_All_Info.getValueAt(GUIForCustomerCare.jTable_All_Info.getSelectedRow(), 0);
			            	selectAutomobileInfo(customerID);
			            	selectHomeInfo(customerID);
			            	selectTravelInfo(customerID);
			            	selectDetailedInfo(customerID);
		    				selectFamilyInfo(customerID);
		    				selectCommercialInfo(customerID);
		    				selectCalendarInfo(customerID);
		    				
		    				if ((boolean)GUIForCustomerCare.jTable_All_Info.getValueAt(GUIForCustomerCare.jTable_All_Info.getSelectedRow(), 5).equals("AUTO")) {
		    					GUIForCustomerCare.tabbedPane.setSelectedIndex(0);
		    				}
		    				else if ((boolean)GUIForCustomerCare.jTable_All_Info.getValueAt(GUIForCustomerCare.jTable_All_Info.getSelectedRow(), 5).equals("HOME")) {
		    					GUIForCustomerCare.tabbedPane.setSelectedIndex(1);
		    				}
		    				else if ((boolean)GUIForCustomerCare.jTable_All_Info.getValueAt(GUIForCustomerCare.jTable_All_Info.getSelectedRow(), 5).equals("TRAV")) {
		    					GUIForCustomerCare.tabbedPane.setSelectedIndex(2);
		    				}
		    				else if ((boolean)GUIForCustomerCare.jTable_All_Info.getValueAt(GUIForCustomerCare.jTable_All_Info.getSelectedRow(), 5).equals("COMM")) {
		    					GUIForCustomerCare.tabbedPane.setSelectedIndex(3);
		    				}
		            }
		         }
		     }
		});
        
        GUIForCustomerCare.tabbedPaneForCustomerInfo.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
	        		if (GUIForCustomerCare.tabbedPaneForCustomerInfo.getSelectedIndex() == 0) {
	        			
	        			searchMember(databaseConstant.SEARCH_CLAIM, "");
	        			
					String rs = String.valueOf(GUIForCustomerCare.defaultTableModel_Claim_Info.getRowCount());
					GUIForCustomerCare.totalTextField.setText(rs);
					GUIForCustomerCare.idTextField.setText("");
					GUIForCustomerCare.LastNameTextField.setText("");
					GUIForCustomerCare.firstNameTextField.setText("");
					GUIForCustomerCare.phoneNumField.setText("");
					GUIForCustomerCare.phoneNumRearrangedField.setText("");
					GUIForCustomerCare.birthDateField.setText("");
					GUIForCustomerCare.birthDateRearrangedField.setText("");
					GUIForCustomerCare.emailField.setText("");
					GUIForCustomerCare.priCustIDField.setText("");
					GUIForCustomerCare.memoField.setText("");
					GUIForCustomerCare.addrStrtField.setText("");
					selectFamilyInfo(null);
					selectAutomobileInfo("");
					selectTravelInfo("");
					selectCommercialInfo("");
					selectHomeInfo("");
					selectCalendarInfo("");
	        		}
            		if (GUIForCustomerCare.tabbedPaneForCustomerInfo.getSelectedIndex() == 1) {
            			
	        			searchMember(databaseConstant.SEARCH_IN_COMPLETE, "");
            			
    					String rs = String.valueOf(GUIForCustomerCare.defaultTableModel_Complete_Info.getRowCount());
    					GUIForCustomerCare.totalTextField.setText(rs);
    					GUIForCustomerCare.idTextField.setText("");
					GUIForCustomerCare.LastNameTextField.setText("");
					GUIForCustomerCare.firstNameTextField.setText("");
					GUIForCustomerCare.phoneNumField.setText("");
					GUIForCustomerCare.phoneNumRearrangedField.setText("");
					GUIForCustomerCare.birthDateField.setText("");
					GUIForCustomerCare.birthDateRearrangedField.setText("");
					GUIForCustomerCare.emailField.setText("");
					GUIForCustomerCare.priCustIDField.setText("");
					GUIForCustomerCare.memoField.setText("");
					GUIForCustomerCare.addrStrtField.setText("");
					selectFamilyInfo(null);
					selectAutomobileInfo("");
					selectTravelInfo("");
					selectCommercialInfo("");
					selectHomeInfo("");
					selectCalendarInfo("");

            		}
            		else if (GUIForCustomerCare.tabbedPaneForCustomerInfo.getSelectedIndex() == 2) {
            			
	        			searchMember(databaseConstant.SEARCH_IN_PROGRESS, "");
            			
    					String rs = String.valueOf(GUIForCustomerCare.defaultTableModel_In_Progress_Info.getRowCount());    					
    					GUIForCustomerCare.totalTextField.setText(rs);	
    					GUIForCustomerCare.idTextField.setText("");
					GUIForCustomerCare.LastNameTextField.setText("");
					GUIForCustomerCare.firstNameTextField.setText("");
					GUIForCustomerCare.phoneNumField.setText("");
					GUIForCustomerCare.phoneNumRearrangedField.setText("");
					GUIForCustomerCare.birthDateField.setText("");
					GUIForCustomerCare.birthDateRearrangedField.setText("");
					GUIForCustomerCare.emailField.setText("");
					GUIForCustomerCare.priCustIDField.setText("");
					GUIForCustomerCare.memoField.setText("");
					GUIForCustomerCare.addrStrtField.setText("");
					selectFamilyInfo(null);
					selectAutomobileInfo("");
					selectTravelInfo("");
					selectCommercialInfo("");
					selectHomeInfo("");
					selectCalendarInfo("");

            		}
            		else if (GUIForCustomerCare.tabbedPaneForCustomerInfo.getSelectedIndex() == 3) {
            			
	        			searchMember(databaseConstant.SEARCH_RESERVED, "");
            			
    					String rs = String.valueOf(GUIForCustomerCare.defaultTableModel_Reserved_Info.getRowCount());    					
    					GUIForCustomerCare.totalTextField.setText(rs);	
    					GUIForCustomerCare.idTextField.setText(null);
					GUIForCustomerCare.LastNameTextField.setText(null);
					GUIForCustomerCare.firstNameTextField.setText(null);
					GUIForCustomerCare.phoneNumField.setText(null);
					GUIForCustomerCare.phoneNumRearrangedField.setText(null);
					GUIForCustomerCare.birthDateField.setText(null);
					GUIForCustomerCare.birthDateRearrangedField.setText(null);
					GUIForCustomerCare.emailField.setText(null);
					GUIForCustomerCare.priCustIDField.setText(null);
					GUIForCustomerCare.memoField.setText(null);
					GUIForCustomerCare.addrStrtField.setText(null);
					selectFamilyInfo(null);
					selectAutomobileInfo("");
					selectTravelInfo("");
					selectCommercialInfo("");
					selectHomeInfo("");
					selectCalendarInfo("");

            		}
            		// supposed to not have a searchMember function
            		else if (GUIForCustomerCare.tabbedPaneForCustomerInfo.getSelectedIndex() == 4) {
            			
            			GUIForCustomerCare.allButton.setSelected(true);
            			GUIForCustomerCare.customerButton.setSelected(false);
            			GUIForCustomerCare.jTextField.requestFocus();
            			            			
    					String rs = String.valueOf(GUIForCustomerCare.defaultTableModel_All_Info.getRowCount());
    					GUIForCustomerCare.totalTextField.setText(rs);
    					GUIForCustomerCare.idTextField.setText("");
					GUIForCustomerCare.LastNameTextField.setText("");
					GUIForCustomerCare.firstNameTextField.setText("");
					GUIForCustomerCare.phoneNumField.setText("");
					GUIForCustomerCare.phoneNumRearrangedField.setText("");
					GUIForCustomerCare.birthDateField.setText("");
					GUIForCustomerCare.birthDateRearrangedField.setText("");
					GUIForCustomerCare.emailField.setText("");
					GUIForCustomerCare.priCustIDField.setText("");
					GUIForCustomerCare.memoField.setText("");
					GUIForCustomerCare.addrStrtField.setText("");
					selectFamilyInfo(null);
					selectAutomobileInfo("");
					selectTravelInfo("");
					selectCommercialInfo("");
					selectHomeInfo("");
					selectCalendarInfo("");

            		}
            		else if (GUIForCustomerCare.tabbedPaneForCustomerInfo.getSelectedIndex() == 5) {
            			
            			GUIForCustomerCare.customerButton.setSelected(true);
            			GUIForCustomerCare.allButton.setSelected(false);
            			GUIForCustomerCare.jTextField.requestFocus();
            			            			
    					String rs = String.valueOf(GUIForCustomerCare.defaultTableModel_Personal_Info.getRowCount());
    					GUIForCustomerCare.totalTextField.setText(rs);
    					GUIForCustomerCare.idTextField.setText("");
					GUIForCustomerCare.LastNameTextField.setText("");
					GUIForCustomerCare.firstNameTextField.setText("");
					GUIForCustomerCare.phoneNumField.setText("");
					GUIForCustomerCare.phoneNumRearrangedField.setText("");
					GUIForCustomerCare.birthDateField.setText("");
					GUIForCustomerCare.birthDateRearrangedField.setText("");
					GUIForCustomerCare.emailField.setText("");
					GUIForCustomerCare.priCustIDField.setText("");
					GUIForCustomerCare.memoField.setText("");
					GUIForCustomerCare.addrStrtField.setText("");
					selectFamilyInfo(null);
					selectAutomobileInfo("");
					selectTravelInfo("");
					selectCommercialInfo("");
					selectHomeInfo("");
					selectCalendarInfo("");

            		}
            }
        });

        GUIForCustomerCare.allButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                GUIForCustomerCare.customerButton.setSelected(false);
                GUIForCustomerCare.tabbedPaneForCustomerInfo.setSelectedIndex(4);
            }
        }); 
        GUIForCustomerCare.customerButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                GUIForCustomerCare.tabbedPaneForCustomerInfo.setSelectedIndex(5);
                GUIForCustomerCare.allButton.setSelected(false);
                GUIForCustomerCare.jTextField.requestFocus();
            }
        }); 
                
        GUIForCustomerCare.jButtonForNewOther.addActionListener(new ActionListener()
        {
	        	@Override
	        	public void actionPerformed(ActionEvent e)
	        	{
	        		 if (!GUIForCustomerCare.idTextField.getText().trim().isEmpty()) {
    					customerID = (String)GUIForCustomerCare.idTextField.getText().trim();
        				if (GUIForCustomerCare.tabbedPane.getSelectedIndex() == 0) {
        					new MemberDialog(databaseConstant.AUTOMOBILE_MODE, databaseConstant.NEW_MODE); 
        				}
        				else if (GUIForCustomerCare.tabbedPane.getSelectedIndex() == 1) {
        					new MemberDialog(databaseConstant.HOME_MODE, databaseConstant.NEW_MODE);
        				}
        				else if (GUIForCustomerCare.tabbedPane.getSelectedIndex() == 2) {
        					new MemberDialog(databaseConstant.TRAVEL_MODE, databaseConstant.NEW_MODE);
        				}
        				else if (GUIForCustomerCare.tabbedPane.getSelectedIndex() == 3) {
        					new MemberDialog(databaseConstant.COMMERCIAL_MODE, databaseConstant.NEW_MODE);
        				}
	        		}
	        		else {
	        			JOptionPane.showMessageDialog(GUIForCustomerCare.jFrame, "No data to insert Automobile");
	        		}
	        	}			
        });
        
        //Update
        GUIForCustomerCare.jButtonUpdateForOther.addActionListener(new ActionListener() {
	        	@Override
	        	public void actionPerformed(ActionEvent e) {
	        		System.out.println("getSelectedRow = " + GUIForCustomerCare.jTable_Automobile_Info.getSelectedRow());
	        		if (GUIForCustomerCare.tabbedPane.getSelectedIndex() == 0) {
	        			if (GUIForCustomerCare.jTable_Automobile_Info.getSelectedRow() != -1) {
	        				new MemberDialog(databaseConstant.AUTOMOBILE_MODE, databaseConstant.EDIT_MODE);
	        			}
	        			else {
	        				JOptionPane.showMessageDialog(GUIForCustomerCare.jFrame, "No data to be updated");
	        			}
	        		}
	        		else if (GUIForCustomerCare.tabbedPane.getSelectedIndex() == 1) {
	        			if (GUIForCustomerCare.jTable_House_Info.getSelectedRow() != -1) {
	        				new MemberDialog(databaseConstant.HOME_MODE, databaseConstant.EDIT_MODE);
	        			}
	        			else {
	        				JOptionPane.showMessageDialog(GUIForCustomerCare.jFrame, "No data to be updated");
	        			}
	        		}
	        		else if (GUIForCustomerCare.tabbedPane.getSelectedIndex() == 2) {
	        			if (GUIForCustomerCare.jTable_Traveler_Info.getSelectedRow() != -1) {
	        				new MemberDialog(databaseConstant.TRAVEL_MODE, databaseConstant.EDIT_MODE);
	        			}
	        			else {
	        				JOptionPane.showMessageDialog(GUIForCustomerCare.jFrame, "No data to be updated");
	        			}
	        		}
	        		else if (GUIForCustomerCare.tabbedPane.getSelectedIndex() == 3) {
	        			if (GUIForCustomerCare.jTable_Commercial_Info.getSelectedRow() != -1) {
	        				new MemberDialog(databaseConstant.COMMERCIAL_MODE, databaseConstant.EDIT_MODE);
	        			}
	        			else {
	        				JOptionPane.showMessageDialog(GUIForCustomerCare.jFrame, "No data to be updated");
	        			}
	        		}
	        	}			
        });
		
        GUIForCustomerCare.jButtonRenewalForOther.addActionListener(new ActionListener() {
	        	@Override
	        	public void actionPerformed(ActionEvent e) {
	        		if (GUIForCustomerCare.tabbedPane.getSelectedIndex() == 0) {
	        			if (GUIForCustomerCare.jTable_Automobile_Info.getSelectedRow() != -1) {
	        				new MemberDialog(databaseConstant.AUTOMOBILE_MODE, databaseConstant.INSERT_MODE);
	        			}
	        			else {
	        				JOptionPane.showMessageDialog(GUIForCustomerCare.jFrame, "No data to be updated");
	        			}
	        		}
	        		else if (GUIForCustomerCare.tabbedPane.getSelectedIndex() == 1) {
	        			if (GUIForCustomerCare.jTable_House_Info.getSelectedRow() != -1) {
	        				new MemberDialog(databaseConstant.HOME_MODE, databaseConstant.INSERT_MODE);
	        			}
	        			else {
	        				JOptionPane.showMessageDialog(GUIForCustomerCare.jFrame, "No data to be updated");
	        			}
	        		}
	        		else if (GUIForCustomerCare.tabbedPane.getSelectedIndex() == 2) {
        				JOptionPane.showMessageDialog(GUIForCustomerCare.jFrame, "Travel is not renewable");
	        		}
	        		else if (GUIForCustomerCare.tabbedPane.getSelectedIndex() == 3) {
	        			if (GUIForCustomerCare.jTable_Commercial_Info.getSelectedRow() != -1) {
	        				new MemberDialog(databaseConstant.COMMERCIAL_MODE, databaseConstant.INSERT_MODE);
	        			}
	        			else {
	        				JOptionPane.showMessageDialog(GUIForCustomerCare.jFrame, "No data to be updated");
	        			}
	        		}
	        	}			
	    });
		
		GUIForCustomerCare.jTable_Family_Info.addMouseListener(new MouseAdapter(){
		    public void mouseClicked(MouseEvent evnt) {
		        if (evnt.getClickCount() == 1) {
		            if (GUIForCustomerCare.jTable_Family_Info.getSelectedColumn() != -1) {
		            		int prevRow = GUIForCustomerCare.jTable_Family_Info.getSelectedRow();
		            		int prevCol = GUIForCustomerCare.jTable_Family_Info.getSelectedColumn();
	            			customerID = (String) GUIForCustomerCare.jTable_Family_Info.getValueAt(GUIForCustomerCare.jTable_Family_Info.getSelectedRow(), 0);
			            	selectAutomobileInfo(customerID);
			            	selectHomeInfo(customerID);
			            	selectTravelInfo(customerID);
		    				selectFamilyInfo(customerID);
			            	selectDetailedInfo(customerID);
		    				selectCommercialInfo(customerID);
		    				selectCalendarInfo(customerID);
		    				//Resets list, so as the default, switches to top row
		    				System.out.println("GUI.jTable_Family_Info.getSelectedRow = " + prevRow + " getSelectedColumn = " + prevCol);
		    				GUIForCustomerCare.jTable_Family_Info.changeSelection(prevRow, prevCol, false, false);
		            }
		         }
		     }
		});
		
		GUIForCustomerCare.jFrame.addWindowListener( new WindowAdapter() {
		    public void windowOpened( WindowEvent e ){
		        GUIForCustomerCare.jTextField.requestFocus();
		        GUIForCustomerCare.tabbedPaneForCustomerInfo.setSelectedIndex(3);
		        GUIForCustomerCare.customerButton.setSelected(true);
		        searchMember(databaseConstant.SEARCH_RESERVED, GUIForCustomerCare.jTextField.getText().trim());
		    }
		}); 
					    
		//New
		GUIForCustomerCare.jButtonForNewCustomer.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				System.out.println("Count of listeners: " + ((AbstractButton) e.getSource()).getActionListeners().length);
				new MemberDialog(databaseConstant.CUSTOMER_MODE, databaseConstant.NEW_MODE);
			}			
		});
		
		//Update
		GUIForCustomerCare.jButtonUpdateForCustomer.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				System.out.println("idinfo = " + GUIForCustomerCare.idTextField.getText().trim());
				new MemberDialog(databaseConstant.CUSTOMER_MODE, databaseConstant.EDIT_MODE);
			}			
		});
		
		GUIForCustomerCare.jButton.addActionListener(new ActionListener()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				if(GUIForCustomerCare.jTextField.getText().trim().length() > 0)
				{
					if (GUIForCustomerCare.customerButton.isSelected()) {
						searchMember(databaseConstant.SEARCH_CUSTOMER, GUIForCustomerCare.jTextField.getText().trim());
					}
					else if (GUIForCustomerCare.allButton.isSelected()) {
						searchMember(databaseConstant.SEARCH_ALL, GUIForCustomerCare.jTextField.getText().trim());
					}
					
					GUIForCustomerCare.jButton.setText("Search");
				}
				else
				{
					JOptionPane.showMessageDialog(GUIForCustomerCare.jFrame, "Please enter search word!");
				}
			}
		});
	}
	
	public void searchMember(int searchMode, String keyWord)
	{
	
		System.out.println(searchMode);
		
		try
		{
			Utilities.connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
			
			Utilities.statement = Utilities.connection.createStatement();
			 			
			GUIForCustomerCare.totalTextField.setText("0");
						
			if (searchMode == databaseConstant.SEARCH_CUSTOMER) {
				String keyWord2 = keyWord.replaceAll("\\s+","");
				Utilities.resultSet = Utilities.statement.executeQuery("SELECT A.CUST_ID, A.LAST_NAME, A.FIRST_NAME, A.CELL_NO, A.MEMO FROM (SELECT B.* ,concat(replace(B.FIRST_NAME, ' ',''), replace(B.LAST_NAME, ' ','')) NAME_STR_1, concat(replace(B.LAST_NAME, ' ',''), replace(B.FIRST_NAME, ' ','')) NAME_STR_2 FROM CCCUSTOM B) A where A.NAME_STR_1 LIKE '%" + keyWord2 + "%' OR A.NAME_STR_2 LIKE '%" + keyWord2 + "%' or A.CUST_ID LIKE '%" + keyWord2 + "%' or A.CELL_NO LIKE '%" + keyWord2 + "%'");
			} else if (searchMode == databaseConstant.SEARCH_ALL) {
				Utilities.resultSet = Utilities.statement.executeQuery("SELECT B.CUST_ID, A.LAST_NAME, A.FIRST_NAME, 'AUTO' INS_KIND, B.EXP_DATE, B.PROC_TYPE, B.COMPANY_NAME, B.COMPLETE_DATE FROM CCCUSTOM A, AUTXNPRM B WHERE A.CUST_ID = B.CUST_ID AND B.EXP_DATE LIKE '" + keyWord + "%' UNION ALL SELECT  C.CUST_ID, A.LAST_NAME, A.FIRST_NAME, 'HOME' INS_KIND, C.EXP_DATE, C.PROC_TYPE, C.COMPANY_NAME, C.COMPLETE_DATE FROM CCCUSTOM A, HOTXNPRM C WHERE A.CUST_ID = C.CUST_ID AND C.EXP_DATE LIKE '" + keyWord + "%' UNION ALL SELECT  E.CUST_ID, A.LAST_NAME, A.FIRST_NAME,'COMM' INS_KIND, E.EXP_DATE, E.PROC_TYPE, E.COMPANY_NAME, E.COMPLETE_DATE FROM CCCUSTOM A, COTXNPRM E WHERE A.CUST_ID = E.CUST_ID AND E.EXP_DATE LIKE '" + keyWord + "%' ORDER BY 5,6");
			} else if (searchMode == databaseConstant.SEARCH_RESERVED) {
				Utilities.resultSet = Utilities.statement.executeQuery("SELECT B.CUST_ID, A.LAST_NAME, A.FIRST_NAME, B.EXP_DATE, 'AUTO' INS_KIND, B.COMPANY_NAME, B.VISIT_DATE_TIME, B.COMPLETE_DATE, B.OWNERSHIP FROM CCCUSTOM A, AUTXNPRM B WHERE A.CUST_ID = B.CUST_ID AND B.PROC_TYPE IN ('RESERVED') AND B.TXN_TYPE NOT IN ('CLAIM') UNION ALL SELECT  C.CUST_ID, A.LAST_NAME, A.FIRST_NAME, C.EXP_DATE, 'HOME' INS_KIND, C.COMPANY_NAME, C.VISIT_DATE_TIME, C.COMPLETE_DATE, C.OWNERSHIP FROM CCCUSTOM A, HOTXNPRM C WHERE A.CUST_ID = C.CUST_ID AND C.PROC_TYPE IN ('RESERVED') AND C.TXN_TYPE NOT IN ('CLAIM') UNION ALL SELECT  E.CUST_ID, A.LAST_NAME, A.FIRST_NAME, E.EXP_DATE, 'COMM' INS_KIND, E.COMPANY_NAME, E.VISIT_DATE_TIME, E.COMPLETE_DATE, E.OWNERSHIP FROM CCCUSTOM A, COTXNPRM E WHERE A.CUST_ID = E.CUST_ID AND E.PROC_TYPE IN ('RESERVED') AND E.TXN_TYPE NOT IN ('CLAIM')  UNION ALL SELECT  F.CUST_ID, A.LAST_NAME, A.FIRST_NAME, F.EXP_DATE, 'TRAV' INS_KIND, F.COMPANY_NAME, F.MAIL_DATE_TIME, F.COMPLETE_DATE, F.OWNERSHIP FROM CCCUSTOM A, TRTXNPRM F WHERE A.CUST_ID = F.CUST_ID AND F.PROC_TYPE IN ('RESERVED') AND F.TXN_TYPE NOT IN ('CLAIM')  ORDER BY 7, 3, 2");
			} else if (searchMode == databaseConstant.SEARCH_IN_PROGRESS) {
				Utilities.resultSet = Utilities.statement.executeQuery("SELECT B.CUST_ID, A.LAST_NAME, A.FIRST_NAME, B.EXP_DATE, B.PROC_TYPE, 'AUTO' INS_KIND, B.COMPANY_NAME, B.COMPLETE_DATE, B.OWNERSHIP FROM CCCUSTOM A, AUTXNPRM B WHERE A.CUST_ID = B.CUST_ID AND B.PROC_TYPE NOT IN ('SUCCESS', 'FAIL', 'NEXT', 'COMPLETE', 'CLOSE') AND B.TXN_TYPE NOT IN ('CLAIM') UNION ALL SELECT  C.CUST_ID, A.LAST_NAME, A.FIRST_NAME, C.EXP_DATE, C.PROC_TYPE, 'HOME' INS_KIND, C.COMPANY_NAME, C.COMPLETE_DATE, C.OWNERSHIP FROM CCCUSTOM A, HOTXNPRM C WHERE A.CUST_ID = C.CUST_ID AND C.PROC_TYPE NOT IN ('SUCCESS', 'FAIL', 'NEXT', 'COMPLETE', 'CLOSE') AND C.TXN_TYPE NOT IN ('CLAIM') UNION ALL SELECT  E.CUST_ID, A.LAST_NAME, A.FIRST_NAME, E.EXP_DATE, E.PROC_TYPE, 'COMM' INS_KIND, E.COMPANY_NAME, E.COMPLETE_DATE, E.OWNERSHIP FROM CCCUSTOM A, COTXNPRM E WHERE A.CUST_ID = E.CUST_ID AND E.PROC_TYPE NOT IN ('SUCCESS', 'FAIL', 'NEXT', 'COMPLETE', 'CLOSE') AND E.TXN_TYPE NOT IN ('CLAIM') UNION ALL SELECT F.CUST_ID, A.LAST_NAME, A.FIRST_NAME, F.EXP_DATE, F.PROC_TYPE, 'TRAV' INS_KIND, F.COMPANY_NAME, F.COMPLETE_DATE, F.OWNERSHIP FROM CCCUSTOM A, TRTXNPRM F WHERE A.CUST_ID = F.CUST_ID AND F.PROC_TYPE NOT IN ('SUCCESS', 'FAIL', 'NEXT', 'COMPLETE', 'CLOSE') AND F.TXN_TYPE NOT IN ('CLAIM') ORDER BY 4,5");
			} else if (searchMode == databaseConstant.SEARCH_IN_COMPLETE) {
				Utilities.resultSet = Utilities.statement.executeQuery("SELECT B.CUST_ID, A.LAST_NAME, A.FIRST_NAME, B.EXP_DATE, 'AUTO' INS_KIND, B.COMPANY_NAME, B.COMPLETE_DATE, B.OWNERSHIP FROM CCCUSTOM A, AUTXNPRM B WHERE A.CUST_ID = B.CUST_ID AND B.PROC_TYPE = 'COMPLETE' UNION ALL "
												+ "SELECT C.CUST_ID, A.LAST_NAME, A.FIRST_NAME, C.EXP_DATE, 'HOME' INS_KIND, C.COMPANY_NAME, C.COMPLETE_DATE, C.OWNERSHIP FROM CCCUSTOM A, HOTXNPRM C WHERE A.CUST_ID = C.CUST_ID AND C.PROC_TYPE = 'COMPLETE' UNION ALL "
												+ "SELECT E.CUST_ID, A.LAST_NAME, A.FIRST_NAME, E.EXP_DATE, 'COMM' INS_KIND, E.COMPANY_NAME, E.COMPLETE_DATE, E.OWNERSHIP FROM CCCUSTOM A, COTXNPRM E WHERE A.CUST_ID = E.CUST_ID AND E.PROC_TYPE = 'COMPLETE' UNION ALL "
												+ "SELECT F.CUST_ID, A.LAST_NAME, A.FIRST_NAME, F.EXP_DATE, 'TRAV' INS_KIND, F.COMPANY_NAME, F.COMPLETE_DATE, F.OWNERSHIP FROM CCCUSTOM A, TRTXNPRM F WHERE A.CUST_ID = F.CUST_ID AND F.PROC_TYPE = 'COMPLETE' ORDER BY 5, 7");
			} else if (searchMode == databaseConstant.SEARCH_CLAIM) {
				Utilities.resultSet = Utilities.statement.executeQuery("SELECT B.CUST_ID, A.LAST_NAME, A.FIRST_NAME, B.EXP_DATE, B.PROC_TYPE, 'AUTO' INS_KIND, B.COMPANY_NAME, B.COMPLETE_DATE, B.OWNERSHIP FROM CCCUSTOM A, AUTXNPRM B WHERE A.CUST_ID = B.CUST_ID AND B.TXN_TYPE = 'CLAIM' AND B.PROC_TYPE NOT IN ('CLOSE') UNION ALL SELECT C.CUST_ID, A.LAST_NAME, A.FIRST_NAME, C.EXP_DATE, C.PROC_TYPE, 'HOME' INS_KIND, C.COMPANY_NAME, C.COMPLETE_DATE, C.OWNERSHIP FROM CCCUSTOM A, HOTXNPRM C WHERE A.CUST_ID = C.CUST_ID AND C.TXN_TYPE = 'CLAIM' AND C.PROC_TYPE NOT IN ('CLOSE') UNION ALL SELECT  E.CUST_ID, A.LAST_NAME, A.FIRST_NAME, E.EXP_DATE, E.PROC_TYPE, 'COMM' INS_KIND, E.COMPANY_NAME, E.COMPLETE_DATE, E.OWNERSHIP FROM CCCUSTOM A, COTXNPRM E WHERE A.CUST_ID = E.CUST_ID AND E.TXN_TYPE = 'CLAIM' AND E.PROC_TYPE NOT IN ('CLOSE') UNION ALL SELECT  F.CUST_ID, A.LAST_NAME, A.FIRST_NAME, F.EXP_DATE, F.PROC_TYPE, 'TRAV' INS_KIND, F.COMPANY_NAME, F.COMPLETE_DATE, F.OWNERSHIP FROM CCCUSTOM A, TRTXNPRM F WHERE A.CUST_ID = F.CUST_ID AND F.TXN_TYPE = 'CLAIM' AND F.PROC_TYPE NOT IN ('CLOSE') ORDER BY 4,5");
			}

			GUIForCustomerCare.defaultTableModel_Personal_Info.setRowCount(0);
			GUIForCustomerCare.defaultTableModel_In_Progress_Info.setRowCount(0);
			GUIForCustomerCare.defaultTableModel_Complete_Info.setRowCount(0);
			GUIForCustomerCare.defaultTableModel_All_Info.setRowCount(0);
			GUIForCustomerCare.defaultTableModel_Reserved_Info.setRowCount(0);
			GUIForCustomerCare.defaultTableModel_Claim_Info.setRowCount(0);
			
			while (Utilities.resultSet.next())
			{	
				
				if (searchMode == databaseConstant.SEARCH_IN_PROGRESS) {
										
					String customerID = Utilities.resultSet.getString(1);
					String lastName = Utilities.resultSet.getString(2);
					String firstName = Utilities.resultSet.getString(3);
					String expDate = Utilities.resultSet.getString(4);
					String procType = Utilities.resultSet.getString(5);
					String insType = Utilities.resultSet.getString(6);
					String companyName = Utilities.resultSet.getString(7);
					String ownership = Utilities.resultSet.getString(9);
							
					System.out.println(ownership);
					
				    Object[] row = {customerID, lastName, firstName, expDate, procType, insType, companyName, ownership};
				    
				    if (GUIForCustomerCare.tabbedPaneForCustomerInfo.getSelectedIndex() == 2) {
				    		GUIForCustomerCare.defaultTableModel_In_Progress_Info.addRow(row);
						String rs = String.valueOf(GUIForCustomerCare.defaultTableModel_In_Progress_Info.getRowCount());
						GUIForCustomerCare.totalTextField.setText(rs);
				    }
				}
				else if (searchMode == databaseConstant.SEARCH_RESERVED) {
					
					String customerID = Utilities.resultSet.getString(1);
					String lastName = Utilities.resultSet.getString(2);
					String firstName = Utilities.resultSet.getString(3);
					String expDate = Utilities.resultSet.getString(4);
					String inskind = Utilities.resultSet.getString(5);
					String companyName = Utilities.resultSet.getString(6);
					String visitDateTime = Utilities.resultSet.getString(7);
					String ownership = Utilities.resultSet.getString(9); //>>>>>>>>>>>>>>> bad
					
				    Object[] row = {customerID, lastName, firstName, expDate, inskind, companyName, visitDateTime, ownership};
					
				    if (GUIForCustomerCare.tabbedPaneForCustomerInfo.getSelectedIndex() == 3) {
				    		GUIForCustomerCare.defaultTableModel_Reserved_Info.addRow(row);
						String rs = String.valueOf(GUIForCustomerCare.defaultTableModel_Reserved_Info.getRowCount());
						GUIForCustomerCare.totalTextField.setText(rs);
				    }
				}
				else if (searchMode == databaseConstant.SEARCH_CLAIM) {
					
					String customerID = Utilities.resultSet.getString(1);
					String lastName = Utilities.resultSet.getString(2);
					String firstName = Utilities.resultSet.getString(3);
					String expDate = Utilities.resultSet.getString(4);
					String procType = Utilities.resultSet.getString(5);
					String insKind = Utilities.resultSet.getString(6);
					String companyName = Utilities.resultSet.getString(7);
					String ownership = Utilities.resultSet.getString(9); //>>>>>>>>>>>>>>> bad
					
				    Object[] row = {customerID, lastName, firstName, expDate, procType, insKind, companyName, ownership};
					
				    if (GUIForCustomerCare.tabbedPaneForCustomerInfo.getSelectedIndex() == 0) {
				    		GUIForCustomerCare.defaultTableModel_Claim_Info.addRow(row);
						String rs = String.valueOf(GUIForCustomerCare.defaultTableModel_Claim_Info.getRowCount());
						GUIForCustomerCare.tabbedPaneForCustomerInfo.setSelectedIndex(0);
						GUIForCustomerCare.totalTextField.setText(rs);
				    }
				}
				else if (searchMode == databaseConstant.SEARCH_CUSTOMER) {
					String customerID = Utilities.resultSet.getString(1);
					String lastName = Utilities.resultSet.getString(2);
					String firstName = Utilities.resultSet.getString(3);
					String phoneNum = Utilities.resultSet.getString(4);
					String memo = Utilities.resultSet.getString(5);
					
				    Object[] row = {customerID, lastName, firstName, phoneNum, memo};
					GUIForCustomerCare.tabbedPaneForCustomerInfo.setSelectedIndex(5);
					GUIForCustomerCare.defaultTableModel_Personal_Info.addRow(row);
					String rs = String.valueOf(GUIForCustomerCare.defaultTableModel_Personal_Info.getRowCount());
					GUIForCustomerCare.totalTextField.setText(rs);
				}
				else if (searchMode == databaseConstant.SEARCH_IN_COMPLETE) {
					String customerID = Utilities.resultSet.getString(1);
					String lastName = Utilities.resultSet.getString(2);
					String firstName = Utilities.resultSet.getString(3);
					String expDate = Utilities.resultSet.getString(4);
					String insType = Utilities.resultSet.getString(5);
					String companyName = Utilities.resultSet.getString(6);
					String completeDate = Utilities.resultSet.getString(7);
					String ownership = Utilities.resultSet.getString(8); //>>>>>>>>>>>>>>  good
					
				    Object[] row = {customerID, lastName, firstName, expDate, insType, companyName, completeDate, ownership};
				    if (GUIForCustomerCare.tabbedPaneForCustomerInfo.getSelectedIndex() == 1) {
				    		GUIForCustomerCare.defaultTableModel_Complete_Info.addRow(row);
						GUIForCustomerCare.tabbedPaneForCustomerInfo.setSelectedIndex(1);
						String rs = String.valueOf(GUIForCustomerCare.defaultTableModel_Complete_Info.getRowCount());
						GUIForCustomerCare.totalTextField.setText(rs);
				    }
				}
				else if (searchMode == databaseConstant.SEARCH_ALL) {
					String customerID = Utilities.resultSet.getString(1);
					String lastName = Utilities.resultSet.getString(2);
					String firstName = Utilities.resultSet.getString(3);
					String insType = Utilities.resultSet.getString(4);
					String expDate = Utilities.resultSet.getString(5);
					String procType = Utilities.resultSet.getString(6);
					String companyName = Utilities.resultSet.getString(7);
					
				    Object[] row = {customerID, lastName, firstName, expDate, procType, insType, companyName};
				    GUIForCustomerCare.defaultTableModel_All_Info.addRow(row);
					GUIForCustomerCare.tabbedPaneForCustomerInfo.setSelectedIndex(4);
					String rs = String.valueOf(GUIForCustomerCare.defaultTableModel_All_Info.getRowCount());
					GUIForCustomerCare.totalTextField.setText(rs);
				}
			}
			
			if (GUIForCustomerCare.defaultTableModel_Personal_Info.getRowCount() > 0)
			{
				GUIForCustomerCare.jTable_Personal_Info.setRowSelectionInterval(0, 0);
			}
			//CustomerInfo end
			
		}
		catch (SQLException e)
		{
			System.out.println("SQLException - searchMember" +  e.getStackTrace());
		}
		
		finally
		{
			Utilities.closeDatabase();
		}
	}
	
	public void selectAutomobileInfo(String customerID) {
		try
		{								
			Utilities.connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
			
			Utilities.statement = Utilities.connection.createStatement();
		
			Utilities.resultAutomobileSet = Utilities.statement.executeQuery("SELECT * FROM AUTXNPRM where AUTXNPRM.CUST_ID = \"" + customerID + "\"ORDER BY TIME_STAMP DESC");
			
			GUIForCustomerCare.defaultTableModel_Automobile_Info.setRowCount(0);			
			
			while (Utilities.resultAutomobileSet.next())
			{
				String customerId = Utilities.resultAutomobileSet.getString(1);
				String timeStamp = Utilities.resultAutomobileSet.getString(2);
				String txnType = Utilities.resultAutomobileSet.getString(3);
				String plateNo = Utilities.resultAutomobileSet.getString(4);
				String docNo= Utilities.resultAutomobileSet.getString(5);
				String expDate = Utilities.resultAutomobileSet.getString(6);
				String newExpDate = Utilities.resultAutomobileSet.getString(7);
				String procType = Utilities.resultAutomobileSet.getString(8);
				String premium = Utilities.resultAutomobileSet.getString(9);
				String textDate = Utilities.resultAutomobileSet.getString(10);
				String callDate = Utilities.resultAutomobileSet.getString(11);
				String companyName = Utilities.resultAutomobileSet.getString(14);
				String owner = Utilities.resultAutomobileSet.getString(15);
				String memo = Utilities.resultAutomobileSet.getString(16);

			    Object[] row = { customerId, timeStamp, txnType, procType, expDate, newExpDate, plateNo, docNo, premium, textDate, callDate, companyName, owner, memo};
				
				GUIForCustomerCare.defaultTableModel_Automobile_Info.addRow(row);
			}
			String rs = String.valueOf(GUIForCustomerCare.defaultTableModel_Automobile_Info.getRowCount());
			GUIForCustomerCare.AutoTextField.setText(rs);
			
			if (GUIForCustomerCare.defaultTableModel_Automobile_Info.getRowCount() > 0)
			{
				GUIForCustomerCare.jTable_Automobile_Info.setRowSelectionInterval(0, 0);
			}
			//AutomobileInfo end
		}
		catch (SQLException e)
		{
			System.out.println("SQLException select Auto" + e.getStackTrace());
		}
		
		finally
		{
			Utilities.closeDatabase();
		}
	}
	public void selectTravelInfo(String customerID) {
		try
		{								
			Utilities.connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
			
			Utilities.statement = Utilities.connection.createStatement();
		
			Utilities.resultTravelSet = Utilities.statement.executeQuery("SELECT * FROM trtxnprm where trtxnprm.CUST_ID = \"" + customerID + "\" ORDER BY TIME_STAMP DESC");
			
			GUIForCustomerCare.defaultTableModel_Traveler_Info.setRowCount(0);			
					
			while (Utilities.resultTravelSet.next())
			{
				String customerId = Utilities.resultTravelSet.getString(1);
				String timeStamp = Utilities.resultTravelSet.getString(2);
				String effDate = Utilities.resultTravelSet.getString(3);
				String expDate = Utilities.resultTravelSet.getString(4);
				String txnType = Utilities.resultTravelSet.getString(5);
				String procType = Utilities.resultTravelSet.getString(6);
				String premium = Utilities.resultTravelSet.getString(7);
				String textDate = Utilities.resultTravelSet.getString(8);
				String callDate = Utilities.resultTravelSet.getString(9);
				String companyName = Utilities.resultTravelSet.getString(12);
				String owner = Utilities.resultTravelSet.getString(13);
				String memo = Utilities.resultTravelSet.getString(14);
				String policyNo = Utilities.resultTravelSet.getString(16);

			    Object[] row = { customerId, timeStamp, txnType, procType, effDate, expDate, policyNo, premium, textDate, callDate, companyName, owner, memo};
				
				GUIForCustomerCare.defaultTableModel_Traveler_Info.addRow(row);
			}
			String rs = String.valueOf(GUIForCustomerCare.defaultTableModel_Traveler_Info.getRowCount());
			GUIForCustomerCare.TravelTextField.setText(rs);
			
			if (GUIForCustomerCare.defaultTableModel_Traveler_Info.getRowCount() > 0)
			{
				GUIForCustomerCare.jTable_Traveler_Info.setRowSelectionInterval(0, 0);
			}
			//AutomobileInfo end
		}
		catch (SQLException e)
		{
			System.out.println("SQLException Travel Info" +  e.getStackTrace());
		}
		
		finally
		{
			Utilities.closeDatabase();
		}
	}
	public void selectHomeInfo(String customerID) {
		try
		{									
			Utilities.connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
			
			Utilities.statement = Utilities.connection.createStatement();
					
			Utilities.resultHomeSet = Utilities.statement.executeQuery("SELECT * FROM HOTXNPRM where HOTXNPRM.CUST_ID = \"" + customerID + "\" ORDER BY TIME_STAMP DESC");
	
			//AutomobileInfo				
			GUIForCustomerCare.defaultTableModel_House_Info.setRowCount(0);			
			
			while (Utilities.resultHomeSet.next()) {
				String customerId = Utilities.resultHomeSet.getString(1);
				String timeStamp = Utilities.resultHomeSet.getString(2);
				String expDate = Utilities.resultHomeSet.getString(3);
				String newExpDate = Utilities.resultHomeSet.getString(4);
				String txnType = Utilities.resultHomeSet.getString(5);
				String procType = Utilities.resultHomeSet.getString(6);
				String sigxpNo = Utilities.resultHomeSet.getString(7);
				String premium = Utilities.resultHomeSet.getString(8);
				String textDateTime = Utilities.resultHomeSet.getString(9);
				String callDateTime = Utilities.resultHomeSet.getString(10);
				String companyName = Utilities.resultHomeSet.getString(13);
				String owner = Utilities.resultHomeSet.getString(14);
				String memo = Utilities.resultHomeSet.getString(15);

			    Object[] row = { customerId, timeStamp, txnType, procType, expDate, newExpDate, sigxpNo, premium, textDateTime, callDateTime, companyName, owner, memo};
			    
				GUIForCustomerCare.defaultTableModel_House_Info.addRow(row);
			}
			String rs = String.valueOf(GUIForCustomerCare.defaultTableModel_House_Info.getRowCount());
			GUIForCustomerCare.HouseTextField.setText(rs);
			
			if (GUIForCustomerCare.defaultTableModel_House_Info.getRowCount() > 0) {
				GUIForCustomerCare.jTable_House_Info.setRowSelectionInterval(0, 0);
			}
			//AutomobileInfo end
		}
		catch (SQLException e) {
			System.out.println("SQLException House Info" +  e.getStackTrace());
		}
		
		finally {
			Utilities.closeDatabase();
		}
	}

	public void selectDetailedInfo(String customerID) {
		try
		{									
			Utilities.connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
			
			Utilities.statement = Utilities.connection.createStatement();
		
			Utilities.resultDetailedInfoSet = Utilities.statement.executeQuery("SELECT * FROM CCCUSTOM where CCCUSTOM.CUST_ID = \"" + customerID + "\"");
	
			//DetailedInfo				
			GUIForCustomerCare.idTextField.removeAll();			
			GUIForCustomerCare.firstNameTextField.removeAll();			
			GUIForCustomerCare.LastNameTextField.removeAll();			
			GUIForCustomerCare.phoneNumField.removeAll();			
			GUIForCustomerCare.birthDateField.removeAll();			
			GUIForCustomerCare.emailField.removeAll();			
			GUIForCustomerCare.priCustIDField.removeAll();			
			GUIForCustomerCare.memoField.removeAll();					
			GUIForCustomerCare.addrStrtField.removeAll();					
	
			while (Utilities.resultDetailedInfoSet.next()) {
				String id = Utilities.resultDetailedInfoSet.getString(1);
				String lastName = Utilities.resultDetailedInfoSet.getString(2);
				String firstName = Utilities.resultDetailedInfoSet.getString(3);
				String phoneNum = Utilities.resultDetailedInfoSet.getString(4);
				String birthDate = Utilities.resultDetailedInfoSet.getString(5);
				String email = Utilities.resultDetailedInfoSet.getString(6);
				String priCustID = Utilities.resultDetailedInfoSet.getString(7);
				String memo = Utilities.resultDetailedInfoSet.getString(8);
				String postalCd = Utilities.resultDetailedInfoSet.getString(9);
				String addrStrtNum = Utilities.resultDetailedInfoSet.getString(10);
				String addrPvNum = Utilities.resultDetailedInfoSet.getString(11);
								
				GUIForCustomerCare.idTextField.setText(id);
				GUIForCustomerCare.firstNameTextField.setText(firstName);
				GUIForCustomerCare.LastNameTextField.setText(lastName);
				GUIForCustomerCare.phoneNumField.setText(phoneNum);
				
				System.out.println("phoneNum = " + phoneNum);
				
				while (true) {
	 				if (!phoneNum.isEmpty()) {
						StringBuilder phoneNumArranged = new StringBuilder(phoneNum);
						phoneNumArranged.insert(3, '-');
						phoneNumArranged.insert(7, '-');
						GUIForCustomerCare.phoneNumRearrangedField.setText(phoneNumArranged.toString());
						break;
					}
					else {
						GUIForCustomerCare.phoneNumRearrangedField.setText(null); 
						break;
					}
				}
				
				GUIForCustomerCare.birthDateField.setText(birthDate);
				
				DateFormat formatter = new SimpleDateFormat("yyyyMMdd"); 
				Date date;
				
				try {
					while (true) {
						if (!birthDate.isEmpty()) {
							date = (Date)formatter.parse(birthDate);
							SimpleDateFormat newFormat = new SimpleDateFormat("ddMMyyyy");
							String finalString = newFormat.format(date);
							GUIForCustomerCare.birthDateRearrangedField.setText(finalString);
							break;
						}
						else {
							GUIForCustomerCare.birthDateRearrangedField.setText(null);
							break;
						}
					}
				} catch (ParseException e) {
					e.printStackTrace();
				}
				
				GUIForCustomerCare.emailField.setText(email);
				GUIForCustomerCare.priCustIDField.setText(priCustID);
				GUIForCustomerCare.memoField.setText(memo);
				GUIForCustomerCare.addrStrtField.setText(addrStrtNum + "\n" + addrPvNum + "\n" + postalCd);	
			}
			
			//AutomobileInfo end
		}
		catch (SQLException e) {
			System.out.println("SQLException Detailed Info" +  e.getStackTrace());
		}
		
		finally {
			Utilities.closeDatabase();
		}
	}
	
	public void selectFamilyInfo(String customerID) {
		try
		{									
			Utilities.connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
			
			Utilities.statement = Utilities.connection.createStatement();
						
			Utilities.resultFamilyInfoSet = Utilities.statement.executeQuery("SELECT * FROM CCCUSTOM A WHERE A.CUST_ID = \"" + customerID + "\" OR A.PRI_CUST_ID = \"" + customerID + "\" UNION SELECT * FROM CCCUSTOM A WHERE A.CUST_ID IN (SELECT B.PRI_CUST_ID FROM CCCUSTOM B WHERE B.CUST_ID = \"" + customerID + "\") UNION SELECT * FROM CCCUSTOM A WHERE A.PRI_CUST_ID IN (SELECT B.PRI_CUST_ID FROM CCCUSTOM B WHERE B.CUST_ID = \"" + customerID + "\") ORDER BY 1;");
			
			GUIForCustomerCare.defaultTableModel_Family_Info.setRowCount(0);			

			while (Utilities.resultFamilyInfoSet.next())
			{				
				String custID = Utilities.resultFamilyInfoSet.getString(1);
				String lastName = Utilities.resultFamilyInfoSet.getString(2);
				String firstName = Utilities.resultFamilyInfoSet.getString(3);
				String birthDate = Utilities.resultFamilyInfoSet.getString(5);
				
			    Object[] row = {custID, lastName, firstName, birthDate};
				
				GUIForCustomerCare.defaultTableModel_Family_Info.addRow(row);
			}
			
			if (GUIForCustomerCare.defaultTableModel_Family_Info.getRowCount() > 0) {
				GUIForCustomerCare.jTable_Family_Info.setRowSelectionInterval(0, 0);
			}
			//AutomobileInfo end
		}
		catch (SQLException e) {
			System.out.println("SQLException - selectFamilyInfo" +  e.getStackTrace());
		}
		
		finally {
			Utilities.closeDatabase();
		}
	}
	
	public void selectCommercialInfo(String customerID) {
		
		try
		{									
			Utilities.connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
			
			Utilities.statement = Utilities.connection.createStatement();
			
			Utilities.resultCommercialInfoSet = Utilities.statement.executeQuery("SELECT * FROM COTXNPRM where COTXNPRM.CUST_ID = \"" + customerID + "\"ORDER BY TIME_STAMP DESC");
			
			GUIForCustomerCare.defaultTableModel_Commercial_Info.setRowCount(0);			

			while (Utilities.resultCommercialInfoSet.next())
			{				
				String customerId = Utilities.resultCommercialInfoSet.getString(1);
				String timeStamp = Utilities.resultCommercialInfoSet.getString(2);
				String expDate = Utilities.resultCommercialInfoSet.getString(3);
				String newExpDate = Utilities.resultCommercialInfoSet.getString(4);
				String txnType = Utilities.resultCommercialInfoSet.getString(5);
				String procType = Utilities.resultCommercialInfoSet.getString(6);
				String premium = Utilities.resultCommercialInfoSet.getString(7);
				String textDate = Utilities.resultCommercialInfoSet.getString(8);
				String callDate = Utilities.resultCommercialInfoSet.getString(9);
				String companyName = Utilities.resultCommercialInfoSet.getString(12);
				String owner = Utilities.resultCommercialInfoSet.getString(13);
				String memo = Utilities.resultCommercialInfoSet.getString(14);
				String sigxpNo = Utilities.resultCommercialInfoSet.getString(16);

			    Object[] row = { customerId, timeStamp, txnType, procType, expDate, newExpDate, sigxpNo, premium, textDate, callDate, companyName, owner, memo};
				
				GUIForCustomerCare.defaultTableModel_Commercial_Info.addRow(row);			
			}
			String rs = String.valueOf(GUIForCustomerCare.defaultTableModel_Commercial_Info.getRowCount());
			GUIForCustomerCare.CommercialTextField.setText(rs);
			
			if (GUIForCustomerCare.defaultTableModel_Commercial_Info.getRowCount() > 0) {
				GUIForCustomerCare.jTable_Commercial_Info.setRowSelectionInterval(0, 0);
			}
			//AutomobileInfo end
		}
		catch (SQLException e) {
			System.out.println("SQLException - selectCommercialInfo" +  e.getStackTrace());
		}
		
		finally {
			Utilities.closeDatabase();
		}
	}
	
	public void selectCalendarInfo(String customerID) {
		
		try
		{											
		    String sql =
		    
		    "SELECT  \n" + 
		     "date_format(Z.EXPIRY, \"%Y-%m-%d\") AS '만기일', \n" +
		    		"concat(concat(A.LAST_NAME, ',  '), A.FIRST_NAME) AS '이름', \n" +
					"Z.INSURANCE	AS '보험종류', \n" +
					"Z.COMPANY		AS '보험회사', \n" +              
				"concat('$', format(Z.PREMIUM, 2)) AS '보험료', \n" +
					"Z.POLICY_NO		AS '증서번호', \n" +
	 				"Z.TXNTYPE		AS '처리구분'  \n" + 	 				
		    	"FROM 	(	SELECT CUST_ID, LAST_NAME, FIRST_NAME FROM CCCUSTOM A \n" +
						"WHERE A.CUST_ID = \'" + customerID + "\' OR A.PRI_CUST_ID = \'" + customerID + "\' \n" +
						"UNION \n" +
						"SELECT CUST_ID, LAST_NAME, FIRST_NAME FROM CCCUSTOM A \n" +
						"WHERE A.CUST_ID IN (SELECT B.PRI_CUST_ID FROM CCCUSTOM B WHERE B.CUST_ID = \'" + customerID + "\') \n" +
						"UNION \n" +
						"SELECT CUST_ID, LAST_NAME, FIRST_NAME FROM CCCUSTOM A \n" +
						"WHERE A.PRI_CUST_ID IN (SELECT B.PRI_CUST_ID FROM CCCUSTOM B WHERE B.CUST_ID = \'" + customerID + "\') \n" +
					") A,\n" +
					"(  \n" +
						"SELECT 	'AUTO'                      	    AS 'INSURANCE', \n" +
										"B.TXN_TYPE					AS 'TXNTYPE', \n" +
										"B.CUST_ID						AS 'CUST_ID', \n" +
										"B.PLATE_NO				    AS 'POLICY_NO', \n" +
										"B.NEW_EXP_DATE		AS 'EXPIRY', \n" +
										"B.COMPANY_NAME		AS 'COMPANY', \n" +
										"B.PREMIUM					AS 'PREMIUM' \n" +
						"FROM    	AUTXNPRM B \n" +
						"WHERE  B.TXN_TYPE IN ('NEW PLATE', 'RENEWAL') \n" +
						"AND       	B.NEW_EXP_DATE >= date_format(now(), \"%Y%m%d\") \n"+
						"UNION ALL \n" +
		                "SELECT 'HOME'                        	AS 'INSURANCE', \n" +
										"C.TXN_TYPE					AS 'TXNTYPE', \n" +
										"C.CUST_ID						AS 'CUST_ID', \n" +
										"C.SIGXP_NO					AS 'POLICY_NO', \n" +
										"C.NEW_EXP_DATE		AS 'EXPIRY', \n" +
										"C.COMPANY_NAME		AS 'COMPANY', \n" +
										"C.PREMIUM					AS 'PREMIUM' \n" +
						"FROM    HOTXNPRM C \n" +
						"WHERE  C.TXN_TYPE IN ('NEW BIZ', 'RENEWAL') \n"+
						"AND        C.NEW_EXP_DATE >= date_format(now(), \"%Y%m%d\") \n" +
		                "UNION ALL \n" +
		                "SELECT 'COMM'                        	AS 'INSURANCE', \n" +
										"D.TXN_TYPE					AS 'TXNTYPE', \n" +                                                            
										"D.CUST_ID						AS 'CUST_ID', \n" +
										"D.SIGXP_NO					AS 'POLICY_NO', \n" +
										"D.NEW_EXP_DATE		AS 'EXPIRY', \n" +
										"D.COMPANY_NAME		AS 'COMPANY', \n" +
										"D.PREMIUM					AS 'PREMIUM' \n" +
						"FROM     COTXNPRM D \n" +
						"WHERE  D.TXN_TYPE IN ('NEW BIZ', 'RENEWAL') \n" +
						"AND        D.NEW_EXP_DATE >= date_format(now(), \"%Y%m%d\") \n" + 
						"UNION ALL \n" +
		                "SELECT 'TRAV'                        		AS 'INSURANCE', \n" +
										"E.TXN_TYPE					AS 'TXNTYPE', \n" +                            
										"E.CUST_ID						AS 'CUST_ID', \n" +
										"E.POLICY_NO				AS 'POLICY_NO', \n" +
										"E.EXP_DATE		            AS 'EXPIRY', \n" +
										"E.COMPANY_NAME		AS 'COMPANY', \n" +
										"E.PREMIUM					AS 'PREMIUM' \n" +
						"FROM     TRTXNPRM E \n" +
						"WHERE  E.TXN_TYPE IN ('NEW BIZ', 'RENEWAL') \n" +
						"AND        E.EXP_DATE >= date_format(now(), \"%Y%m%d\") \n" +
					") Z \n" +
			"WHERE A.CUST_ID = Z.CUST_ID \n" +
			"ORDER BY EXPIRY \n"; 
		    
			Utilities.connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
			
			PreparedStatement statement = Utilities.connection.prepareStatement(sql);
			
			Utilities.resultCalendarInfoSet = statement.executeQuery();
			
			GUIForCustomerCare.defaultTableModel_Calendar_Info.setRowCount(0);			

			while (Utilities.resultCalendarInfoSet.next())
			{				
				
				String expiryDate = Utilities.resultCalendarInfoSet.getString(1);
				String lastName = Utilities.resultCalendarInfoSet.getString(2);
				String firstName = Utilities.resultCalendarInfoSet.getString(3);
				String insKind = Utilities.resultCalendarInfoSet.getString(4);
				String companyName = Utilities.resultCalendarInfoSet.getString(5);
				String procType = Utilities.resultCalendarInfoSet.getString(6);
				String premium = Utilities.resultCalendarInfoSet.getString(7);

			    Object[] row = { expiryDate, lastName, firstName, insKind, companyName, procType, premium };
				
			    GUIForCustomerCare.defaultTableModel_Calendar_Info.addRow(row);			
			}
			String rs = String.valueOf(GUIForCustomerCare.defaultTableModel_Calendar_Info.getRowCount());
			GUIForCustomerCare.CalendarTextField.setText(rs);
			
			if (GUIForCustomerCare.defaultTableModel_Calendar_Info.getRowCount() > 0) {
				GUIForCustomerCare.jTable_Calendar_Info.setRowSelectionInterval(0, 0);
			}
			//AutomobileInfo end
		}
		catch (SQLException e) {
			System.out.println("SQLException - selectCalendarInfo" +  e.getStackTrace());
		}
		
		finally {
			Utilities.closeDatabase();
		}
	}
	
	public boolean submitMember(int dialogMode, String tempID, String LastName, String FirstName, String cellNum, String birthDate, String email, String priCustID, String memo, String postalCd, String addrStNum, String addrPvNum)
	{
		
		int result = 0;
		
		try
		{
			Utilities.connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
 
			if (dialogMode == databaseConstant.NEW_MODE)
			{	
				String id = String.format("%010d", Integer.parseInt(tempID));
				
				Utilities.preparedStatement = Utilities.connection.prepareStatement("INSERT INTO CCCUSTOM (CUST_ID, LAST_NAME, FIRST_NAME, CELL_NO, BIRTH_DATE, EMAIL, PRI_CUST_ID, MEMO, POSTAL_CD, ADDR_ST_NM, ADDR_PV_NM, CHG_DATE_TIME) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, DATE_FORMAT(now(),'%Y%m%d%H%i%s'));");
								
				Utilities.preparedStatement.setString(1, id);
				Utilities.preparedStatement.setString(2, LastName);
				Utilities.preparedStatement.setString(3, FirstName);
				Utilities.preparedStatement.setString(4, cellNum);
				Utilities.preparedStatement.setString(5, birthDate);
				Utilities.preparedStatement.setString(6, email);
				Utilities.preparedStatement.setString(7, priCustID);
				Utilities.preparedStatement.setString(8, memo);
				Utilities.preparedStatement.setString(9, postalCd);
				Utilities.preparedStatement.setString(10, addrStNum);
				Utilities.preparedStatement.setString(11, addrPvNum);
								
	//			       the mysql insert Utilities.statement
			}
			else if (dialogMode == databaseConstant.EDIT_MODE)
			{
				Utilities.preparedStatement = Utilities.connection.prepareStatement("UPDATE CCCUSTOM SET LAST_NAME=?, FIRST_NAME=?, CELL_NO=?, BIRTH_DATE=?, EMAIL=?, PRI_CUST_ID = ?, MEMO = ?, POSTAL_CD = ?, ADDR_ST_NM = ?, ADDR_PV_NM = ?, CHG_DATE_TIME = DATE_FORMAT(now(),'%Y%m%d%H%i%s') WHERE CUST_ID=?");
				Utilities.preparedStatement.setString(1, LastName);
				Utilities.preparedStatement.setString(2, FirstName);
				Utilities.preparedStatement.setString(3, cellNum);
				Utilities.preparedStatement.setString(4, birthDate);
				Utilities.preparedStatement.setString(5, email);
				Utilities.preparedStatement.setString(6, priCustID);
				Utilities.preparedStatement.setString(7, memo);
				Utilities.preparedStatement.setString(8, postalCd);
				Utilities.preparedStatement.setString(9, addrStNum);
				Utilities.preparedStatement.setString(10, addrPvNum);
				Utilities.preparedStatement.setString(11, tempID);
				
			}
			result = Utilities.preparedStatement.executeUpdate();
			
			// ASCII에서 pricustID가 null이 아니라 0을 넣고 있어서 mysql이 null을 못 넣는다.
		}
		catch (SQLException e)
		{
			System.out.println("submitMember" +  e.getStackTrace());
			JOptionPane.showMessageDialog(GUIForCustomerCare.jFrame, "customer submit error");
		}
		
		finally
		{
			Utilities.closeDatabase();
		}
		
		System.out.println("SearchMember::submitMember");
		
		return (result > 0) ? true : false;
	}
	
	public boolean submitMemberForAuto(int dialogMode, String tempID, String time_stamp, String txnType, String plateNo, String docNo, 
									  String expDate, String newExpDate, String procType, String premium, String textDateTime, String callDateTime, 
									  String visitDateTime, String completeDate, String companyName, String ownerShip, String memo, String postalCD, 
									  String addrStNum, String addrPvNum)
	{
		
		int result = 0;
		
		try
		{
			Utilities.connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
 
			if (dialogMode == databaseConstant.NEW_MODE)
			{
					System.out.println("submitMember new");
					
					Float premiumForAuto = Float.parseFloat(premium);
					
					Utilities.preparedStatement = Utilities.connection.prepareStatement("INSERT INTO AUTXNPRM (CUST_ID, TIME_STAMP, TXN_TYPE, PLATE_NO, DOC_NO, EXP_DATE, NEW_EXP_DATE, PROC_TYPE, PREMIUM, TEXT_DATE_TIME, CALL_DATE_TIME, VISIT_DATE_TIME, COMPLETE_DATE, COMPANY_NAME, OWNERSHIP, MEMO, POSTAL_CD, ADDR_ST_NM, ADDR_PV_NM, CHG_DATE_TIME)" + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, DATE_FORMAT(now(),'%Y%m%d%H%i%s'))"); // 19
				    
					Utilities.preparedStatement.setString(1, tempID);
					Utilities.preparedStatement.setString(2, time_stamp);
					Utilities.preparedStatement.setString(3, txnType);
					Utilities.preparedStatement.setString(4, plateNo);
					Utilities.preparedStatement.setString(5, docNo);
					Utilities.preparedStatement.setString(6, expDate);
					Utilities.preparedStatement.setString(7, newExpDate);
					Utilities.preparedStatement.setString(8, procType);
					Utilities.preparedStatement.setFloat(9, premiumForAuto);
					Utilities.preparedStatement.setString(10, textDateTime);
					Utilities.preparedStatement.setString(11, callDateTime);
					Utilities.preparedStatement.setString(12, visitDateTime);
					Utilities.preparedStatement.setString(13, completeDate);
					Utilities.preparedStatement.setString(14, companyName);
					Utilities.preparedStatement.setString(15, ownerShip);
					Utilities.preparedStatement.setString(16, memo);
					Utilities.preparedStatement.setString(17, postalCD);
					Utilities.preparedStatement.setString(18, addrStNum);
					Utilities.preparedStatement.setString(19, addrPvNum);

	//			       the mysql insert Utilities.statement
			}
			else if (dialogMode == databaseConstant.EDIT_MODE)
			{
				Float premiumForAuto = Float.parseFloat(premium);
				
				System.out.println(tempID);
								
				Utilities.preparedStatement = Utilities.connection.prepareStatement("UPDATE AUTXNPRM SET TXN_TYPE=?, PLATE_NO = ?, DOC_NO = ?, EXP_DATE = ?, NEW_EXP_DATE = ?, PROC_TYPE = ?, PREMIUM = ?, TEXT_DATE_TIME = ?, CALL_DATE_TIME = ?, VISIT_DATE_TIME = ?, COMPLETE_DATE = ?, COMPANY_NAME = ?, OWNERSHIP = ?, MEMO = ?, POSTAL_CD = ?, ADDR_ST_NM = ?, ADDR_PV_NM = ?, CHG_DATE_TIME = DATE_FORMAT(now(),'%Y%m%d%H%i%s') WHERE TIME_STAMP = ? AND CUST_ID = ?");
				Utilities.preparedStatement.setString(1, txnType);
				Utilities.preparedStatement.setString(2, plateNo);
				Utilities.preparedStatement.setString(3, docNo);
				Utilities.preparedStatement.setString(4, expDate);
				Utilities.preparedStatement.setString(5, newExpDate);
				Utilities.preparedStatement.setString(6, procType);
				Utilities.preparedStatement.setFloat(7, premiumForAuto);
				Utilities.preparedStatement.setString(8, textDateTime);
				Utilities.preparedStatement.setString(9, callDateTime);
				Utilities.preparedStatement.setString(10, visitDateTime);
				Utilities.preparedStatement.setString(11, completeDate);
				Utilities.preparedStatement.setString(12, companyName);
				Utilities.preparedStatement.setString(13, ownerShip);
				Utilities.preparedStatement.setString(14, memo);
				Utilities.preparedStatement.setString(15, postalCD);
				Utilities.preparedStatement.setString(16, addrStNum);
				Utilities.preparedStatement.setString(17, addrPvNum);
				Utilities.preparedStatement.setString(18, time_stamp);
				Utilities.preparedStatement.setString(19, tempID);
			}
				
			result = Utilities.preparedStatement.executeUpdate();
		}
		catch (SQLException e)
		{
			System.out.println("submitMember" +  e.getStackTrace());
			JOptionPane.showMessageDialog(GUIForCustomerCare.jFrame, "auto update error");
		}
		
		finally
		{
			Utilities.closeDatabase();
		}
		
		return (result > 0) ? true : false;
	}
	
	public boolean submitMemberForHome(int dialogMode, String tempID, String time_stamp, String expDate,
									 String newExpDate, String txnType, String procType, String sigxpNo, String premium, 
									 String textDateTime, String callDateTime, String visitDateTime, String completeDate, String companyName, String ownerShip, 
									 String memo, String postalCd, String addrStNum, String addrPvNum)
	{

		int result = 0;

		try
		{
			Utilities.connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);

			if (dialogMode == databaseConstant.NEW_MODE)
			{	
				Float premiumForAuto = Float.parseFloat(premium);

				Utilities.preparedStatement = Utilities.connection.prepareStatement("INSERT INTO HOTXNPRM (CUST_ID, TIME_STAMP, EXP_DATE, NEW_EXP_DATE, TXN_TYPE, PROC_TYPE, SIGXP_NO, PREMIUM, TEXT_DATE_TIME, CALL_DATE_TIME, VISIT_DATE_TIME, COMPLETE_DATE, COMPANY_NAME, OWNERSHIP, MEMO, POSTAL_CD, ADDR_ST_NM, ADDR_PV_NM, CHG_DATE_TIME)" + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, DATE_FORMAT(now(),'%Y%m%d%H%i%s'))"); // 18

				Utilities.preparedStatement.setString(1, tempID);
				Utilities.preparedStatement.setString(2, time_stamp);
				Utilities.preparedStatement.setString(3, expDate);
				Utilities.preparedStatement.setString(4, newExpDate);
				Utilities.preparedStatement.setString(5, txnType);
				Utilities.preparedStatement.setString(6, procType);
				Utilities.preparedStatement.setString(7, sigxpNo);
				Utilities.preparedStatement.setFloat(8, premiumForAuto);
				Utilities.preparedStatement.setString(9, textDateTime);
				Utilities.preparedStatement.setString(10, callDateTime);
				Utilities.preparedStatement.setString(11, visitDateTime);
				Utilities.preparedStatement.setString(12, completeDate);
				Utilities.preparedStatement.setString(13, companyName);
				Utilities.preparedStatement.setString(14, ownerShip);
				Utilities.preparedStatement.setString(15, memo);
				Utilities.preparedStatement.setString(16, postalCd);
				Utilities.preparedStatement.setString(17, addrStNum);
				Utilities.preparedStatement.setString(18, addrPvNum);

//			       the mysql insert Utilities.statement
			}
			else if (dialogMode == databaseConstant.EDIT_MODE)
			{
				System.out.println("premium = " + premium);
				System.out.println("callDateTime = " + callDateTime);
				System.out.println(time_stamp);				
				System.out.println(tempID);				
				
				System.out.println("submitMember new2");
				Utilities.preparedStatement = Utilities.connection.prepareStatement("UPDATE HOTXNPRM SET EXP_DATE=?, NEW_EXP_DATE = ?, TXN_TYPE = ?, PROC_TYPE = ?, SIGXP_NO = ?, PREMIUM = ?, TEXT_DATE_TIME = ?, CALL_DATE_TIME = ?, VISIT_DATE_TIME = ?, COMPLETE_DATE = ?, COMPANY_NAME = ?, OWNERSHIP = ?, MEMO = ?, POSTAL_CD = ?, ADDR_ST_NM = ?, ADDR_PV_NM = ?, CHG_DATE_TIME = DATE_FORMAT(now(),'%Y%m%d%H%i%s') WHERE TIME_STAMP = ? AND CUST_ID = ?");
				Utilities.preparedStatement.setString(1, expDate);
				Utilities.preparedStatement.setString(2, newExpDate);
				Utilities.preparedStatement.setString(3, txnType);
				Utilities.preparedStatement.setString(4, procType);
				Utilities.preparedStatement.setString(5, sigxpNo);
				Utilities.preparedStatement.setString(6, premium);
				Utilities.preparedStatement.setString(7, textDateTime);
				Utilities.preparedStatement.setString(8, callDateTime);
				Utilities.preparedStatement.setString(9, visitDateTime);
				Utilities.preparedStatement.setString(10, completeDate);
				Utilities.preparedStatement.setString(11, companyName);
				Utilities.preparedStatement.setString(12, ownerShip);
				Utilities.preparedStatement.setString(13, memo);
				Utilities.preparedStatement.setString(14, postalCd);
				Utilities.preparedStatement.setString(15, addrStNum);
				Utilities.preparedStatement.setString(16, addrPvNum);
				Utilities.preparedStatement.setString(17, time_stamp);
				Utilities.preparedStatement.setString(18, tempID);
			}
			result = Utilities.preparedStatement.executeUpdate();
		}
		catch (SQLException e)
		{
			System.out.println("submitMember" +  e.getStackTrace());
			JOptionPane.showMessageDialog(GUIForCustomerCare.jFrame, "home update error");
		}

		finally
		{
			Utilities.closeDatabase();
		}

		return (result > 0) ? true : false;
	}
	
	public boolean submitMemberForTravel(int dialogMode, String tempID, String time_stamp, String effDate, 
			  String expDate, String txnType, String procType, String policyNo, String premium, String textDateTime, String callDateTime, 
			  String mailDateTime, String completeDate, String companyName, String ownerShip, String memo)
	{
	
		int result = 0;
	
		try
		{
			Utilities.connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
		
			if (dialogMode == databaseConstant.NEW_MODE)
			{
				
				Utilities.preparedStatement = Utilities.connection.prepareStatement("INSERT INTO TRTXNPRM (CUST_ID, TIME_STAMP, EFF_DATE, EXP_DATE, TXN_TYPE, PROC_TYPE, PREMIUM, TEXT_DATE_TIME, CALL_DATE_TIME, MAIL_DATE_TIME, COMPLETE_DATE, COMPANY_NAME, OWNERSHIP, MEMO, CHG_DATE_TIME, POLICY_NO)" + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, DATE_FORMAT(now(),'%Y%m%d%H%i%s') , ?)"); // 19
				
				Utilities.preparedStatement.setString(1, tempID);
				Utilities.preparedStatement.setString(2, time_stamp);
				Utilities.preparedStatement.setString(3, effDate);
				Utilities.preparedStatement.setString(4, expDate);
				Utilities.preparedStatement.setString(5, txnType);
				Utilities.preparedStatement.setString(6, procType);
				Utilities.preparedStatement.setString(7, premium);
				Utilities.preparedStatement.setString(8, textDateTime);
				Utilities.preparedStatement.setString(9, callDateTime);
				Utilities.preparedStatement.setString(10, mailDateTime);
				Utilities.preparedStatement.setString(11, completeDate);
				Utilities.preparedStatement.setString(12, companyName);
				Utilities.preparedStatement.setString(13, ownerShip);
				Utilities.preparedStatement.setString(14, memo);
				Utilities.preparedStatement.setString(15, policyNo);
		
		//			       the mysql insert Utilities.statement
			}
			else if (dialogMode == databaseConstant.EDIT_MODE)
			{				
				Float premiumForAuto = Float.parseFloat(premium);

				Utilities.preparedStatement = Utilities.connection.prepareStatement("UPDATE TRTXNPRM SET EFF_DATE = ?, EXP_DATE = ?, TXN_TYPE = ?, PROC_TYPE = ?, PREMIUM = ?, TEXT_DATE_TIME = ?, CALL_DATE_TIME = ?, MAIL_DATE_TIME = ?, COMPLETE_DATE = ?, COMPANY_NAME = ?, OWNERSHIP = ?, MEMO = ?, CHG_DATE_TIME = DATE_FORMAT(now(),'%Y%m%d%H%i%s'), POLICY_NO = ? WHERE TIME_STAMP =? AND CUST_ID = ?");
				Utilities.preparedStatement.setString(1, effDate);
				Utilities.preparedStatement.setString(2, expDate);
				Utilities.preparedStatement.setString(3, txnType);
				Utilities.preparedStatement.setString(4, procType);
				Utilities.preparedStatement.setFloat(5, premiumForAuto);
				Utilities.preparedStatement.setString(6, textDateTime);
				Utilities.preparedStatement.setString(7, callDateTime);
				Utilities.preparedStatement.setString(8, mailDateTime);
				Utilities.preparedStatement.setString(9, completeDate);
				Utilities.preparedStatement.setString(10, companyName);
				Utilities.preparedStatement.setString(11, ownerShip);
				Utilities.preparedStatement.setString(12, memo);
				Utilities.preparedStatement.setString(13, policyNo);
				Utilities.preparedStatement.setString(14, time_stamp);
				Utilities.preparedStatement.setString(15, tempID);
			}

			result = Utilities.preparedStatement.executeUpdate();
		}
		catch (SQLException e)
		{
			System.out.println("submitMemberForTravel" +  e.getStackTrace());
			JOptionPane.showMessageDialog(GUIForCustomerCare.jFrame, "travel update error");
		}
	
		finally
		{
			Utilities.closeDatabase();
		}
	
		return (result > 0) ? true : false;
	
	}
	
	public boolean submitMemberForCommercial(int dialogMode, String tempID, String time_stamp, String expDate, 
			  String newExpDate, String txnType, String procType, String sigxpNo, String premium, String textDateTime, String callDateTime, 
			  String visitDateTime, String completeDate, String companyName, String ownerShip, String memo)
	{
	
		int result = 0;
	
		try
		{
			Utilities.connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
		
			if (dialogMode == databaseConstant.NEW_MODE)
			{	
				
				Float premiumForCommercial = Float.parseFloat(premium);

				Utilities.preparedStatement = Utilities.connection.prepareStatement("INSERT INTO COTXNPRM (CUST_ID, TIME_STAMP, EXP_DATE, NEW_EXP_DATE, TXN_TYPE, PROC_TYPE, PREMIUM, TEXT_DATE_TIME, CALL_DATE_TIME, VISIT_DATE_TIME, COMPLETE_DATE, COMPANY_NAME, OWNERSHIP, MEMO, CHG_DATE_TIME, SIGXP_NO)"+ "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, DATE_FORMAT(now(),'%Y%m%d%H%i%s'), ?)"); // 14
				
				System.out.println(tempID);
				
				Utilities.preparedStatement.setString(1, tempID);
				Utilities.preparedStatement.setString(2, time_stamp);
				Utilities.preparedStatement.setString(3, expDate);
				Utilities.preparedStatement.setString(4, newExpDate);
				Utilities.preparedStatement.setString(5, txnType);
				Utilities.preparedStatement.setString(6, procType);
				Utilities.preparedStatement.setFloat(7, premiumForCommercial);
				Utilities.preparedStatement.setString(8, textDateTime);
				Utilities.preparedStatement.setString(9, callDateTime);
				Utilities.preparedStatement.setString(10, visitDateTime);
				Utilities.preparedStatement.setString(11, completeDate);
				Utilities.preparedStatement.setString(12, companyName);
				Utilities.preparedStatement.setString(13, ownerShip);
				Utilities.preparedStatement.setString(14, memo);
				Utilities.preparedStatement.setString(15, sigxpNo);
		
		//			       the mysql insert Utilities.statement
			}
			else if (dialogMode == databaseConstant.EDIT_MODE)
			{				
				Float premiumForCommercial = Float.parseFloat(premium);

				Utilities.preparedStatement = Utilities.connection.prepareStatement("UPDATE COTXNPRM SET EXP_DATE = ?, NEW_EXP_DATE = ?, TXN_TYPE = ?, PROC_TYPE = ?, PREMIUM = ?, TEXT_DATE_TIME = ?, CALL_DATE_TIME = ?, VISIT_DATE_TIME = ?, COMPLETE_DATE = ?, COMPANY_NAME = ?, OWNERSHIP = ?, MEMO = ?, CHG_DATE_TIME = DATE_FORMAT(now(),'%Y%m%d%H%i%s'), SIGXP_NO = ? WHERE TIME_STAMP =? AND CUST_ID = ?");
				Utilities.preparedStatement.setString(1, expDate);
				Utilities.preparedStatement.setString(2, newExpDate);
				Utilities.preparedStatement.setString(3, txnType);
				Utilities.preparedStatement.setString(4, procType);
				Utilities.preparedStatement.setFloat(5, premiumForCommercial);
				Utilities.preparedStatement.setString(6, textDateTime);
				Utilities.preparedStatement.setString(7, callDateTime);
				Utilities.preparedStatement.setString(8, visitDateTime);
				Utilities.preparedStatement.setString(9, completeDate);
				Utilities.preparedStatement.setString(10, companyName);
				Utilities.preparedStatement.setString(11, ownerShip);
				Utilities.preparedStatement.setString(12, memo);
				Utilities.preparedStatement.setString(13, sigxpNo);
				Utilities.preparedStatement.setString(14, time_stamp);
				Utilities.preparedStatement.setString(15, tempID);
			}

			result = Utilities.preparedStatement.executeUpdate();
		}
		catch (SQLException e)
		{
			System.out.println("submitMemberForCommercial" +  e.getStackTrace());
			JOptionPane.showMessageDialog(GUIForCustomerCare.jFrame, "commercial update error");
		}
	
		finally
		{
			Utilities.closeDatabase();
		}
	
		return (result > 0) ? true : false;
	
	}
	
	public boolean insertMemberForOther(int dialogMode, String tempID, String time_stamp)
	{
	
		int result = 0;
	
		try
		{
			Utilities.connection = DriverManager.getConnection(DatabaseConstant.URL, DatabaseConstant.USER, DatabaseConstant.PASSWORD);
			
			if (dialogMode == databaseConstant.AUTOMOBILE_MODE) { 
				Utilities.preparedStatement = Utilities.connection.prepareStatement("INSERT INTO AUTXNPRM (CUST_ID, TIME_STAMP, PLATE_NO, EXP_DATE, TXN_TYPE, PROC_TYPE, PREMIUM, COMPANY_NAME, OWNERSHIP, CHG_DATE_TIME) SELECT CUST_ID, DATE_FORMAT(now(),'%Y%m%d%H%i%s'), PLATE_NO, NEW_EXP_DATE, 'RENEWAL', 'READY', 0.00, COMPANY_NAME, OWNERSHIP, DATE_FORMAT(now(),'%Y%m%d%H%i%s') FROM AUTXNPRM WHERE CUST_ID = ? AND TIME_STAMP = ?;");
												
				Utilities.preparedStatement.setString(1, tempID);
				Utilities.preparedStatement.setString(2, time_stamp);
			}
			else if (dialogMode == databaseConstant.HOME_MODE) { 
				Utilities.preparedStatement = Utilities.connection.prepareStatement("INSERT INTO HOTXNPRM (CUST_ID, TIME_STAMP, SIGXP_NO, EXP_DATE, TXN_TYPE, PROC_TYPE, PREMIUM, COMPANY_NAME, OWNERSHIP, CHG_DATE_TIME) SELECT CUST_ID, DATE_FORMAT(now(),'%Y%m%d%H%i%s'), SIGXP_NO, NEW_EXP_DATE, 'RENEWAL', 'READY', 0.00, COMPANY_NAME, OWNERSHIP, DATE_FORMAT(now(),'%Y%m%d%H%i%s') FROM HOTXNPRM WHERE CUST_ID = ? AND TIME_STAMP = ?;");
								
				Utilities.preparedStatement.setString(1, tempID);
				Utilities.preparedStatement.setString(2, time_stamp);
			}
			else if (dialogMode == databaseConstant.COMMERCIAL_MODE) { 
				Utilities.preparedStatement = Utilities.connection.prepareStatement("INSERT INTO COTXNPRM (CUST_ID, TIME_STAMP, EXP_DATE, TXN_TYPE, PROC_TYPE, PREMIUM, COMPANY_NAME, OWNERSHIP, CHG_DATE_TIME) SELECT CUST_ID, DATE_FORMAT(now(),'%Y%m%d%H%i%s'), NEW_EXP_DATE, 'RENEWAL', 'READY', 0.00, COMPANY_NAME, OWNERSHIP, DATE_FORMAT(now(),'%Y%m%d%H%i%s') FROM COTXNPRM WHERE CUST_ID = ? AND TIME_STAMP = ?;"); // 14
								
				Utilities.preparedStatement.setString(1, tempID);
				Utilities.preparedStatement.setString(2, time_stamp);
			}
		//			       the mysql insert Utilities.statement
			result = Utilities.preparedStatement.executeUpdate();
		}
		catch (SQLException e)
		{
			System.out.println("insertMemberForOther - " +  e.getStackTrace());
			JOptionPane.showMessageDialog(GUIForCustomerCare.jFrame, "insert member error");
		}
	
		finally
		{
			Utilities.closeDatabase();
		}
	
		return (result > 0) ? true : false;
	}
	
	public static void main(String[] args) {
		new CustomerCare();
		new GUIForCustomerCare();
	}
}
